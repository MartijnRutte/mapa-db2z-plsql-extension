// Generated from src/DB2zPLSQLParser.g4 by ANTLR 4.9.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DB2zPLSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADMIN_COMMAND_DSN=1, ADMIN_COMMAND_DB2=2, DSNUTILU=3, LPAREN=4, RPAREN=5, 
		SIMPLEQUOTE=6, OPENSQBRACKET=7, CLOSESQBRACKET=8, QUESTIONMARK=9, EQ=10, 
		GT=11, LT=12, GE=13, LE=14, NE=15, PLUS=16, MINUS=17, SPLAT=18, SLASH=19, 
		CONCATOP=20, DOT=21, COLON=22, SEMICOLON=23, COMMA=24, NONNUMERICLITERAL=25, 
		INTEGERLITERAL=26, NUMERICLITERAL=27, NEWLINE=28, WS=29, SET_STATEMENT_TERMINATOR=30, 
		SQLCOMMENT=31, SQLBLOCKCOMMENTBEGIN=32, SQLBLOCKCOMMENTEND=33, INSTEAD=34, 
		NEW=35, NEW_TABLE=36, OLD_TABLE=37, REFERENCING=38, BASED=39, UPON=40, 
		ADD=41, AFTER=42, ALL=43, ALLOCATE=44, ALLOW=45, ALTER=46, ALTERAND=47, 
		ANY=48, ARRAY=49, ARRAY_EXISTS=50, AS=51, ASENSITIVE=52, ASSOCIATE=53, 
		ASUTIME=54, AT=55, AUDIT=56, AUX=57, AUXILIARY=58, BEFORE=59, BEGIN=60, 
		BETWEEN=61, BUFFERPOOL=62, BUFFERPOOLS=63, BY=64, CALL=65, CAPTURE=66, 
		CASCADED=67, CASE=68, CAST=69, CCSID=70, CHAR=71, CHARACTER=72, CHECK=73, 
		CLONE=74, CLOSE=75, CLUSTER=76, COLLECTION=77, COLLID=78, COLUMN=79, COMMENT=80, 
		COMMIT=81, CONCAT=82, CONDITION=83, CONNECT=84, CONNECTION=85, CONSTRAINT=86, 
		CONTAINS=87, CONTENT=88, CONTINUE=89, CREATE=90, CUBE=91, CURRENT=92, 
		CURRVAL=93, CURSOR=94, DATA=95, DATABASE=96, DAY=97, DAYS=98, DBINFO=99, 
		DECLARE=100, DEFAULT=101, DELETE=102, DESCRIPTOR=103, DETERMINISTIC=104, 
		DISABLE=105, DISALLOW=106, DISTINCT=107, DO=108, DOCUMENT=109, DOUBLE=110, 
		DROP=111, DSSIZE=112, DYNAMIC=113, EDITPROC=114, ELSE=115, ELSEIF=116, 
		ENCODING=117, ENCRYPTION=118, END=119, END_EXEC=120, ENDING=121, ERASE=122, 
		ESCAPE=123, EXCEPT=124, EXCEPTION=125, EXEC_SQL=126, EXECUTE=127, EXISTS=128, 
		EXIT=129, EXPLAIN=130, EXTERNAL=131, FENCED=132, FETCH=133, FIELDPROC=134, 
		FINAL=135, FIRST=136, FOR=137, FREE=138, FROM=139, FULL=140, FUNCTION=141, 
		GENERATED=142, GET=143, GLOBAL=144, GO=145, GOTO=146, GRANT=147, GROUP=148, 
		HANDLER=149, HAVING=150, HOLD=151, HOUR=152, HOURS=153, IF=154, IMMEDIATE=155, 
		IN=156, INCLUSIVE=157, INDEX=158, INDEXBP=159, INHERIT=160, INNER=161, 
		INOUT=162, INSENSITIVE=163, INSERT=164, INTERSECT=165, INTO=166, IS=167, 
		ISOBID=168, ITERATE=169, JAR=170, JOIN=171, KEEP=172, KEY=173, LABEL=174, 
		LANGUAGE=175, LAST=176, LC_CTYPE=177, LEAVE=178, LEFT=179, LIKE=180, LIMIT=181, 
		LOCAL=182, LOCALE=183, LOCATOR=184, LOCATORS=185, LOCK=186, LOCKMAX=187, 
		LOCKSIZE=188, LONG=189, LOOP=190, MAINTAINED=191, MATERIALIZED=192, MICROSECOND=193, 
		MICROSECONDS=194, MINUTEMINUTES=195, MODEL=196, MODIFIES=197, MONTH=198, 
		MONTHS=199, NEXT=200, NEXTVAL=201, NO=202, NONE=203, NOT=204, NULL=205, 
		NULLS=206, NUMPARTS=207, OBID=208, OF=209, OFFSET=210, OLD=211, ON=212, 
		OPEN=213, OPTIMIZATION=214, OPTIMIZE=215, OR=216, ORDER=217, ORGANIZATION=218, 
		OUT=219, OUTER=220, PACKAGE=221, PADDED=222, PARAMETER=223, PART=224, 
		PARTITION=225, PARTITIONED=226, PARTITIONING=227, PATH=228, PERIOD=229, 
		PIECESIZE=230, PLAN=231, PRECISION=232, PREPARE=233, PREVVAL=234, PRIOR=235, 
		PRIQTY=236, PRIVILEGES=237, PROCEDURE=238, PROGRAM=239, PSID=240, PUBLIC=241, 
		QUERY=242, QUERYNO=243, READS=244, REFERENCES=245, REFRESH=246, RELEASE=247, 
		RENAME=248, REPEAT=249, RESIGNAL=250, RESTRICT=251, RESULT=252, RESULT_SET_LOCATOR=253, 
		RETURN=254, RETURNS=255, REUSE=256, REVOKE=257, RIGHT=258, ROLE=259, ROLLBACK=260, 
		ROLLUP=261, ROUND_CEILING=262, ROUND_DOWN=263, ROUND_FLOOR=264, ROUND_HALF_DOWN=265, 
		ROUND_HALF_EVEN=266, ROUND_HALF_UP=267, ROUND_UP=268, ROW=269, ROWSET=270, 
		RUN=271, SAVEPOINT=272, SCHEMA=273, SCRATCHPAD=274, SECOND=275, SECONDS=276, 
		SECQTY=277, SECURITY=278, SELECT=279, SENSITIVE=280, SEQUENCE=281, SET=282, 
		SIGNAL=283, SIMPLE=284, SOME=285, SOURCE=286, SPECIFIC=287, STANDARD=288, 
		STATEMENT=289, STATIC=290, STAY=291, STOGROUP=292, STORAGE=293, STORES=294, 
		STYLE=295, SUMMARY=296, SYNONYM=297, SYSDATE=298, SYSTEM=299, SYSTIMESTAMP=300, 
		TABLE=301, TABLESPACE=302, THEN=303, TO=304, TRIGGER=305, TRIGGERS=306, 
		TRUNCATE=307, TYPE=308, UNDO=309, UNION=310, UNIQUE=311, UNTIL=312, UPDATE=313, 
		USING=314, VALIDPROC=315, VALUE=316, VALUES=317, VARIABLE=318, VARIANT=319, 
		VCAT=320, VERSIONING=321, VIEW=322, VOLATILE=323, VOLUMES=324, WHEN=325, 
		WHENEVER=326, WHERE=327, WHILE=328, WITH=329, WLM=330, XMLCAST=331, XMLEXISTS=332, 
		XMLNAMESPACES=333, YEAR=334, YEARS=335, ZONE=336, TIMEZONE=337, AND=338, 
		ARRAY_AGG=339, ASC=340, AVG=341, BIT=342, CHANGE=343, CODEUNITS16=344, 
		CODEUNITS32=345, CORR=346, CORRELATION=347, COUNT=348, COUNT_BIG=349, 
		COVAR=350, COVARIANCE=351, COVARIANCE_SAMP=352, COVAR_POP=353, COVAR_SAMP=354, 
		CS=355, CUME_DIST=356, DENSE_RANK=357, DESC=358, EBCDIC=359, EXCLUSIVE=360, 
		FIRST_VALUE=361, FOLLOWING=362, GROUPING=363, IGNORE=364, INDICATOR=365, 
		INPUT=366, ISNULL=367, LAG=368, LARGE=369, LAST_VALUE=370, LEAD=371, LISTAGG=372, 
		LOCKED=373, LOCKS=374, MEDIAN=375, MINUTES=376, MIXED=377, NOTNULL=378, 
		NTH_VALUE=379, NTILE=380, NUMERIC=381, OBJECT=382, OCTETS=383, ONLY=384, 
		OVER=385, PASSING=386, PERCENTILE_CONT=387, PERCENTILE_DISC=388, PERCENT_RANK=389, 
		PRECEDING=390, PREVIOUS=391, RANGE=392, RANK=393, RATIO_TO_REPORT=394, 
		READ=395, REF=396, REGR_AVGX=397, REGR_AVGY=398, REGR_COUNT=399, REGR_ICPT=400, 
		REGR_INTERCEPT=401, REGR_R2=402, REGR_SLOPE=403, REGR_SXX=404, REGR_SXY=405, 
		REGR_SYY=406, RESPECT=407, ROW_NUMBER=408, ROWS=409, RR=410, RS=411, SBCS=412, 
		SELECTIVITY=413, SETS=414, SHARE=415, SKIP_=416, STDDEV=417, STDDEV_POP=418, 
		STDDEV_SAMP=419, SUM=420, TOKEN=421, UNBOUNDED=422, UNPACK=423, UR=424, 
		USE=425, VAR=426, VARIANCE=427, VARIANCE_SAMP=428, VAR_POP=429, VAR_SAMP=430, 
		VARYING=431, WITHOUT=432, XML=433, XMLAGG=434, COLUMNS=435, SQLID=436, 
		ORDINALITY=437, SYSTEM_TIME=438, BUSINESS_TIME=439, MULTIPLIER=440, UNNEST=441, 
		CROSS=442, CALLER=443, CLIENT=444, POSITIONING=445, SCROLL=446, ACTION=447, 
		ASSEMBLE=448, C_=449, CALLED=450, COBOL=451, DB2=452, DEFINER=453, DISPATCH=454, 
		ENVIRONMENT=455, FAILURE=456, FAILURES=457, JAVA=458, MAIN=459, NAME=460, 
		OPTIONS=461, PARALLEL=462, PLI=463, REGISTERS=464, RESIDENT=465, SECURED=466, 
		SPECIAL=467, SQL=468, STOP=469, SUB=470, YES=471, APPLICATION=472, CHANGED=473, 
		COMPATIBILITY=474, COMPRESS=475, COPY=476, FREEPAGE=477, GBPCACHE=478, 
		INCLUDE=479, MAXVALUE=480, MINVALUE=481, PCTFREE=482, REGENERATE=483, 
		MASK=484, ENABLE=485, PERMISSION=486, ATOMIC=487, SQLEXCEPTION=488, MERGE=489, 
		MATCHED=490, SQLSTATE=491, MESSAGE_TEXT=492, OVERRIDING=493, PORTION=494, 
		DB=495, DSN=496, DB2SQL=497, DEBUG=498, GENERAL=499, MODE_=500, REXX=501, 
		CACHE=502, CYCLE=503, INCREMENT=504, RESTART=505, DATACLAS=506, MGMTCLAS=507, 
		REMOVE=508, STORCLAS=509, ACCESS=510, ACTIVATE=511, ALWAYS=512, APPEND=513, 
		ARCHIVE=514, BUSINESS=515, CASCADE=516, CHANGES=517, CONTROL=518, DEACTIVATE=519, 
		DEFERRED=520, EACH=521, ENFORCED=522, EXTRA=523, FOREIGN=524, HIDDEN_=525, 
		HISTORY=526, ID=527, IDENTITY=528, IMPLICITLY=529, INITIALLY=530, INLINE=531, 
		OPERATION=532, ORGANIZE=533, OVERLAPS=534, PACKAGE_NAME=535, PACKAGE_SCHEMA=536, 
		PACKAGE_VERSION=537, PRIMARY=538, RESET=539, ROTATE=540, START=541, SYSIBM=542, 
		TRANSACTION=543, XMLSCHEMA=544, ELEMENT=545, URL=546, NAMESPACE=547, LOCATION=548, 
		SYSXSR=549, ALGORITHM=550, FIXEDLENGTH=551, HUFFMAN=552, LOB=553, LOG=554, 
		LOGGED=555, MAXPARTITIONS=556, MAXROWS=557, MEMBER=558, MOVE=559, PAGE=560, 
		PAGENUM=561, PENDING=562, RELATIVE=563, SEGSIZE=564, TRACKMOD=565, ADDRESS=566, 
		ATTRIBUTES=567, AUTHENTICATION=568, AUTHID=569, CONTEXT=570, JOBNAME=571, 
		OWNER=572, PROFILE=573, QUALIFIER=574, SERVAUTH=575, TRUSTED=576, SECTION=577, 
		ACTIVE=578, VERSION=579, ALIAS=580, WORK=581, WORKFILE=582, SYSDEFLT=583, 
		NULTERM=584, STRUCTURE=585, GENERIC=586, TEMPORARY=587, DEFER=588, DEFINE=589, 
		EXCLUDE=590, GENERATE=591, KEYS=592, XMLPATTERN=593, SIZE=594, EVERY=595, 
		ABSOLUTE=596, ACCELERATOR=597, EXCLUDING=598, INCLUDING=599, DEFAULTS=600, 
		MODIFIERS=601, OPTION=602, PRESERVE=603, BOTH=604, DESCRIBE=605, LABELS=606, 
		NAMES=607, OUTPUT=608, EXCHANGE=609, STABILIZED=610, STMTCACHE=611, STMTID=612, 
		STMTTOKEN=613, STARTING=614, CATALOG_NAME=615, CONDITION_NUMBER=616, CURSOR_NAME=617, 
		DB2_AUTHENTICATION_TYPE=618, DB2_AUTHORIZATION_ID=619, DB2_CONNECTION_STATE=620, 
		DB2_CONNECTION_STATUS=621, DB2_ENCRYPTION_TYPE=622, DB2_ERROR_CODE1=623, 
		DB2_ERROR_CODE2=624, DB2_ERROR_CODE3=625, DB2_ERROR_CODE4=626, DB2_GET_DIAGNOSTICS_DIAGNOSTICS=627, 
		DB2_INTERNAL_ERROR_POINTER=628, DB2_LAST_ROW=629, DB2_LINE_NUMBER=630, 
		DB2_MESSAGE_ID=631, DB2_MODULE_DETECTING_ERROR=632, DB2_NUMBER_PARAMETER_MARKERS=633, 
		DB2_NUMBER_RESULT_SETS=634, DB2_NUMBER_ROWS=635, DB2_ORDINAL_TOKEN_=636, 
		DB2_ORDINAL_TOKEN_n=637, DB2_PRODUCT_ID=638, DB2_REASON_CODE=639, DB2_RETURNED_SQLCODE=640, 
		DB2_RETURN_STATUS=641, DB2_ROW_NUMBER=642, DB2_SERVER_CLASS_NAME=643, 
		DB2_SQL_ATTR_CURSOR_HOLD=644, DB2_SQL_ATTR_CURSOR_ROWSET=645, DB2_SQL_ATTR_CURSOR_SCROLLABLE=646, 
		DB2_SQL_ATTR_CURSOR_SENSITIVITY=647, DB2_SQL_ATTR_CURSOR_TYPE=648, DB2_SQLERRD1=649, 
		DB2_SQLERRD2=650, DB2_SQLERRD3=651, DB2_SQLERRD4=652, DB2_SQLERRD5=653, 
		DB2_SQLERRD6=654, DB2_SQLERRD_SET=655, DB2_SQL_NESTING_LEVEL=656, DB2_TOKEN_COUNT=657, 
		DIAGNOSTICS=658, MORE_=659, NUMBER=660, RETURNED_SQLSTATE=661, ROW_COUNT=662, 
		SERVER_NAME=663, STACKED=664, CREATETAB=665, CREATETS=666, DBADM=667, 
		DBCTRL=668, DBMAINT=669, DISPLAYDB=670, IMAGCOPY=671, LOAD=672, PACKADM=673, 
		RECOVERDB=674, REORG=675, REPAIR=676, STARTDB=677, STATS=678, STOPDB=679, 
		BIND=680, ALTERIN=681, CREATEIN=682, DROPIN=683, USAGE=684, ACCESSCTRL=685, 
		BINDADD=686, BINDAGENT=687, BSDS=688, CREATEALIAS=689, CREATEDBA=690, 
		CREATEDBC=691, CREATE_SECURE_OBJECT=692, CREATESG=693, CREATETMTAB=694, 
		DATAACCESS=695, DEBUGSESSION=696, DISPLAY=697, MONITOR1=698, MONITOR2=699, 
		RECOVER=700, SQLADM=701, STOPALL=702, STOSPACE=703, SYSADM=704, SYSCTRL=705, 
		SYSOPR=706, TRACE=707, UNLOAD=708, WRITE=709, DEPENDENT=710, RETAIN=711, 
		CURSORS=712, PASSWORD=713, HINT=714, TRANSFER=715, OWNERSHIP=716, FOUND=717, 
		SQLERROR=718, SQLWARNING=719, WITHIN=720, EMPTY=721, XMLBINARY=722, BASE64=723, 
		XMLDECLARATION=724, REFERENCE=725, RETURNING=726, ABS=727, ABSVAL=728, 
		ACOS=729, ADD_DAYS=730, ADD_MONTHS=731, AI_ANALOGY=732, AI_SEMANTIC_CLUSTER=733, 
		AI_SIMILARITY=734, ARRAY_DELETE=735, ARRAY_FIRST=736, ARRAY_LAST=737, 
		ARRAY_NEXT=738, ARRAY_PRIOR=739, ARRAY_TRIM=740, ASCII=741, ASCII_CHR=742, 
		ASCIISTR=743, ASCII_STR=744, ASIN=745, ATAN=746, ATAN2=747, ATANH=748, 
		BIGINT=749, BINARY=750, BITAND=751, BITANDNOT=752, BITNOT=753, BITOR=754, 
		BITXOR=755, BLOB=756, BTRIM=757, CARDINALITY=758, CCSID_ENCODING=759, 
		CEIL=760, CEILING=761, CHAR9=762, CHARACTER_LENGTH=763, CHAR_LENGTH=764, 
		CHR=765, CLOB=766, COALESCE=767, COLLATION_KEY=768, COMPARE_DECFLOAT=769, 
		COS=770, COSH=771, DATE=772, DAYOFMONTH=773, DAYOFWEEK=774, DAYOFWEEK_ISO=775, 
		DAYOFYEAR=776, DAYS_BETWEEN=777, DBCLOB=778, DEC=779, DECFLOAT=780, DECFLOAT_FORMAT=781, 
		DECFLOAT_SORTKEY=782, DECIMAL=783, DECODE=784, DECRYPT_BINARY=785, DECRYPT_BIT=786, 
		DECRYPT_CHAR=787, DECRYPT_DATAKEY_BIGINT=788, DECRYPT_DATAKEY_BIT=789, 
		DECRYPT_DATAKEY_CLOB=790, DECRYPT_DATAKEY_DBCLOB=791, DECRYPT_DATAKEY_DECIMAL=792, 
		DECRYPT_DATAKEY_INTEGER=793, DECRYPT_DATAKEY_VARCHAR=794, DECRYPT_DATAKEY_VARGRAPHIC=795, 
		DECRYPT_DB=796, DEGREES=797, DIFFERENCE=798, DIGITS=799, DOUBLE_PRECISION=800, 
		DSN_XMLVALIDATE=801, EBCDIC_CHR=802, EBCDIC_STR=803, ENCRYPT_DATAKEY=804, 
		ENCRYPT_TDES=805, EXP=806, EXTRACT=807, FLOAT=808, FLOOR=809, GENERATE_UNIQUE=810, 
		GENERATE_UNIQUE_BINARY=811, GETHINT=812, GETVARIABLE=813, GRAPHIC=814, 
		GREATEST=815, HASH=816, HASH_CRC32=817, HASH_MD5=818, HASH_SHA1=819, HASH_SHA256=820, 
		HEX=821, IDENTITY_VAL_LOCAL=822, IFNULL=823, INSTR=824, INT=825, INTEGER=826, 
		JULIAN_DAY=827, LAST_DAY=828, LCASE=829, LEAST=830, LENGTH=831, LN=832, 
		LOCATE=833, LOCATE_IN_STRING=834, LOG10=835, LOWER=836, LPAD=837, LTRIM=838, 
		MAX=839, MAX_CARDINALITY=840, MIDNIGHT_SECONDS=841, MIN=842, MINUTE=843, 
		MOD=844, MONTHS_BETWEEN=845, MQREAD=846, MQREADCLOB=847, MQRECEIVE=848, 
		MQRECEIVECLOB=849, MQSEND=850, MULTIPLY_ALT=851, NEXT_DAY=852, NEXT_MONTH=853, 
		NORMALIZE_DECFLOAT=854, NORMALIZE_STRING=855, NULLIF=856, NVL=857, OVERLAY=858, 
		PACK=859, POSITION=860, POSSTR=861, POW=862, POWER=863, QUANTIZE=864, 
		QUARTER=865, RADIANS=866, RAISE_ERROR=867, RAND=868, RANDOM=869, REAL=870, 
		REGEXP_COUNT=871, REGEXP_INSTR=872, REGEXP_LIKE=873, REGEXP_REPLACE=874, 
		REGEXP_SUBSTR=875, REPLACE=876, RID=877, ROUND=878, ROUND_TIMESTAMP=879, 
		ROWID=880, RPAD=881, RTRIM=882, SCORE=883, SIGN=884, SIN=885, SINH=886, 
		SMALLINT=887, SOAPHTTPC=888, SOAPHTTPNC=889, SOAPHTTPNV=890, SOAPHTTPV=891, 
		SOUNDEX=892, SPACE=893, SQRT=894, STRIP=895, STRLEFT=896, STRPOS=897, 
		STRRIGHT=898, SUBSTR=899, SUBSTRING=900, TAN=901, TANH=902, TIME=903, 
		TIMESTAMP=904, TIMESTAMPADD=905, TIMESTAMPDIFF=906, TIMESTAMP_FORMAT=907, 
		TIMESTAMP_ISO=908, TIMESTAMP_TZ=909, TO_CHAR=910, TO_CLOB=911, TO_DATE=912, 
		TO_NUMBER=913, TOTALORDER=914, TO_TIMESTAMP=915, TRANSLATE=916, TRIM=917, 
		TRIM_ARRAY=918, TRUNC=919, TRUNC_TIMESTAMP=920, UCASE=921, UNICODE=922, 
		UNICODE_STR=923, UNISTR=924, UPPER=925, VARBINARY=926, VARCHAR=927, VARCHAR9=928, 
		VARCHAR_BIT_FORMAT=929, VARCHAR_FORMAT=930, VARGRAPHIC=931, VERIFY_GROUP_FOR_USER=932, 
		VERIFY_ROLE_FOR_USER=933, VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER=934, WEEK=935, 
		WEEK_ISO=936, WRAP=937, XMLATTRIBUTES=938, XMLCOMMENT=939, XMLCONCAT=940, 
		XMLDOCUMENT=941, XMLELEMENT=942, XMLFOREST=943, XMLMODIFY=944, XMLPARSE=945, 
		XMLPI=946, XMLQUERY=947, XMLSERIALIZE=948, XMLTEXT=949, XMLXSROBJECTID=950, 
		XSLTRANSFORM=951, CURRENT_ACCELERATOR=952, CURRENT_APPLICATION_COMPATIBILITY=953, 
		CURRENT_APPLICATION_ENCODING_SCHEME=954, CURRENT_CLIENT_ACCTNG=955, CURRENT_CLIENT_APPLNAME=956, 
		CURRENT_CLIENT_CORR_TOKEN=957, CURRENT_CLIENT_USERID=958, CURRENT_CLIENT_WRKSTNNAME=959, 
		CURRENT_DATE=960, CURRENT_DEBUG_MODE=961, CURRENT_DECFLOAT_ROUNDING_MODE=962, 
		CURRENT_DEGREE=963, CURRENT_EXPLAIN_MODE=964, CURRENT_GET_ACCEL_ARCHIVE=965, 
		CURRENT_LOCALE_LC_CTYPE=966, CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION=967, 
		CURRENT_MEMBER=968, CURRENT_OPTIMIZATION_HINT=969, CURRENT_PACKAGE_PATH=970, 
		CURRENT_PACKAGESET=971, CURRENT_PATH=972, CURRENT_PRECISION=973, CURRENT_QUERY_ACCELERATION=974, 
		CURRENT_QUERY_ACCELERATION_WAITFORDATA=975, CURRENT_REFRESH_AGE=976, CURRENT_ROUTINE_VERSION=977, 
		CURRENT_RULES=978, CURRENT_SCHEMA=979, CURRENT_SERVER=980, CURRENT_SQLID=981, 
		CURRENT_TEMPORAL_BUSINESS_TIME=982, CURRENT_TEMPORAL_SYSTEM_TIME=983, 
		CURRENT_TIME=984, CURRENT_TIMESTAMP=985, CURRENT_TIME_ZONE=986, ENCRYPTION_PASSWORD=987, 
		SESSION_TIME_ZONE=988, SESSION_USER=989, USER=990, ADMIN_TASK_LIST=991, 
		ADMIN_TASK_OUTPUT=992, ADMIN_TASK_STATUS=993, BLOCKING_THREADS=994, MQREADALL=995, 
		MQREADALLCLOB=996, MQRECEIVEALL=997, MQRECEIVEALLCLOB=998, XMLTABLE=999, 
		SQL_STATEMENT_TERMINATOR=1000, SQLIDENTIFIER=1001, ADM_CMD_DSN_TERMINATOR=1002, 
		ADM_CMD_DSN_SQL_STATEMENT_TERMINATOR=1003, ADM_CMD_DSN_SEMICOLON=1004, 
		ADM_CMD_DSN_INTEGER=1005, ADM_CMD_DSN_WS=1006, ADM_CMD_DSN_LPAREN=1007, 
		ADM_CMD_DSN_RPAREN=1008, ADM_CMD_DSN_MINUS=1009, ADM_CMD_DSN_PLUS=1010, 
		ADM_CMD_DSN_SPLAT=1011, ADM_CMD_DSN_SLASH=1012, ADM_CMD_DSN_SIMPLEQUOTE=1013, 
		ADM_CMD_DSN_NULL=1014, ADM_CMD_DSN_CURRENT=1015, ADM_CMD_DSN_EMPTYARG=1016, 
		ADM_CMD_DSN_DOT=1017, ADM_CMD_DSN_COMMA=1018, SQUOTE=1019, SQUOTE2=1020, 
		ADM_CMD_DSN_ACCELERATOR=1021, ACCELERATIONWAITFORDATA=1022, ACQUIRE=1023, 
		ADM_CMD_DSN_ACTION=1024, DSN_ADMIN_COMMAND=1025, APCOMPARE=1026, APOST=1027, 
		APPLCOMPAT=1028, APRETAINDUP=1029, APREUSE=1030, APREUSESOURCE=1031, ARCHIVESENSITIVE=1032, 
		ASUSER=1033, ADM_CMD_DSN_BIND=1034, BUSTIMESENSITIVE=1035, CACHESIZE=1036, 
		CICS=1037, ADM_CMD_DSN_COLLID=1038, COLSUFFIX=1039, CONCENTRATESTMT=1040, 
		CONCURRENTACCESSRESOLUTION=1041, ADM_CMD_DSN_COPY=1042, COPYVER=1043, 
		CURRENTDATA=1044, CURRENTSERVER=1045, ADM_CMD_DSN_DATE=1046, DBCSSYMBOL=1047, 
		DBCSDELIM=1048, DBPROTOCOL=1049, DCLBIT=1050, DCLGEN=1051, ADM_CMD_DSN_DEC=1052, 
		DECDEL=1053, ADM_CMD_DSN_DEFER=1054, DEGREE=1055, DEPLOY=1056, DESCRIPTION=1057, 
		DESCSTAT=1058, ADM_CMD_DSN_DISABLE=1059, DISCONNECT=1060, DLIBATCH=1061, 
		ADM_CMD_DSN_DSN=1062, DSQSTMTID=1063, ADM_CMD_DSN_DYNAMIC=1064, DYNAMICRULES=1065, 
		ADM_CMD_DSN_ENABLE=1066, ADM_CMD_DSN_ENCODING=1067, EXPLAININPUTSCHEMA=1068, 
		ADM_CMD_DSN_EXPLAIN=1069, EXTENDEDINDICATOR=1070, FILTER=1071, FLAG=1072, 
		ADM_CMD_DSN_FREE=1073, ADM_CMD_DSN_GENERIC=1074, GETACCELARCHIVE=1075, 
		ADM_CMD_DSN_GROUP=1076, IMMEDWRITE=1077, IMSBMP=1078, IMSMPP=1079, INDVAR=1080, 
		INVALIDONLY=1081, ISOLATION=1082, KEEPDYNAMIC=1083, ADM_CMD_DSN_LABEL=1084, 
		ADM_CMD_DSN_LANGUAGE=1085, LIB=1086, LIBRARY=1087, LOOKUP=1088, ADM_CMD_DSN_MEMBER=1089, 
		ADM_CMD_DSN_NAME=1090, ADM_CMD_DSN_NAMES=1091, NODEFER=1092, NOPKLIST=1093, 
		OPTHINT=1094, ADM_CMD_DSN_OPTIONS=1095, ADM_CMD_DSN_OWNER=1096, ADM_CMD_DSN_PACKAGE=1097, 
		ADM_CMD_DSN_PATH=1098, PATHDEFAULT=1099, PKLIST=1100, ADM_CMD_DSN_PLAN=1101, 
		PLANMGMT=1102, PLANMGMTSCOPE=1103, PROGAUTH=1104, ADM_CMD_DSN_QUALIFIER=1105, 
		ADM_CMD_DSN_QUERY=1106, QUERYACCELERATION=1107, QUERYID=1108, QUOTE=1109, 
		REBIND=1110, ADM_CMD_DSN_RELEASE=1111, REOPT=1112, REPLVER=1113, RETRY=1114, 
		ROUNDING=1115, ADM_CMD_DSN_RUN=1116, SDQSTMTID=1117, SERVICE=1118, SQLDDNAME=1119, 
		SQLENCODING=1120, ADM_CMD_DSN_SQLERROR=1121, SQLRULES=1122, ADM_CMD_DSN_STABILIZED=1123, 
		STBLGRP=1124, STRDEL=1125, ADM_CMD_DSN_STRUCTURE=1126, SWITCH=1127, ADM_CMD_DSN_SYSTEM=1128, 
		SYSTIMESENSITIVE=1129, ADM_CMD_DSN_TABLE=1130, TEST=1131, ADM_CMD_DSN_TIME=1132, 
		ADM_CMD_DSN_TRIGGER=1133, VALIDATE=1134, ADM_CMD_DSN_VERSION=1135, INTENTIONALLY_IGNORED_DB2=1136, 
		INTENTIONALLY_IGNORED_DSNH=1137, INTENTIONALLY_IGNORED=1138, ARG_SQUOTE=1139, 
		ARG=1140, ADM_CMD_DSN_COMMENT=1141, QS_SQUOTE=1142, QS_NEWLINE=1143, QS_WS=1144, 
		QUOTED_STRING_FRAGMENT=1145, IGNORED_NEWLINE=1146, IGNORED_LPAREN=1147, 
		IGNORED_CONTINUATION=1148, IGNORED_CHAR=1149, IGNORED_ARG_LPAREN=1150, 
		IGNORED_ARG_RPAREN=1151, IGNORED_ARG_NEWLINE=1152, IGNORED_ARG=1153, IGNORED_CONTINUATION_CHAR=1154, 
		IGNORED_CONTINUATION_NEWLINE=1155, ADM_CMD_DB2_TERMINATOR=1156, ADM_CMD_DB2_SQL_STATEMENT_TERMINATOR=1157, 
		ADM_CMD_DB2_SEMICOLON=1158, ADM_CMD_DB2_DOT=1159, ADM_CMD_DB2_COMMA=1160, 
		ADM_CMD_DB2_DISPLAY=1161, TERMINATE=1162, CANCEL=1163, DB2MEMBER=1164, 
		ADM_CMD_DB2_INTEGER=1165, ADM_CMD_DB2_WS=1166, ADM_CMD_DB2_LPAREN=1167, 
		ADM_CMD_DB2_RPAREN=1168, ADM_CMD_DB2_SPLAT=1169, ADM_CMD_DB2_SIMPLEQUOTE=1170, 
		ADM_CMD_DB2_RESTART=1171, ADM_CMD_DB2_NULL=1172, ADM_CMD_DB2_CURRENT=1173, 
		ADM_CMD_DB2_EMPTYARG=1174, BP=1175, ADM_CMD_DB2_DB=1176, TS=1177, IX=1178, 
		THD=1179, UT=1180, GRP=1181, DDF=1182, SYC=1183, UTIL_TERMINATOR=1184, 
		UTIL_SQL_STATEMENT_TERMINATOR=1185, UTIL_SEMICOLON=1186, UTIL_COMMA=1187, 
		UTIL_DOT=1188, UTIL_RETURNCODE=1189, UTIL_INTEGER=1190, UTIL_WS=1191, 
		UTIL_LPAREN=1192, UTIL_RPAREN=1193, UTIL_MINUS=1194, UTIL_PLUS=1195, UTIL_SPLAT=1196, 
		UTIL_SLASH=1197, UTIL_SIMPLEQUOTE=1198, UTIL_RESTART=1199, UTILITYID=1200, 
		UTIL_NULL=1201, UTIL_CURRENT=1202, PHASE=1203, PREVIEW=1204, LISTDEF=1205, 
		TEMPLATE=1206, UTIL_DB=1207, MODRCV_DELETE=1208, DSNUM=1209, MODIFY=1210, 
		QUIESCE=1211, RECOVERY=1212, SN=1213, PA=1214, UTIL_DB2=1215, IC=1216, 
		UQ=1217, DATASETNAME=1218, REBUILD=1219, RUNSTATS=1220, INVALIDATECACHE=1221, 
		REPORT=1222, ACCESSPATH=1223, STATS_UPDATE=1224, OBJECTNAME=1225, TMPL_STORCLAS=1226, 
		CYL=1227, TRK=1228, MB=1229, TEMPLATE_SPACE=1230, UTIL_SPACE=1231, DISP=1232, 
		DELETE_DISP=1233, UTIL_NEW=1234, UTIL_OLD=1235, SHR=1236, UTIL_MOD=1237, 
		UTIL_KEEP=1238, CATLG=1239, UNCATLG=1240, UTIL_INCLUDE=1241, UTIL_TABLESPACE=1242, 
		ALL_ITEMS=1243, UTIL_INDEX=1244, INDEXSPACE=1245, KEYCARD=1246, LOAD_DATA=1247, 
		INCURSOR=1248, RESUME=1249, UTIL_REPLACE=1250, NOCOPYPEND=1251, NOCHECKPEND=1252, 
		ENFORCE=1253, CONSTRAINTS=1254, WORKDDN=1255, EXEC=1256, LOAD_INTO=1257, 
		UTIL_TABLE=1258, TABLENAME=1259, FREQVAL=1260, NUMCOLS=1261, STATS_COUNT=1262, 
		UTIL_REORG=1263, STATISTICS=1264, SHRLEVEL=1265, SHR_REFERENCE=1266, SHR_CHANGE=1267, 
		SORTKEYS=1268, UTIL_DSN=1269, UNIT=1270, VOLCNT=1271, RETPD=1272, STACK=1273, 
		LIST=1274, UTIL_LOG=1275, NOSYSREC=1276, COPYDDN=1277, UNLDDN=1278, UTIL_COPY=1279, 
		UTIL_PARALLEL=1280, SORTDEVT=1281, SORTNUM=1282;
	public static final int
		RULE_startRule = 0, RULE_adminCmdDsn = 1, RULE_admCmdDsnTerminator = 2, 
		RULE_admCmdDsnReturnCode = 3, RULE_bind = 4, RULE_bindOptions = 5, RULE_accelerator = 6, 
		RULE_accelerationwaitfordata = 7, RULE_acquire = 8, RULE_action = 9, RULE_apcompare = 10, 
		RULE_applcompat = 11, RULE_apretaindup = 12, RULE_apreuse = 13, RULE_apreusesource = 14, 
		RULE_archivesensitive = 15, RULE_bustimesensitive = 16, RULE_cachesize = 17, 
		RULE_cics = 18, RULE_collid = 19, RULE_concentratestmt = 20, RULE_concurrentaccessresolution = 21, 
		RULE_copy = 22, RULE_copyver = 23, RULE_currentdata = 24, RULE_currentserver = 25, 
		RULE_dbprotocol = 26, RULE_date = 27, RULE_dec = 28, RULE_decdel = 29, 
		RULE_defer = 30, RULE_degree = 31, RULE_deploy = 32, RULE_description = 33, 
		RULE_descstat = 34, RULE_disable = 35, RULE_disconnect = 36, RULE_dlibatch = 37, 
		RULE_dynamicrules = 38, RULE_enable = 39, RULE_encoding = 40, RULE_explain = 41, 
		RULE_extendedindicator = 42, RULE_filter = 43, RULE_flag = 44, RULE_generic = 45, 
		RULE_getaccelarchive = 46, RULE_immedwrite = 47, RULE_imsbmp = 48, RULE_imsmpp = 49, 
		RULE_isolation = 50, RULE_keepdynamic = 51, RULE_library = 52, RULE_member = 53, 
		RULE_name = 54, RULE_nodefer = 55, RULE_nopklist = 56, RULE_opthint = 57, 
		RULE_copyoptions = 58, RULE_owner = 59, RULE_dsnpackage = 60, RULE_path = 61, 
		RULE_pathdefault = 62, RULE_pklist = 63, RULE_plan = 64, RULE_planmgmt = 65, 
		RULE_progauth = 66, RULE_qualifier = 67, RULE_queryacceleration = 68, 
		RULE_queryid = 69, RULE_release = 70, RULE_reopt = 71, RULE_replver = 72, 
		RULE_rounding = 73, RULE_service = 74, RULE_sqlddname = 75, RULE_sqlencoding = 76, 
		RULE_sqlerror = 77, RULE_sqlrules = 78, RULE_strdel = 79, RULE_dsnswitch = 80, 
		RULE_systimesensitive = 81, RULE_time = 82, RULE_validate = 83, RULE_version = 84, 
		RULE_bindQuery = 85, RULE_bindQueryOptions = 86, RULE_lookup = 87, RULE_explaininputschema = 88, 
		RULE_dsn = 89, RULE_dsnOptions = 90, RULE_system = 91, RULE_retry = 92, 
		RULE_test = 93, RULE_group = 94, RULE_asuser = 95, RULE_free = 96, RULE_freeOptions = 97, 
		RULE_stabilized_dynamic_query = 98, RULE_dsnQuery = 99, RULE_planmgmtscope = 100, 
		RULE_invalidonly = 101, RULE_stblgrp = 102, RULE_sdqstmtid = 103, RULE_rebind = 104, 
		RULE_rebindTrigger = 105, RULE_arg = 106, RULE_libargs = 107, RULE_libmember = 108, 
		RULE_continuation = 109, RULE_adminCmdDb2 = 110, RULE_admCmdDb2Terminator = 111, 
		RULE_admCmdDb2CommandLength = 112, RULE_processingType = 113, RULE_processingTypes = 114, 
		RULE_db2Member = 115, RULE_commandsExecuted = 116, RULE_ifiReturnCode = 117, 
		RULE_ifiReasonCode = 118, RULE_excessBytes = 119, RULE_groupIfiReasonCode = 120, 
		RULE_groupExcessBytes = 121, RULE_returnMsg = 122, RULE_admCmdDb2ReturnCode = 123, 
		RULE_db2Commands = 124, RULE_display = 125, RULE_terminate = 126, RULE_dsnutilCall = 127, 
		RULE_utilTerminator = 128, RULE_utilityId = 129, RULE_restart = 130, RULE_utStmts = 131, 
		RULE_utilities = 132, RULE_reorg = 133, RULE_imageCopy = 134, RULE_modifyRecovery = 135, 
		RULE_load = 136, RULE_exec = 137, RULE_runStats = 138, RULE_rebuildIndex = 139, 
		RULE_quiesce = 140, RULE_statistics = 141, RULE_statTableSpec = 142, RULE_statIndexSpec = 143, 
		RULE_corrStatSpec = 144, RULE_listdef = 145, RULE_includeTablespace = 146, 
		RULE_includeIndexspace = 147, RULE_includeIndex = 148, RULE_template = 149, 
		RULE_returnCode = 150;
	private static String[] makeRuleNames() {
		return new String[] {
			"startRule", "adminCmdDsn", "admCmdDsnTerminator", "admCmdDsnReturnCode", 
			"bind", "bindOptions", "accelerator", "accelerationwaitfordata", "acquire", 
			"action", "apcompare", "applcompat", "apretaindup", "apreuse", "apreusesource", 
			"archivesensitive", "bustimesensitive", "cachesize", "cics", "collid", 
			"concentratestmt", "concurrentaccessresolution", "copy", "copyver", "currentdata", 
			"currentserver", "dbprotocol", "date", "dec", "decdel", "defer", "degree", 
			"deploy", "description", "descstat", "disable", "disconnect", "dlibatch", 
			"dynamicrules", "enable", "encoding", "explain", "extendedindicator", 
			"filter", "flag", "generic", "getaccelarchive", "immedwrite", "imsbmp", 
			"imsmpp", "isolation", "keepdynamic", "library", "member", "name", "nodefer", 
			"nopklist", "opthint", "copyoptions", "owner", "dsnpackage", "path", 
			"pathdefault", "pklist", "plan", "planmgmt", "progauth", "qualifier", 
			"queryacceleration", "queryid", "release", "reopt", "replver", "rounding", 
			"service", "sqlddname", "sqlencoding", "sqlerror", "sqlrules", "strdel", 
			"dsnswitch", "systimesensitive", "time", "validate", "version", "bindQuery", 
			"bindQueryOptions", "lookup", "explaininputschema", "dsn", "dsnOptions", 
			"system", "retry", "test", "group", "asuser", "free", "freeOptions", 
			"stabilized_dynamic_query", "dsnQuery", "planmgmtscope", "invalidonly", 
			"stblgrp", "sdqstmtid", "rebind", "rebindTrigger", "arg", "libargs", 
			"libmember", "continuation", "adminCmdDb2", "admCmdDb2Terminator", "admCmdDb2CommandLength", 
			"processingType", "processingTypes", "db2Member", "commandsExecuted", 
			"ifiReturnCode", "ifiReasonCode", "excessBytes", "groupIfiReasonCode", 
			"groupExcessBytes", "returnMsg", "admCmdDb2ReturnCode", "db2Commands", 
			"display", "terminate", "dsnutilCall", "utilTerminator", "utilityId", 
			"restart", "utStmts", "utilities", "reorg", "imageCopy", "modifyRecovery", 
			"load", "exec", "runStats", "rebuildIndex", "quiesce", "statistics", 
			"statTableSpec", "statIndexSpec", "corrStatSpec", "listdef", "includeTablespace", 
			"includeIndexspace", "includeIndex", "template", "returnCode"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, "'('", "')'", null, "'['", "']'", "'?'", "'='", 
			"'>'", "'<'", null, null, null, "'+'", "'-'", "'*'", "'/'", "'||'", "'.'", 
			"':'", "';'", "','"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ADMIN_COMMAND_DSN", "ADMIN_COMMAND_DB2", "DSNUTILU", "LPAREN", 
			"RPAREN", "SIMPLEQUOTE", "OPENSQBRACKET", "CLOSESQBRACKET", "QUESTIONMARK", 
			"EQ", "GT", "LT", "GE", "LE", "NE", "PLUS", "MINUS", "SPLAT", "SLASH", 
			"CONCATOP", "DOT", "COLON", "SEMICOLON", "COMMA", "NONNUMERICLITERAL", 
			"INTEGERLITERAL", "NUMERICLITERAL", "NEWLINE", "WS", "SET_STATEMENT_TERMINATOR", 
			"SQLCOMMENT", "SQLBLOCKCOMMENTBEGIN", "SQLBLOCKCOMMENTEND", "INSTEAD", 
			"NEW", "NEW_TABLE", "OLD_TABLE", "REFERENCING", "BASED", "UPON", "ADD", 
			"AFTER", "ALL", "ALLOCATE", "ALLOW", "ALTER", "ALTERAND", "ANY", "ARRAY", 
			"ARRAY_EXISTS", "AS", "ASENSITIVE", "ASSOCIATE", "ASUTIME", "AT", "AUDIT", 
			"AUX", "AUXILIARY", "BEFORE", "BEGIN", "BETWEEN", "BUFFERPOOL", "BUFFERPOOLS", 
			"BY", "CALL", "CAPTURE", "CASCADED", "CASE", "CAST", "CCSID", "CHAR", 
			"CHARACTER", "CHECK", "CLONE", "CLOSE", "CLUSTER", "COLLECTION", "COLLID", 
			"COLUMN", "COMMENT", "COMMIT", "CONCAT", "CONDITION", "CONNECT", "CONNECTION", 
			"CONSTRAINT", "CONTAINS", "CONTENT", "CONTINUE", "CREATE", "CUBE", "CURRENT", 
			"CURRVAL", "CURSOR", "DATA", "DATABASE", "DAY", "DAYS", "DBINFO", "DECLARE", 
			"DEFAULT", "DELETE", "DESCRIPTOR", "DETERMINISTIC", "DISABLE", "DISALLOW", 
			"DISTINCT", "DO", "DOCUMENT", "DOUBLE", "DROP", "DSSIZE", "DYNAMIC", 
			"EDITPROC", "ELSE", "ELSEIF", "ENCODING", "ENCRYPTION", "END", "END_EXEC", 
			"ENDING", "ERASE", "ESCAPE", "EXCEPT", "EXCEPTION", "EXEC_SQL", "EXECUTE", 
			"EXISTS", "EXIT", "EXPLAIN", "EXTERNAL", "FENCED", "FETCH", "FIELDPROC", 
			"FINAL", "FIRST", "FOR", "FREE", "FROM", "FULL", "FUNCTION", "GENERATED", 
			"GET", "GLOBAL", "GO", "GOTO", "GRANT", "GROUP", "HANDLER", "HAVING", 
			"HOLD", "HOUR", "HOURS", "IF", "IMMEDIATE", "IN", "INCLUSIVE", "INDEX", 
			"INDEXBP", "INHERIT", "INNER", "INOUT", "INSENSITIVE", "INSERT", "INTERSECT", 
			"INTO", "IS", "ISOBID", "ITERATE", "JAR", "JOIN", "KEEP", "KEY", "LABEL", 
			"LANGUAGE", "LAST", "LC_CTYPE", "LEAVE", "LEFT", "LIKE", "LIMIT", "LOCAL", 
			"LOCALE", "LOCATOR", "LOCATORS", "LOCK", "LOCKMAX", "LOCKSIZE", "LONG", 
			"LOOP", "MAINTAINED", "MATERIALIZED", "MICROSECOND", "MICROSECONDS", 
			"MINUTEMINUTES", "MODEL", "MODIFIES", "MONTH", "MONTHS", "NEXT", "NEXTVAL", 
			"NO", "NONE", "NOT", "NULL", "NULLS", "NUMPARTS", "OBID", "OF", "OFFSET", 
			"OLD", "ON", "OPEN", "OPTIMIZATION", "OPTIMIZE", "OR", "ORDER", "ORGANIZATION", 
			"OUT", "OUTER", "PACKAGE", "PADDED", "PARAMETER", "PART", "PARTITION", 
			"PARTITIONED", "PARTITIONING", "PATH", "PERIOD", "PIECESIZE", "PLAN", 
			"PRECISION", "PREPARE", "PREVVAL", "PRIOR", "PRIQTY", "PRIVILEGES", "PROCEDURE", 
			"PROGRAM", "PSID", "PUBLIC", "QUERY", "QUERYNO", "READS", "REFERENCES", 
			"REFRESH", "RELEASE", "RENAME", "REPEAT", "RESIGNAL", "RESTRICT", "RESULT", 
			"RESULT_SET_LOCATOR", "RETURN", "RETURNS", "REUSE", "REVOKE", "RIGHT", 
			"ROLE", "ROLLBACK", "ROLLUP", "ROUND_CEILING", "ROUND_DOWN", "ROUND_FLOOR", 
			"ROUND_HALF_DOWN", "ROUND_HALF_EVEN", "ROUND_HALF_UP", "ROUND_UP", "ROW", 
			"ROWSET", "RUN", "SAVEPOINT", "SCHEMA", "SCRATCHPAD", "SECOND", "SECONDS", 
			"SECQTY", "SECURITY", "SELECT", "SENSITIVE", "SEQUENCE", "SET", "SIGNAL", 
			"SIMPLE", "SOME", "SOURCE", "SPECIFIC", "STANDARD", "STATEMENT", "STATIC", 
			"STAY", "STOGROUP", "STORAGE", "STORES", "STYLE", "SUMMARY", "SYNONYM", 
			"SYSDATE", "SYSTEM", "SYSTIMESTAMP", "TABLE", "TABLESPACE", "THEN", "TO", 
			"TRIGGER", "TRIGGERS", "TRUNCATE", "TYPE", "UNDO", "UNION", "UNIQUE", 
			"UNTIL", "UPDATE", "USING", "VALIDPROC", "VALUE", "VALUES", "VARIABLE", 
			"VARIANT", "VCAT", "VERSIONING", "VIEW", "VOLATILE", "VOLUMES", "WHEN", 
			"WHENEVER", "WHERE", "WHILE", "WITH", "WLM", "XMLCAST", "XMLEXISTS", 
			"XMLNAMESPACES", "YEAR", "YEARS", "ZONE", "TIMEZONE", "AND", "ARRAY_AGG", 
			"ASC", "AVG", "BIT", "CHANGE", "CODEUNITS16", "CODEUNITS32", "CORR", 
			"CORRELATION", "COUNT", "COUNT_BIG", "COVAR", "COVARIANCE", "COVARIANCE_SAMP", 
			"COVAR_POP", "COVAR_SAMP", "CS", "CUME_DIST", "DENSE_RANK", "DESC", "EBCDIC", 
			"EXCLUSIVE", "FIRST_VALUE", "FOLLOWING", "GROUPING", "IGNORE", "INDICATOR", 
			"INPUT", "ISNULL", "LAG", "LARGE", "LAST_VALUE", "LEAD", "LISTAGG", "LOCKED", 
			"LOCKS", "MEDIAN", "MINUTES", "MIXED", "NOTNULL", "NTH_VALUE", "NTILE", 
			"NUMERIC", "OBJECT", "OCTETS", "ONLY", "OVER", "PASSING", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "PERCENT_RANK", "PRECEDING", "PREVIOUS", "RANGE", 
			"RANK", "RATIO_TO_REPORT", "READ", "REF", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
			"REGR_ICPT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", "REGR_SXY", 
			"REGR_SYY", "RESPECT", "ROW_NUMBER", "ROWS", "RR", "RS", "SBCS", "SELECTIVITY", 
			"SETS", "SHARE", "SKIP_", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", 
			"TOKEN", "UNBOUNDED", "UNPACK", "UR", "USE", "VAR", "VARIANCE", "VARIANCE_SAMP", 
			"VAR_POP", "VAR_SAMP", "VARYING", "WITHOUT", "XML", "XMLAGG", "COLUMNS", 
			"SQLID", "ORDINALITY", "SYSTEM_TIME", "BUSINESS_TIME", "MULTIPLIER", 
			"UNNEST", "CROSS", "CALLER", "CLIENT", "POSITIONING", "SCROLL", "ACTION", 
			"ASSEMBLE", "C_", "CALLED", "COBOL", "DB2", "DEFINER", "DISPATCH", "ENVIRONMENT", 
			"FAILURE", "FAILURES", "JAVA", "MAIN", "NAME", "OPTIONS", "PARALLEL", 
			"PLI", "REGISTERS", "RESIDENT", "SECURED", "SPECIAL", "SQL", "STOP", 
			"SUB", "YES", "APPLICATION", "CHANGED", "COMPATIBILITY", "COMPRESS", 
			"COPY", "FREEPAGE", "GBPCACHE", "INCLUDE", "MAXVALUE", "MINVALUE", "PCTFREE", 
			"REGENERATE", "MASK", "ENABLE", "PERMISSION", "ATOMIC", "SQLEXCEPTION", 
			"MERGE", "MATCHED", "SQLSTATE", "MESSAGE_TEXT", "OVERRIDING", "PORTION", 
			"DB", "DSN", "DB2SQL", "DEBUG", "GENERAL", "MODE_", "REXX", "CACHE", 
			"CYCLE", "INCREMENT", "RESTART", "DATACLAS", "MGMTCLAS", "REMOVE", "STORCLAS", 
			"ACCESS", "ACTIVATE", "ALWAYS", "APPEND", "ARCHIVE", "BUSINESS", "CASCADE", 
			"CHANGES", "CONTROL", "DEACTIVATE", "DEFERRED", "EACH", "ENFORCED", "EXTRA", 
			"FOREIGN", "HIDDEN_", "HISTORY", "ID", "IDENTITY", "IMPLICITLY", "INITIALLY", 
			"INLINE", "OPERATION", "ORGANIZE", "OVERLAPS", "PACKAGE_NAME", "PACKAGE_SCHEMA", 
			"PACKAGE_VERSION", "PRIMARY", "RESET", "ROTATE", "START", "SYSIBM", "TRANSACTION", 
			"XMLSCHEMA", "ELEMENT", "URL", "NAMESPACE", "LOCATION", "SYSXSR", "ALGORITHM", 
			"FIXEDLENGTH", "HUFFMAN", "LOB", "LOG", "LOGGED", "MAXPARTITIONS", "MAXROWS", 
			"MEMBER", "MOVE", "PAGE", "PAGENUM", "PENDING", "RELATIVE", "SEGSIZE", 
			"TRACKMOD", "ADDRESS", "ATTRIBUTES", "AUTHENTICATION", "AUTHID", "CONTEXT", 
			"JOBNAME", "OWNER", "PROFILE", "QUALIFIER", "SERVAUTH", "TRUSTED", "SECTION", 
			"ACTIVE", "VERSION", "ALIAS", "WORK", "WORKFILE", "SYSDEFLT", "NULTERM", 
			"STRUCTURE", "GENERIC", "TEMPORARY", "DEFER", "DEFINE", "EXCLUDE", "GENERATE", 
			"KEYS", "XMLPATTERN", "SIZE", "EVERY", "ABSOLUTE", "ACCELERATOR", "EXCLUDING", 
			"INCLUDING", "DEFAULTS", "MODIFIERS", "OPTION", "PRESERVE", "BOTH", "DESCRIBE", 
			"LABELS", "NAMES", "OUTPUT", "EXCHANGE", "STABILIZED", "STMTCACHE", "STMTID", 
			"STMTTOKEN", "STARTING", "CATALOG_NAME", "CONDITION_NUMBER", "CURSOR_NAME", 
			"DB2_AUTHENTICATION_TYPE", "DB2_AUTHORIZATION_ID", "DB2_CONNECTION_STATE", 
			"DB2_CONNECTION_STATUS", "DB2_ENCRYPTION_TYPE", "DB2_ERROR_CODE1", "DB2_ERROR_CODE2", 
			"DB2_ERROR_CODE3", "DB2_ERROR_CODE4", "DB2_GET_DIAGNOSTICS_DIAGNOSTICS", 
			"DB2_INTERNAL_ERROR_POINTER", "DB2_LAST_ROW", "DB2_LINE_NUMBER", "DB2_MESSAGE_ID", 
			"DB2_MODULE_DETECTING_ERROR", "DB2_NUMBER_PARAMETER_MARKERS", "DB2_NUMBER_RESULT_SETS", 
			"DB2_NUMBER_ROWS", "DB2_ORDINAL_TOKEN_", "DB2_ORDINAL_TOKEN_n", "DB2_PRODUCT_ID", 
			"DB2_REASON_CODE", "DB2_RETURNED_SQLCODE", "DB2_RETURN_STATUS", "DB2_ROW_NUMBER", 
			"DB2_SERVER_CLASS_NAME", "DB2_SQL_ATTR_CURSOR_HOLD", "DB2_SQL_ATTR_CURSOR_ROWSET", 
			"DB2_SQL_ATTR_CURSOR_SCROLLABLE", "DB2_SQL_ATTR_CURSOR_SENSITIVITY", 
			"DB2_SQL_ATTR_CURSOR_TYPE", "DB2_SQLERRD1", "DB2_SQLERRD2", "DB2_SQLERRD3", 
			"DB2_SQLERRD4", "DB2_SQLERRD5", "DB2_SQLERRD6", "DB2_SQLERRD_SET", "DB2_SQL_NESTING_LEVEL", 
			"DB2_TOKEN_COUNT", "DIAGNOSTICS", "MORE_", "NUMBER", "RETURNED_SQLSTATE", 
			"ROW_COUNT", "SERVER_NAME", "STACKED", "CREATETAB", "CREATETS", "DBADM", 
			"DBCTRL", "DBMAINT", "DISPLAYDB", "IMAGCOPY", "LOAD", "PACKADM", "RECOVERDB", 
			"REORG", "REPAIR", "STARTDB", "STATS", "STOPDB", "BIND", "ALTERIN", "CREATEIN", 
			"DROPIN", "USAGE", "ACCESSCTRL", "BINDADD", "BINDAGENT", "BSDS", "CREATEALIAS", 
			"CREATEDBA", "CREATEDBC", "CREATE_SECURE_OBJECT", "CREATESG", "CREATETMTAB", 
			"DATAACCESS", "DEBUGSESSION", "DISPLAY", "MONITOR1", "MONITOR2", "RECOVER", 
			"SQLADM", "STOPALL", "STOSPACE", "SYSADM", "SYSCTRL", "SYSOPR", "TRACE", 
			"UNLOAD", "WRITE", "DEPENDENT", "RETAIN", "CURSORS", "PASSWORD", "HINT", 
			"TRANSFER", "OWNERSHIP", "FOUND", "SQLERROR", "SQLWARNING", "WITHIN", 
			"EMPTY", "XMLBINARY", "BASE64", "XMLDECLARATION", "REFERENCE", "RETURNING", 
			"ABS", "ABSVAL", "ACOS", "ADD_DAYS", "ADD_MONTHS", "AI_ANALOGY", "AI_SEMANTIC_CLUSTER", 
			"AI_SIMILARITY", "ARRAY_DELETE", "ARRAY_FIRST", "ARRAY_LAST", "ARRAY_NEXT", 
			"ARRAY_PRIOR", "ARRAY_TRIM", "ASCII", "ASCII_CHR", "ASCIISTR", "ASCII_STR", 
			"ASIN", "ATAN", "ATAN2", "ATANH", "BIGINT", "BINARY", "BITAND", "BITANDNOT", 
			"BITNOT", "BITOR", "BITXOR", "BLOB", "BTRIM", "CARDINALITY", "CCSID_ENCODING", 
			"CEIL", "CEILING", "CHAR9", "CHARACTER_LENGTH", "CHAR_LENGTH", "CHR", 
			"CLOB", "COALESCE", "COLLATION_KEY", "COMPARE_DECFLOAT", "COS", "COSH", 
			"DATE", "DAYOFMONTH", "DAYOFWEEK", "DAYOFWEEK_ISO", "DAYOFYEAR", "DAYS_BETWEEN", 
			"DBCLOB", "DEC", "DECFLOAT", "DECFLOAT_FORMAT", "DECFLOAT_SORTKEY", "DECIMAL", 
			"DECODE", "DECRYPT_BINARY", "DECRYPT_BIT", "DECRYPT_CHAR", "DECRYPT_DATAKEY_BIGINT", 
			"DECRYPT_DATAKEY_BIT", "DECRYPT_DATAKEY_CLOB", "DECRYPT_DATAKEY_DBCLOB", 
			"DECRYPT_DATAKEY_DECIMAL", "DECRYPT_DATAKEY_INTEGER", "DECRYPT_DATAKEY_VARCHAR", 
			"DECRYPT_DATAKEY_VARGRAPHIC", "DECRYPT_DB", "DEGREES", "DIFFERENCE", 
			"DIGITS", "DOUBLE_PRECISION", "DSN_XMLVALIDATE", "EBCDIC_CHR", "EBCDIC_STR", 
			"ENCRYPT_DATAKEY", "ENCRYPT_TDES", "EXP", "EXTRACT", "FLOAT", "FLOOR", 
			"GENERATE_UNIQUE", "GENERATE_UNIQUE_BINARY", "GETHINT", "GETVARIABLE", 
			"GRAPHIC", "GREATEST", "HASH", "HASH_CRC32", "HASH_MD5", "HASH_SHA1", 
			"HASH_SHA256", "HEX", "IDENTITY_VAL_LOCAL", "IFNULL", "INSTR", "INT", 
			"INTEGER", "JULIAN_DAY", "LAST_DAY", "LCASE", "LEAST", "LENGTH", "LN", 
			"LOCATE", "LOCATE_IN_STRING", "LOG10", "LOWER", "LPAD", "LTRIM", "MAX", 
			"MAX_CARDINALITY", "MIDNIGHT_SECONDS", "MIN", "MINUTE", "MOD", "MONTHS_BETWEEN", 
			"MQREAD", "MQREADCLOB", "MQRECEIVE", "MQRECEIVECLOB", "MQSEND", "MULTIPLY_ALT", 
			"NEXT_DAY", "NEXT_MONTH", "NORMALIZE_DECFLOAT", "NORMALIZE_STRING", "NULLIF", 
			"NVL", "OVERLAY", "PACK", "POSITION", "POSSTR", "POW", "POWER", "QUANTIZE", 
			"QUARTER", "RADIANS", "RAISE_ERROR", "RAND", "RANDOM", "REAL", "REGEXP_COUNT", 
			"REGEXP_INSTR", "REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REPLACE", 
			"RID", "ROUND", "ROUND_TIMESTAMP", "ROWID", "RPAD", "RTRIM", "SCORE", 
			"SIGN", "SIN", "SINH", "SMALLINT", "SOAPHTTPC", "SOAPHTTPNC", "SOAPHTTPNV", 
			"SOAPHTTPV", "SOUNDEX", "SPACE", "SQRT", "STRIP", "STRLEFT", "STRPOS", 
			"STRRIGHT", "SUBSTR", "SUBSTRING", "TAN", "TANH", "TIME", "TIMESTAMP", 
			"TIMESTAMPADD", "TIMESTAMPDIFF", "TIMESTAMP_FORMAT", "TIMESTAMP_ISO", 
			"TIMESTAMP_TZ", "TO_CHAR", "TO_CLOB", "TO_DATE", "TO_NUMBER", "TOTALORDER", 
			"TO_TIMESTAMP", "TRANSLATE", "TRIM", "TRIM_ARRAY", "TRUNC", "TRUNC_TIMESTAMP", 
			"UCASE", "UNICODE", "UNICODE_STR", "UNISTR", "UPPER", "VARBINARY", "VARCHAR", 
			"VARCHAR9", "VARCHAR_BIT_FORMAT", "VARCHAR_FORMAT", "VARGRAPHIC", "VERIFY_GROUP_FOR_USER", 
			"VERIFY_ROLE_FOR_USER", "VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER", "WEEK", 
			"WEEK_ISO", "WRAP", "XMLATTRIBUTES", "XMLCOMMENT", "XMLCONCAT", "XMLDOCUMENT", 
			"XMLELEMENT", "XMLFOREST", "XMLMODIFY", "XMLPARSE", "XMLPI", "XMLQUERY", 
			"XMLSERIALIZE", "XMLTEXT", "XMLXSROBJECTID", "XSLTRANSFORM", "CURRENT_ACCELERATOR", 
			"CURRENT_APPLICATION_COMPATIBILITY", "CURRENT_APPLICATION_ENCODING_SCHEME", 
			"CURRENT_CLIENT_ACCTNG", "CURRENT_CLIENT_APPLNAME", "CURRENT_CLIENT_CORR_TOKEN", 
			"CURRENT_CLIENT_USERID", "CURRENT_CLIENT_WRKSTNNAME", "CURRENT_DATE", 
			"CURRENT_DEBUG_MODE", "CURRENT_DECFLOAT_ROUNDING_MODE", "CURRENT_DEGREE", 
			"CURRENT_EXPLAIN_MODE", "CURRENT_GET_ACCEL_ARCHIVE", "CURRENT_LOCALE_LC_CTYPE", 
			"CURRENT_MAINTAINED_TABLE_TYPES_FOR_OPTIMIZATION", "CURRENT_MEMBER", 
			"CURRENT_OPTIMIZATION_HINT", "CURRENT_PACKAGE_PATH", "CURRENT_PACKAGESET", 
			"CURRENT_PATH", "CURRENT_PRECISION", "CURRENT_QUERY_ACCELERATION", "CURRENT_QUERY_ACCELERATION_WAITFORDATA", 
			"CURRENT_REFRESH_AGE", "CURRENT_ROUTINE_VERSION", "CURRENT_RULES", "CURRENT_SCHEMA", 
			"CURRENT_SERVER", "CURRENT_SQLID", "CURRENT_TEMPORAL_BUSINESS_TIME", 
			"CURRENT_TEMPORAL_SYSTEM_TIME", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_TIME_ZONE", "ENCRYPTION_PASSWORD", "SESSION_TIME_ZONE", "SESSION_USER", 
			"USER", "ADMIN_TASK_LIST", "ADMIN_TASK_OUTPUT", "ADMIN_TASK_STATUS", 
			"BLOCKING_THREADS", "MQREADALL", "MQREADALLCLOB", "MQRECEIVEALL", "MQRECEIVEALLCLOB", 
			"XMLTABLE", "SQL_STATEMENT_TERMINATOR", "SQLIDENTIFIER", "ADM_CMD_DSN_TERMINATOR", 
			"ADM_CMD_DSN_SQL_STATEMENT_TERMINATOR", "ADM_CMD_DSN_SEMICOLON", "ADM_CMD_DSN_INTEGER", 
			"ADM_CMD_DSN_WS", "ADM_CMD_DSN_LPAREN", "ADM_CMD_DSN_RPAREN", "ADM_CMD_DSN_MINUS", 
			"ADM_CMD_DSN_PLUS", "ADM_CMD_DSN_SPLAT", "ADM_CMD_DSN_SLASH", "ADM_CMD_DSN_SIMPLEQUOTE", 
			"ADM_CMD_DSN_NULL", "ADM_CMD_DSN_CURRENT", "ADM_CMD_DSN_EMPTYARG", "ADM_CMD_DSN_DOT", 
			"ADM_CMD_DSN_COMMA", "SQUOTE", "SQUOTE2", "ADM_CMD_DSN_ACCELERATOR", 
			"ACCELERATIONWAITFORDATA", "ACQUIRE", "ADM_CMD_DSN_ACTION", "DSN_ADMIN_COMMAND", 
			"APCOMPARE", "APOST", "APPLCOMPAT", "APRETAINDUP", "APREUSE", "APREUSESOURCE", 
			"ARCHIVESENSITIVE", "ASUSER", "ADM_CMD_DSN_BIND", "BUSTIMESENSITIVE", 
			"CACHESIZE", "CICS", "ADM_CMD_DSN_COLLID", "COLSUFFIX", "CONCENTRATESTMT", 
			"CONCURRENTACCESSRESOLUTION", "ADM_CMD_DSN_COPY", "COPYVER", "CURRENTDATA", 
			"CURRENTSERVER", "ADM_CMD_DSN_DATE", "DBCSSYMBOL", "DBCSDELIM", "DBPROTOCOL", 
			"DCLBIT", "DCLGEN", "ADM_CMD_DSN_DEC", "DECDEL", "ADM_CMD_DSN_DEFER", 
			"DEGREE", "DEPLOY", "DESCRIPTION", "DESCSTAT", "ADM_CMD_DSN_DISABLE", 
			"DISCONNECT", "DLIBATCH", "ADM_CMD_DSN_DSN", "DSQSTMTID", "ADM_CMD_DSN_DYNAMIC", 
			"DYNAMICRULES", "ADM_CMD_DSN_ENABLE", "ADM_CMD_DSN_ENCODING", "EXPLAININPUTSCHEMA", 
			"ADM_CMD_DSN_EXPLAIN", "EXTENDEDINDICATOR", "FILTER", "FLAG", "ADM_CMD_DSN_FREE", 
			"ADM_CMD_DSN_GENERIC", "GETACCELARCHIVE", "ADM_CMD_DSN_GROUP", "IMMEDWRITE", 
			"IMSBMP", "IMSMPP", "INDVAR", "INVALIDONLY", "ISOLATION", "KEEPDYNAMIC", 
			"ADM_CMD_DSN_LABEL", "ADM_CMD_DSN_LANGUAGE", "LIB", "LIBRARY", "LOOKUP", 
			"ADM_CMD_DSN_MEMBER", "ADM_CMD_DSN_NAME", "ADM_CMD_DSN_NAMES", "NODEFER", 
			"NOPKLIST", "OPTHINT", "ADM_CMD_DSN_OPTIONS", "ADM_CMD_DSN_OWNER", "ADM_CMD_DSN_PACKAGE", 
			"ADM_CMD_DSN_PATH", "PATHDEFAULT", "PKLIST", "ADM_CMD_DSN_PLAN", "PLANMGMT", 
			"PLANMGMTSCOPE", "PROGAUTH", "ADM_CMD_DSN_QUALIFIER", "ADM_CMD_DSN_QUERY", 
			"QUERYACCELERATION", "QUERYID", "QUOTE", "REBIND", "ADM_CMD_DSN_RELEASE", 
			"REOPT", "REPLVER", "RETRY", "ROUNDING", "ADM_CMD_DSN_RUN", "SDQSTMTID", 
			"SERVICE", "SQLDDNAME", "SQLENCODING", "ADM_CMD_DSN_SQLERROR", "SQLRULES", 
			"ADM_CMD_DSN_STABILIZED", "STBLGRP", "STRDEL", "ADM_CMD_DSN_STRUCTURE", 
			"SWITCH", "ADM_CMD_DSN_SYSTEM", "SYSTIMESENSITIVE", "ADM_CMD_DSN_TABLE", 
			"TEST", "ADM_CMD_DSN_TIME", "ADM_CMD_DSN_TRIGGER", "VALIDATE", "ADM_CMD_DSN_VERSION", 
			"INTENTIONALLY_IGNORED_DB2", "INTENTIONALLY_IGNORED_DSNH", "INTENTIONALLY_IGNORED", 
			"ARG_SQUOTE", "ARG", "ADM_CMD_DSN_COMMENT", "QS_SQUOTE", "QS_NEWLINE", 
			"QS_WS", "QUOTED_STRING_FRAGMENT", "IGNORED_NEWLINE", "IGNORED_LPAREN", 
			"IGNORED_CONTINUATION", "IGNORED_CHAR", "IGNORED_ARG_LPAREN", "IGNORED_ARG_RPAREN", 
			"IGNORED_ARG_NEWLINE", "IGNORED_ARG", "IGNORED_CONTINUATION_CHAR", "IGNORED_CONTINUATION_NEWLINE", 
			"ADM_CMD_DB2_TERMINATOR", "ADM_CMD_DB2_SQL_STATEMENT_TERMINATOR", "ADM_CMD_DB2_SEMICOLON", 
			"ADM_CMD_DB2_DOT", "ADM_CMD_DB2_COMMA", "ADM_CMD_DB2_DISPLAY", "TERMINATE", 
			"CANCEL", "DB2MEMBER", "ADM_CMD_DB2_INTEGER", "ADM_CMD_DB2_WS", "ADM_CMD_DB2_LPAREN", 
			"ADM_CMD_DB2_RPAREN", "ADM_CMD_DB2_SPLAT", "ADM_CMD_DB2_SIMPLEQUOTE", 
			"ADM_CMD_DB2_RESTART", "ADM_CMD_DB2_NULL", "ADM_CMD_DB2_CURRENT", "ADM_CMD_DB2_EMPTYARG", 
			"BP", "ADM_CMD_DB2_DB", "TS", "IX", "THD", "UT", "GRP", "DDF", "SYC", 
			"UTIL_TERMINATOR", "UTIL_SQL_STATEMENT_TERMINATOR", "UTIL_SEMICOLON", 
			"UTIL_COMMA", "UTIL_DOT", "UTIL_RETURNCODE", "UTIL_INTEGER", "UTIL_WS", 
			"UTIL_LPAREN", "UTIL_RPAREN", "UTIL_MINUS", "UTIL_PLUS", "UTIL_SPLAT", 
			"UTIL_SLASH", "UTIL_SIMPLEQUOTE", "UTIL_RESTART", "UTILITYID", "UTIL_NULL", 
			"UTIL_CURRENT", "PHASE", "PREVIEW", "LISTDEF", "TEMPLATE", "UTIL_DB", 
			"MODRCV_DELETE", "DSNUM", "MODIFY", "QUIESCE", "RECOVERY", "SN", "PA", 
			"UTIL_DB2", "IC", "UQ", "DATASETNAME", "REBUILD", "RUNSTATS", "INVALIDATECACHE", 
			"REPORT", "ACCESSPATH", "STATS_UPDATE", "OBJECTNAME", "TMPL_STORCLAS", 
			"CYL", "TRK", "MB", "TEMPLATE_SPACE", "UTIL_SPACE", "DISP", "DELETE_DISP", 
			"UTIL_NEW", "UTIL_OLD", "SHR", "UTIL_MOD", "UTIL_KEEP", "CATLG", "UNCATLG", 
			"UTIL_INCLUDE", "UTIL_TABLESPACE", "ALL_ITEMS", "UTIL_INDEX", "INDEXSPACE", 
			"KEYCARD", "LOAD_DATA", "INCURSOR", "RESUME", "UTIL_REPLACE", "NOCOPYPEND", 
			"NOCHECKPEND", "ENFORCE", "CONSTRAINTS", "WORKDDN", "EXEC", "LOAD_INTO", 
			"UTIL_TABLE", "TABLENAME", "FREQVAL", "NUMCOLS", "STATS_COUNT", "UTIL_REORG", 
			"STATISTICS", "SHRLEVEL", "SHR_REFERENCE", "SHR_CHANGE", "SORTKEYS", 
			"UTIL_DSN", "UNIT", "VOLCNT", "RETPD", "STACK", "LIST", "UTIL_LOG", "NOSYSREC", 
			"COPYDDN", "UNLDDN", "UTIL_COPY", "UTIL_PARALLEL", "SORTDEVT", "SORTNUM"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DB2zPLSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DB2zPLSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class StartRuleContext extends ParserRuleContext {
		public List<AdminCmdDsnContext> adminCmdDsn() {
			return getRuleContexts(AdminCmdDsnContext.class);
		}
		public AdminCmdDsnContext adminCmdDsn(int i) {
			return getRuleContext(AdminCmdDsnContext.class,i);
		}
		public List<AdminCmdDb2Context> adminCmdDb2() {
			return getRuleContexts(AdminCmdDb2Context.class);
		}
		public AdminCmdDb2Context adminCmdDb2(int i) {
			return getRuleContext(AdminCmdDb2Context.class,i);
		}
		public List<DsnutilCallContext> dsnutilCall() {
			return getRuleContexts(DsnutilCallContext.class);
		}
		public DsnutilCallContext dsnutilCall(int i) {
			return getRuleContext(DsnutilCallContext.class,i);
		}
		public TerminalNode EOF() { return getToken(DB2zPLSQLParser.EOF, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterStartRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitStartRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitStartRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartRuleContext startRule() throws RecognitionException {
		StartRuleContext _localctx = new StartRuleContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_startRule);
		int _la;
		try {
			setState(311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADMIN_COMMAND_DSN) | (1L << ADMIN_COMMAND_DB2) | (1L << DSNUTILU))) != 0)) {
					{
					setState(305);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADMIN_COMMAND_DSN:
						{
						setState(302);
						adminCmdDsn();
						}
						break;
					case ADMIN_COMMAND_DB2:
						{
						setState(303);
						adminCmdDb2();
						}
						break;
					case DSNUTILU:
						{
						setState(304);
						dsnutilCall();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(310);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdminCmdDsnContext extends ParserRuleContext {
		public TerminalNode ADMIN_COMMAND_DSN() { return getToken(DB2zPLSQLParser.ADMIN_COMMAND_DSN, 0); }
		public TerminalNode ADM_CMD_DSN_LPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_LPAREN, 0); }
		public List<TerminalNode> ADM_CMD_DSN_SIMPLEQUOTE() { return getTokens(DB2zPLSQLParser.ADM_CMD_DSN_SIMPLEQUOTE); }
		public TerminalNode ADM_CMD_DSN_SIMPLEQUOTE(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DSN_SIMPLEQUOTE, i);
		}
		public TerminalNode ADM_CMD_DSN_COMMA() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_COMMA, 0); }
		public AdmCmdDsnReturnCodeContext admCmdDsnReturnCode() {
			return getRuleContext(AdmCmdDsnReturnCodeContext.class,0);
		}
		public TerminalNode ADM_CMD_DSN_RPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_RPAREN, 0); }
		public AdmCmdDsnTerminatorContext admCmdDsnTerminator() {
			return getRuleContext(AdmCmdDsnTerminatorContext.class,0);
		}
		public BindContext bind() {
			return getRuleContext(BindContext.class,0);
		}
		public RebindContext rebind() {
			return getRuleContext(RebindContext.class,0);
		}
		public RebindTriggerContext rebindTrigger() {
			return getRuleContext(RebindTriggerContext.class,0);
		}
		public BindQueryContext bindQuery() {
			return getRuleContext(BindQueryContext.class,0);
		}
		public FreeContext free() {
			return getRuleContext(FreeContext.class,0);
		}
		public TerminalNode NEWLINE() { return getToken(DB2zPLSQLParser.NEWLINE, 0); }
		public AdminCmdDsnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminCmdDsn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAdminCmdDsn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAdminCmdDsn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAdminCmdDsn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdminCmdDsnContext adminCmdDsn() throws RecognitionException {
		AdminCmdDsnContext _localctx = new AdminCmdDsnContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_adminCmdDsn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(313);
			match(ADMIN_COMMAND_DSN);
			setState(314);
			match(ADM_CMD_DSN_LPAREN);
			setState(315);
			match(ADM_CMD_DSN_SIMPLEQUOTE);
			setState(321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(316);
				bind();
				}
				break;
			case 2:
				{
				setState(317);
				rebind();
				}
				break;
			case 3:
				{
				setState(318);
				rebindTrigger();
				}
				break;
			case 4:
				{
				setState(319);
				bindQuery();
				}
				break;
			case 5:
				{
				setState(320);
				free();
				}
				break;
			}
			setState(323);
			match(ADM_CMD_DSN_SIMPLEQUOTE);
			setState(324);
			match(ADM_CMD_DSN_COMMA);
			setState(325);
			admCmdDsnReturnCode();
			setState(326);
			match(ADM_CMD_DSN_RPAREN);
			setState(327);
			admCmdDsnTerminator();
			setState(329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NEWLINE) {
				{
				setState(328);
				match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdmCmdDsnTerminatorContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_TERMINATOR() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_TERMINATOR, 0); }
		public AdmCmdDsnTerminatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_admCmdDsnTerminator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAdmCmdDsnTerminator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAdmCmdDsnTerminator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAdmCmdDsnTerminator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdmCmdDsnTerminatorContext admCmdDsnTerminator() throws RecognitionException {
		AdmCmdDsnTerminatorContext _localctx = new AdmCmdDsnTerminatorContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_admCmdDsnTerminator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(331);
			match(ADM_CMD_DSN_TERMINATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdmCmdDsnReturnCodeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_INTEGER, 0); }
		public TerminalNode ADM_CMD_DSN_EMPTYARG() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_EMPTYARG, 0); }
		public List<TerminalNode> ADM_CMD_DSN_SIMPLEQUOTE() { return getTokens(DB2zPLSQLParser.ADM_CMD_DSN_SIMPLEQUOTE); }
		public TerminalNode ADM_CMD_DSN_SIMPLEQUOTE(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DSN_SIMPLEQUOTE, i);
		}
		public AdmCmdDsnReturnCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_admCmdDsnReturnCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAdmCmdDsnReturnCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAdmCmdDsnReturnCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAdmCmdDsnReturnCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdmCmdDsnReturnCodeContext admCmdDsnReturnCode() throws RecognitionException {
		AdmCmdDsnReturnCodeContext _localctx = new AdmCmdDsnReturnCodeContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_admCmdDsnReturnCode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DSN_INTEGER:
			case ADM_CMD_DSN_SIMPLEQUOTE:
				{
				setState(334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_SIMPLEQUOTE) {
					{
					setState(333);
					match(ADM_CMD_DSN_SIMPLEQUOTE);
					}
				}

				setState(336);
				match(ADM_CMD_DSN_INTEGER);
				setState(338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_SIMPLEQUOTE) {
					{
					setState(337);
					match(ADM_CMD_DSN_SIMPLEQUOTE);
					}
				}

				}
				break;
			case ADM_CMD_DSN_EMPTYARG:
				{
				setState(340);
				match(ADM_CMD_DSN_EMPTYARG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BindContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_BIND() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_BIND, 0); }
		public List<BindOptionsContext> bindOptions() {
			return getRuleContexts(BindOptionsContext.class);
		}
		public BindOptionsContext bindOptions(int i) {
			return getRuleContext(BindOptionsContext.class,i);
		}
		public List<ContinuationContext> continuation() {
			return getRuleContexts(ContinuationContext.class);
		}
		public ContinuationContext continuation(int i) {
			return getRuleContext(ContinuationContext.class,i);
		}
		public BindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterBind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitBind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitBind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BindContext bind() throws RecognitionException {
		BindContext _localctx = new BindContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_bind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(343);
			match(ADM_CMD_DSN_BIND);
			setState(348); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(344);
				bindOptions();
				setState(346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
					{
					setState(345);
					continuation();
					}
				}

				}
				}
				setState(350); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1021)) & ~0x3f) == 0 && ((1L << (_la - 1021)) & ((1L << (ADM_CMD_DSN_ACCELERATOR - 1021)) | (1L << (ACCELERATIONWAITFORDATA - 1021)) | (1L << (ACQUIRE - 1021)) | (1L << (ADM_CMD_DSN_ACTION - 1021)) | (1L << (APCOMPARE - 1021)) | (1L << (APPLCOMPAT - 1021)) | (1L << (APRETAINDUP - 1021)) | (1L << (APREUSE - 1021)) | (1L << (APREUSESOURCE - 1021)) | (1L << (ARCHIVESENSITIVE - 1021)) | (1L << (BUSTIMESENSITIVE - 1021)) | (1L << (CACHESIZE - 1021)) | (1L << (CICS - 1021)) | (1L << (ADM_CMD_DSN_COLLID - 1021)) | (1L << (CONCENTRATESTMT - 1021)) | (1L << (CONCURRENTACCESSRESOLUTION - 1021)) | (1L << (ADM_CMD_DSN_COPY - 1021)) | (1L << (COPYVER - 1021)) | (1L << (CURRENTDATA - 1021)) | (1L << (CURRENTSERVER - 1021)) | (1L << (ADM_CMD_DSN_DATE - 1021)) | (1L << (DBPROTOCOL - 1021)) | (1L << (ADM_CMD_DSN_DEC - 1021)) | (1L << (DECDEL - 1021)) | (1L << (ADM_CMD_DSN_DEFER - 1021)) | (1L << (DEGREE - 1021)) | (1L << (DEPLOY - 1021)) | (1L << (DESCRIPTION - 1021)) | (1L << (DESCSTAT - 1021)) | (1L << (ADM_CMD_DSN_DISABLE - 1021)) | (1L << (DISCONNECT - 1021)) | (1L << (DLIBATCH - 1021)) | (1L << (DYNAMICRULES - 1021)) | (1L << (ADM_CMD_DSN_ENABLE - 1021)) | (1L << (ADM_CMD_DSN_ENCODING - 1021)) | (1L << (ADM_CMD_DSN_EXPLAIN - 1021)) | (1L << (EXTENDEDINDICATOR - 1021)) | (1L << (FILTER - 1021)) | (1L << (FLAG - 1021)) | (1L << (ADM_CMD_DSN_GENERIC - 1021)) | (1L << (GETACCELARCHIVE - 1021)) | (1L << (IMMEDWRITE - 1021)) | (1L << (IMSBMP - 1021)) | (1L << (IMSMPP - 1021)) | (1L << (ISOLATION - 1021)) | (1L << (KEEPDYNAMIC - 1021)))) != 0) || ((((_la - 1086)) & ~0x3f) == 0 && ((1L << (_la - 1086)) & ((1L << (LIB - 1086)) | (1L << (LIBRARY - 1086)) | (1L << (ADM_CMD_DSN_MEMBER - 1086)) | (1L << (ADM_CMD_DSN_NAME - 1086)) | (1L << (NODEFER - 1086)) | (1L << (NOPKLIST - 1086)) | (1L << (OPTHINT - 1086)) | (1L << (ADM_CMD_DSN_OPTIONS - 1086)) | (1L << (ADM_CMD_DSN_OWNER - 1086)) | (1L << (ADM_CMD_DSN_PACKAGE - 1086)) | (1L << (ADM_CMD_DSN_PATH - 1086)) | (1L << (PATHDEFAULT - 1086)) | (1L << (PKLIST - 1086)) | (1L << (ADM_CMD_DSN_PLAN - 1086)) | (1L << (PLANMGMT - 1086)) | (1L << (PROGAUTH - 1086)) | (1L << (ADM_CMD_DSN_QUALIFIER - 1086)) | (1L << (QUERYACCELERATION - 1086)) | (1L << (QUERYID - 1086)) | (1L << (ADM_CMD_DSN_RELEASE - 1086)) | (1L << (REOPT - 1086)) | (1L << (REPLVER - 1086)) | (1L << (ROUNDING - 1086)) | (1L << (SERVICE - 1086)) | (1L << (SQLDDNAME - 1086)) | (1L << (SQLENCODING - 1086)) | (1L << (ADM_CMD_DSN_SQLERROR - 1086)) | (1L << (SQLRULES - 1086)) | (1L << (STRDEL - 1086)) | (1L << (SWITCH - 1086)) | (1L << (SYSTIMESENSITIVE - 1086)) | (1L << (ADM_CMD_DSN_TIME - 1086)) | (1L << (VALIDATE - 1086)) | (1L << (ADM_CMD_DSN_VERSION - 1086)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BindOptionsContext extends ParserRuleContext {
		public AcceleratorContext accelerator() {
			return getRuleContext(AcceleratorContext.class,0);
		}
		public AccelerationwaitfordataContext accelerationwaitfordata() {
			return getRuleContext(AccelerationwaitfordataContext.class,0);
		}
		public AcquireContext acquire() {
			return getRuleContext(AcquireContext.class,0);
		}
		public ActionContext action() {
			return getRuleContext(ActionContext.class,0);
		}
		public ApcompareContext apcompare() {
			return getRuleContext(ApcompareContext.class,0);
		}
		public ApplcompatContext applcompat() {
			return getRuleContext(ApplcompatContext.class,0);
		}
		public ApretaindupContext apretaindup() {
			return getRuleContext(ApretaindupContext.class,0);
		}
		public ApreuseContext apreuse() {
			return getRuleContext(ApreuseContext.class,0);
		}
		public ApreusesourceContext apreusesource() {
			return getRuleContext(ApreusesourceContext.class,0);
		}
		public ArchivesensitiveContext archivesensitive() {
			return getRuleContext(ArchivesensitiveContext.class,0);
		}
		public BustimesensitiveContext bustimesensitive() {
			return getRuleContext(BustimesensitiveContext.class,0);
		}
		public CachesizeContext cachesize() {
			return getRuleContext(CachesizeContext.class,0);
		}
		public CicsContext cics() {
			return getRuleContext(CicsContext.class,0);
		}
		public CollidContext collid() {
			return getRuleContext(CollidContext.class,0);
		}
		public ConcentratestmtContext concentratestmt() {
			return getRuleContext(ConcentratestmtContext.class,0);
		}
		public ConcurrentaccessresolutionContext concurrentaccessresolution() {
			return getRuleContext(ConcurrentaccessresolutionContext.class,0);
		}
		public CopyContext copy() {
			return getRuleContext(CopyContext.class,0);
		}
		public CopyverContext copyver() {
			return getRuleContext(CopyverContext.class,0);
		}
		public CurrentdataContext currentdata() {
			return getRuleContext(CurrentdataContext.class,0);
		}
		public CurrentserverContext currentserver() {
			return getRuleContext(CurrentserverContext.class,0);
		}
		public DbprotocolContext dbprotocol() {
			return getRuleContext(DbprotocolContext.class,0);
		}
		public DateContext date() {
			return getRuleContext(DateContext.class,0);
		}
		public DecContext dec() {
			return getRuleContext(DecContext.class,0);
		}
		public DecdelContext decdel() {
			return getRuleContext(DecdelContext.class,0);
		}
		public DeferContext defer() {
			return getRuleContext(DeferContext.class,0);
		}
		public DegreeContext degree() {
			return getRuleContext(DegreeContext.class,0);
		}
		public DeployContext deploy() {
			return getRuleContext(DeployContext.class,0);
		}
		public DescriptionContext description() {
			return getRuleContext(DescriptionContext.class,0);
		}
		public DescstatContext descstat() {
			return getRuleContext(DescstatContext.class,0);
		}
		public DisableContext disable() {
			return getRuleContext(DisableContext.class,0);
		}
		public DisconnectContext disconnect() {
			return getRuleContext(DisconnectContext.class,0);
		}
		public DlibatchContext dlibatch() {
			return getRuleContext(DlibatchContext.class,0);
		}
		public DynamicrulesContext dynamicrules() {
			return getRuleContext(DynamicrulesContext.class,0);
		}
		public EnableContext enable() {
			return getRuleContext(EnableContext.class,0);
		}
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public ExtendedindicatorContext extendedindicator() {
			return getRuleContext(ExtendedindicatorContext.class,0);
		}
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public FlagContext flag() {
			return getRuleContext(FlagContext.class,0);
		}
		public GenericContext generic() {
			return getRuleContext(GenericContext.class,0);
		}
		public GetaccelarchiveContext getaccelarchive() {
			return getRuleContext(GetaccelarchiveContext.class,0);
		}
		public ImmedwriteContext immedwrite() {
			return getRuleContext(ImmedwriteContext.class,0);
		}
		public ImsbmpContext imsbmp() {
			return getRuleContext(ImsbmpContext.class,0);
		}
		public ImsmppContext imsmpp() {
			return getRuleContext(ImsmppContext.class,0);
		}
		public IsolationContext isolation() {
			return getRuleContext(IsolationContext.class,0);
		}
		public KeepdynamicContext keepdynamic() {
			return getRuleContext(KeepdynamicContext.class,0);
		}
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public MemberContext member() {
			return getRuleContext(MemberContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public NodeferContext nodefer() {
			return getRuleContext(NodeferContext.class,0);
		}
		public NopklistContext nopklist() {
			return getRuleContext(NopklistContext.class,0);
		}
		public OpthintContext opthint() {
			return getRuleContext(OpthintContext.class,0);
		}
		public CopyoptionsContext copyoptions() {
			return getRuleContext(CopyoptionsContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public DsnpackageContext dsnpackage() {
			return getRuleContext(DsnpackageContext.class,0);
		}
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public PathdefaultContext pathdefault() {
			return getRuleContext(PathdefaultContext.class,0);
		}
		public PklistContext pklist() {
			return getRuleContext(PklistContext.class,0);
		}
		public PlanContext plan() {
			return getRuleContext(PlanContext.class,0);
		}
		public PlanmgmtContext planmgmt() {
			return getRuleContext(PlanmgmtContext.class,0);
		}
		public ProgauthContext progauth() {
			return getRuleContext(ProgauthContext.class,0);
		}
		public QualifierContext qualifier() {
			return getRuleContext(QualifierContext.class,0);
		}
		public QueryaccelerationContext queryacceleration() {
			return getRuleContext(QueryaccelerationContext.class,0);
		}
		public QueryidContext queryid() {
			return getRuleContext(QueryidContext.class,0);
		}
		public ReleaseContext release() {
			return getRuleContext(ReleaseContext.class,0);
		}
		public ReoptContext reopt() {
			return getRuleContext(ReoptContext.class,0);
		}
		public ReplverContext replver() {
			return getRuleContext(ReplverContext.class,0);
		}
		public RoundingContext rounding() {
			return getRuleContext(RoundingContext.class,0);
		}
		public ServiceContext service() {
			return getRuleContext(ServiceContext.class,0);
		}
		public SqlddnameContext sqlddname() {
			return getRuleContext(SqlddnameContext.class,0);
		}
		public SqlencodingContext sqlencoding() {
			return getRuleContext(SqlencodingContext.class,0);
		}
		public SqlerrorContext sqlerror() {
			return getRuleContext(SqlerrorContext.class,0);
		}
		public SqlrulesContext sqlrules() {
			return getRuleContext(SqlrulesContext.class,0);
		}
		public StrdelContext strdel() {
			return getRuleContext(StrdelContext.class,0);
		}
		public DsnswitchContext dsnswitch() {
			return getRuleContext(DsnswitchContext.class,0);
		}
		public SystimesensitiveContext systimesensitive() {
			return getRuleContext(SystimesensitiveContext.class,0);
		}
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public ValidateContext validate() {
			return getRuleContext(ValidateContext.class,0);
		}
		public VersionContext version() {
			return getRuleContext(VersionContext.class,0);
		}
		public BindOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterBindOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitBindOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitBindOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BindOptionsContext bindOptions() throws RecognitionException {
		BindOptionsContext _localctx = new BindOptionsContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_bindOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(431);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DSN_ACCELERATOR:
				{
				setState(352);
				accelerator();
				}
				break;
			case ACCELERATIONWAITFORDATA:
				{
				setState(353);
				accelerationwaitfordata();
				}
				break;
			case ACQUIRE:
				{
				setState(354);
				acquire();
				}
				break;
			case ADM_CMD_DSN_ACTION:
				{
				setState(355);
				action();
				}
				break;
			case APCOMPARE:
				{
				setState(356);
				apcompare();
				}
				break;
			case APPLCOMPAT:
				{
				setState(357);
				applcompat();
				}
				break;
			case APRETAINDUP:
				{
				setState(358);
				apretaindup();
				}
				break;
			case APREUSE:
				{
				setState(359);
				apreuse();
				}
				break;
			case APREUSESOURCE:
				{
				setState(360);
				apreusesource();
				}
				break;
			case ARCHIVESENSITIVE:
				{
				setState(361);
				archivesensitive();
				}
				break;
			case BUSTIMESENSITIVE:
				{
				setState(362);
				bustimesensitive();
				}
				break;
			case CACHESIZE:
				{
				setState(363);
				cachesize();
				}
				break;
			case CICS:
				{
				setState(364);
				cics();
				}
				break;
			case ADM_CMD_DSN_COLLID:
				{
				setState(365);
				collid();
				}
				break;
			case CONCENTRATESTMT:
				{
				setState(366);
				concentratestmt();
				}
				break;
			case CONCURRENTACCESSRESOLUTION:
				{
				setState(367);
				concurrentaccessresolution();
				}
				break;
			case ADM_CMD_DSN_COPY:
				{
				setState(368);
				copy();
				}
				break;
			case COPYVER:
				{
				setState(369);
				copyver();
				}
				break;
			case CURRENTDATA:
				{
				setState(370);
				currentdata();
				}
				break;
			case CURRENTSERVER:
				{
				setState(371);
				currentserver();
				}
				break;
			case DBPROTOCOL:
				{
				setState(372);
				dbprotocol();
				}
				break;
			case ADM_CMD_DSN_DATE:
				{
				setState(373);
				date();
				}
				break;
			case ADM_CMD_DSN_DEC:
				{
				setState(374);
				dec();
				}
				break;
			case DECDEL:
				{
				setState(375);
				decdel();
				}
				break;
			case ADM_CMD_DSN_DEFER:
				{
				setState(376);
				defer();
				}
				break;
			case DEGREE:
				{
				setState(377);
				degree();
				}
				break;
			case DEPLOY:
				{
				setState(378);
				deploy();
				}
				break;
			case DESCRIPTION:
				{
				setState(379);
				description();
				}
				break;
			case DESCSTAT:
				{
				setState(380);
				descstat();
				}
				break;
			case ADM_CMD_DSN_DISABLE:
				{
				setState(381);
				disable();
				}
				break;
			case DISCONNECT:
				{
				setState(382);
				disconnect();
				}
				break;
			case DLIBATCH:
				{
				setState(383);
				dlibatch();
				}
				break;
			case DYNAMICRULES:
				{
				setState(384);
				dynamicrules();
				}
				break;
			case ADM_CMD_DSN_ENABLE:
				{
				setState(385);
				enable();
				}
				break;
			case ADM_CMD_DSN_ENCODING:
				{
				setState(386);
				encoding();
				}
				break;
			case ADM_CMD_DSN_EXPLAIN:
				{
				setState(387);
				explain();
				}
				break;
			case EXTENDEDINDICATOR:
				{
				setState(388);
				extendedindicator();
				}
				break;
			case FILTER:
				{
				setState(389);
				filter();
				}
				break;
			case FLAG:
				{
				setState(390);
				flag();
				}
				break;
			case ADM_CMD_DSN_GENERIC:
				{
				setState(391);
				generic();
				}
				break;
			case GETACCELARCHIVE:
				{
				setState(392);
				getaccelarchive();
				}
				break;
			case IMMEDWRITE:
				{
				setState(393);
				immedwrite();
				}
				break;
			case IMSBMP:
				{
				setState(394);
				imsbmp();
				}
				break;
			case IMSMPP:
				{
				setState(395);
				imsmpp();
				}
				break;
			case ISOLATION:
				{
				setState(396);
				isolation();
				}
				break;
			case KEEPDYNAMIC:
				{
				setState(397);
				keepdynamic();
				}
				break;
			case LIB:
			case LIBRARY:
				{
				setState(398);
				library();
				}
				break;
			case ADM_CMD_DSN_MEMBER:
				{
				setState(399);
				member();
				}
				break;
			case ADM_CMD_DSN_NAME:
				{
				setState(400);
				name();
				}
				break;
			case NODEFER:
				{
				setState(401);
				nodefer();
				}
				break;
			case NOPKLIST:
				{
				setState(402);
				nopklist();
				}
				break;
			case OPTHINT:
				{
				setState(403);
				opthint();
				}
				break;
			case ADM_CMD_DSN_OPTIONS:
				{
				setState(404);
				copyoptions();
				}
				break;
			case ADM_CMD_DSN_OWNER:
				{
				setState(405);
				owner();
				}
				break;
			case ADM_CMD_DSN_PACKAGE:
				{
				setState(406);
				dsnpackage();
				}
				break;
			case ADM_CMD_DSN_PATH:
				{
				setState(407);
				path();
				}
				break;
			case PATHDEFAULT:
				{
				setState(408);
				pathdefault();
				}
				break;
			case PKLIST:
				{
				setState(409);
				pklist();
				}
				break;
			case ADM_CMD_DSN_PLAN:
				{
				setState(410);
				plan();
				}
				break;
			case PLANMGMT:
				{
				setState(411);
				planmgmt();
				}
				break;
			case PROGAUTH:
				{
				setState(412);
				progauth();
				}
				break;
			case ADM_CMD_DSN_QUALIFIER:
				{
				setState(413);
				qualifier();
				}
				break;
			case QUERYACCELERATION:
				{
				setState(414);
				queryacceleration();
				}
				break;
			case QUERYID:
				{
				setState(415);
				queryid();
				}
				break;
			case ADM_CMD_DSN_RELEASE:
				{
				setState(416);
				release();
				}
				break;
			case REOPT:
				{
				setState(417);
				reopt();
				}
				break;
			case REPLVER:
				{
				setState(418);
				replver();
				}
				break;
			case ROUNDING:
				{
				setState(419);
				rounding();
				}
				break;
			case SERVICE:
				{
				setState(420);
				service();
				}
				break;
			case SQLDDNAME:
				{
				setState(421);
				sqlddname();
				}
				break;
			case SQLENCODING:
				{
				setState(422);
				sqlencoding();
				}
				break;
			case ADM_CMD_DSN_SQLERROR:
				{
				setState(423);
				sqlerror();
				}
				break;
			case SQLRULES:
				{
				setState(424);
				sqlrules();
				}
				break;
			case STRDEL:
				{
				setState(425);
				strdel();
				}
				break;
			case SWITCH:
				{
				setState(426);
				dsnswitch();
				}
				break;
			case SYSTIMESENSITIVE:
				{
				setState(427);
				systimesensitive();
				}
				break;
			case ADM_CMD_DSN_TIME:
				{
				setState(428);
				time();
				}
				break;
			case VALIDATE:
				{
				setState(429);
				validate();
				}
				break;
			case ADM_CMD_DSN_VERSION:
				{
				setState(430);
				version();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AcceleratorContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_ACCELERATOR() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_ACCELERATOR, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public AcceleratorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accelerator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAccelerator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAccelerator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAccelerator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AcceleratorContext accelerator() throws RecognitionException {
		AcceleratorContext _localctx = new AcceleratorContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_accelerator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(433);
			match(ADM_CMD_DSN_ACCELERATOR);
			setState(434);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccelerationwaitfordataContext extends ParserRuleContext {
		public TerminalNode ACCELERATIONWAITFORDATA() { return getToken(DB2zPLSQLParser.ACCELERATIONWAITFORDATA, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public AccelerationwaitfordataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accelerationwaitfordata; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAccelerationwaitfordata(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAccelerationwaitfordata(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAccelerationwaitfordata(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccelerationwaitfordataContext accelerationwaitfordata() throws RecognitionException {
		AccelerationwaitfordataContext _localctx = new AccelerationwaitfordataContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_accelerationwaitfordata);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(436);
			match(ACCELERATIONWAITFORDATA);
			setState(437);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AcquireContext extends ParserRuleContext {
		public TerminalNode ACQUIRE() { return getToken(DB2zPLSQLParser.ACQUIRE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public AcquireContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_acquire; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAcquire(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAcquire(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAcquire(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AcquireContext acquire() throws RecognitionException {
		AcquireContext _localctx = new AcquireContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_acquire);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(439);
			match(ACQUIRE);
			setState(440);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_ACTION() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_ACTION, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_action);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(442);
			match(ADM_CMD_DSN_ACTION);
			setState(443);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApcompareContext extends ParserRuleContext {
		public TerminalNode APCOMPARE() { return getToken(DB2zPLSQLParser.APCOMPARE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ApcompareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apcompare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterApcompare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitApcompare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitApcompare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApcompareContext apcompare() throws RecognitionException {
		ApcompareContext _localctx = new ApcompareContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_apcompare);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(445);
			match(APCOMPARE);
			setState(446);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplcompatContext extends ParserRuleContext {
		public TerminalNode APPLCOMPAT() { return getToken(DB2zPLSQLParser.APPLCOMPAT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ApplcompatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_applcompat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterApplcompat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitApplcompat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitApplcompat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApplcompatContext applcompat() throws RecognitionException {
		ApplcompatContext _localctx = new ApplcompatContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_applcompat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(448);
			match(APPLCOMPAT);
			setState(449);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApretaindupContext extends ParserRuleContext {
		public TerminalNode APRETAINDUP() { return getToken(DB2zPLSQLParser.APRETAINDUP, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ApretaindupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apretaindup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterApretaindup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitApretaindup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitApretaindup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApretaindupContext apretaindup() throws RecognitionException {
		ApretaindupContext _localctx = new ApretaindupContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_apretaindup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(451);
			match(APRETAINDUP);
			setState(452);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApreuseContext extends ParserRuleContext {
		public TerminalNode APREUSE() { return getToken(DB2zPLSQLParser.APREUSE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ApreuseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apreuse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterApreuse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitApreuse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitApreuse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApreuseContext apreuse() throws RecognitionException {
		ApreuseContext _localctx = new ApreuseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_apreuse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(454);
			match(APREUSE);
			setState(455);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApreusesourceContext extends ParserRuleContext {
		public TerminalNode APREUSESOURCE() { return getToken(DB2zPLSQLParser.APREUSESOURCE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ApreusesourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apreusesource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterApreusesource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitApreusesource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitApreusesource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApreusesourceContext apreusesource() throws RecognitionException {
		ApreusesourceContext _localctx = new ApreusesourceContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_apreusesource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(457);
			match(APREUSESOURCE);
			setState(458);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArchivesensitiveContext extends ParserRuleContext {
		public TerminalNode ARCHIVESENSITIVE() { return getToken(DB2zPLSQLParser.ARCHIVESENSITIVE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ArchivesensitiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_archivesensitive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterArchivesensitive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitArchivesensitive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitArchivesensitive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArchivesensitiveContext archivesensitive() throws RecognitionException {
		ArchivesensitiveContext _localctx = new ArchivesensitiveContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_archivesensitive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(460);
			match(ARCHIVESENSITIVE);
			setState(461);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BustimesensitiveContext extends ParserRuleContext {
		public TerminalNode BUSTIMESENSITIVE() { return getToken(DB2zPLSQLParser.BUSTIMESENSITIVE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public BustimesensitiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bustimesensitive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterBustimesensitive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitBustimesensitive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitBustimesensitive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BustimesensitiveContext bustimesensitive() throws RecognitionException {
		BustimesensitiveContext _localctx = new BustimesensitiveContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_bustimesensitive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(463);
			match(BUSTIMESENSITIVE);
			setState(464);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CachesizeContext extends ParserRuleContext {
		public TerminalNode CACHESIZE() { return getToken(DB2zPLSQLParser.CACHESIZE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CachesizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cachesize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCachesize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCachesize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCachesize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CachesizeContext cachesize() throws RecognitionException {
		CachesizeContext _localctx = new CachesizeContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_cachesize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(466);
			match(CACHESIZE);
			setState(467);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CicsContext extends ParserRuleContext {
		public TerminalNode CICS() { return getToken(DB2zPLSQLParser.CICS, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CicsContext cics() throws RecognitionException {
		CicsContext _localctx = new CicsContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_cics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(469);
			match(CICS);
			setState(470);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollidContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_COLLID() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_COLLID, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CollidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCollid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCollid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCollid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollidContext collid() throws RecognitionException {
		CollidContext _localctx = new CollidContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_collid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(472);
			match(ADM_CMD_DSN_COLLID);
			setState(473);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcentratestmtContext extends ParserRuleContext {
		public TerminalNode CONCENTRATESTMT() { return getToken(DB2zPLSQLParser.CONCENTRATESTMT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ConcentratestmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concentratestmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterConcentratestmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitConcentratestmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitConcentratestmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcentratestmtContext concentratestmt() throws RecognitionException {
		ConcentratestmtContext _localctx = new ConcentratestmtContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_concentratestmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(475);
			match(CONCENTRATESTMT);
			setState(476);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcurrentaccessresolutionContext extends ParserRuleContext {
		public TerminalNode CONCURRENTACCESSRESOLUTION() { return getToken(DB2zPLSQLParser.CONCURRENTACCESSRESOLUTION, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ConcurrentaccessresolutionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concurrentaccessresolution; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterConcurrentaccessresolution(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitConcurrentaccessresolution(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitConcurrentaccessresolution(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcurrentaccessresolutionContext concurrentaccessresolution() throws RecognitionException {
		ConcurrentaccessresolutionContext _localctx = new ConcurrentaccessresolutionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_concurrentaccessresolution);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(478);
			match(CONCURRENTACCESSRESOLUTION);
			setState(479);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_COPY() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_COPY, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCopy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCopy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCopy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyContext copy() throws RecognitionException {
		CopyContext _localctx = new CopyContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_copy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(481);
			match(ADM_CMD_DSN_COPY);
			setState(482);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyverContext extends ParserRuleContext {
		public TerminalNode COPYVER() { return getToken(DB2zPLSQLParser.COPYVER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CopyverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyver; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCopyver(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCopyver(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCopyver(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyverContext copyver() throws RecognitionException {
		CopyverContext _localctx = new CopyverContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_copyver);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(484);
			match(COPYVER);
			setState(485);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentdataContext extends ParserRuleContext {
		public TerminalNode CURRENTDATA() { return getToken(DB2zPLSQLParser.CURRENTDATA, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CurrentdataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentdata; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCurrentdata(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCurrentdata(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCurrentdata(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentdataContext currentdata() throws RecognitionException {
		CurrentdataContext _localctx = new CurrentdataContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_currentdata);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(487);
			match(CURRENTDATA);
			setState(488);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentserverContext extends ParserRuleContext {
		public TerminalNode CURRENTSERVER() { return getToken(DB2zPLSQLParser.CURRENTSERVER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CurrentserverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentserver; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCurrentserver(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCurrentserver(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCurrentserver(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentserverContext currentserver() throws RecognitionException {
		CurrentserverContext _localctx = new CurrentserverContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_currentserver);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(490);
			match(CURRENTSERVER);
			setState(491);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DbprotocolContext extends ParserRuleContext {
		public TerminalNode DBPROTOCOL() { return getToken(DB2zPLSQLParser.DBPROTOCOL, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DbprotocolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbprotocol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDbprotocol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDbprotocol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDbprotocol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbprotocolContext dbprotocol() throws RecognitionException {
		DbprotocolContext _localctx = new DbprotocolContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_dbprotocol);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(493);
			match(DBPROTOCOL);
			setState(494);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_DATE() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_DATE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateContext date() throws RecognitionException {
		DateContext _localctx = new DateContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_date);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(496);
			match(ADM_CMD_DSN_DATE);
			setState(497);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_DEC() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_DEC, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecContext dec() throws RecognitionException {
		DecContext _localctx = new DecContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(499);
			match(ADM_CMD_DSN_DEC);
			setState(500);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecdelContext extends ParserRuleContext {
		public TerminalNode DECDEL() { return getToken(DB2zPLSQLParser.DECDEL, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DecdelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decdel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDecdel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDecdel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDecdel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecdelContext decdel() throws RecognitionException {
		DecdelContext _localctx = new DecdelContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_decdel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(502);
			match(DECDEL);
			setState(503);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeferContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_DEFER() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_DEFER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DeferContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDefer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDefer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDefer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeferContext defer() throws RecognitionException {
		DeferContext _localctx = new DeferContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_defer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(505);
			match(ADM_CMD_DSN_DEFER);
			setState(506);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DegreeContext extends ParserRuleContext {
		public TerminalNode DEGREE() { return getToken(DB2zPLSQLParser.DEGREE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DegreeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_degree; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDegree(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDegree(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDegree(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DegreeContext degree() throws RecognitionException {
		DegreeContext _localctx = new DegreeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_degree);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(508);
			match(DEGREE);
			setState(509);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeployContext extends ParserRuleContext {
		public TerminalNode DEPLOY() { return getToken(DB2zPLSQLParser.DEPLOY, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DeployContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deploy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDeploy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDeploy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDeploy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeployContext deploy() throws RecognitionException {
		DeployContext _localctx = new DeployContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_deploy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(511);
			match(DEPLOY);
			setState(512);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescriptionContext extends ParserRuleContext {
		public TerminalNode DESCRIPTION() { return getToken(DB2zPLSQLParser.DESCRIPTION, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DescriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_description; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDescription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDescription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDescription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescriptionContext description() throws RecognitionException {
		DescriptionContext _localctx = new DescriptionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_description);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(514);
			match(DESCRIPTION);
			setState(515);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescstatContext extends ParserRuleContext {
		public TerminalNode DESCSTAT() { return getToken(DB2zPLSQLParser.DESCSTAT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DescstatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_descstat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDescstat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDescstat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDescstat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescstatContext descstat() throws RecognitionException {
		DescstatContext _localctx = new DescstatContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_descstat);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(517);
			match(DESCSTAT);
			setState(518);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DisableContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_DISABLE() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_DISABLE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDisable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDisable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDisable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DisableContext disable() throws RecognitionException {
		DisableContext _localctx = new DisableContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_disable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(520);
			match(ADM_CMD_DSN_DISABLE);
			setState(521);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DisconnectContext extends ParserRuleContext {
		public TerminalNode DISCONNECT() { return getToken(DB2zPLSQLParser.DISCONNECT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DisconnectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDisconnect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDisconnect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDisconnect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DisconnectContext disconnect() throws RecognitionException {
		DisconnectContext _localctx = new DisconnectContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_disconnect);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(523);
			match(DISCONNECT);
			setState(524);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DlibatchContext extends ParserRuleContext {
		public TerminalNode DLIBATCH() { return getToken(DB2zPLSQLParser.DLIBATCH, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DlibatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dlibatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDlibatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDlibatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDlibatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DlibatchContext dlibatch() throws RecognitionException {
		DlibatchContext _localctx = new DlibatchContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_dlibatch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(526);
			match(DLIBATCH);
			setState(527);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DynamicrulesContext extends ParserRuleContext {
		public TerminalNode DYNAMICRULES() { return getToken(DB2zPLSQLParser.DYNAMICRULES, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DynamicrulesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamicrules; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDynamicrules(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDynamicrules(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDynamicrules(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DynamicrulesContext dynamicrules() throws RecognitionException {
		DynamicrulesContext _localctx = new DynamicrulesContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_dynamicrules);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(529);
			match(DYNAMICRULES);
			setState(530);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_ENABLE() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_ENABLE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public EnableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterEnable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitEnable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitEnable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableContext enable() throws RecognitionException {
		EnableContext _localctx = new EnableContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_enable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(532);
			match(ADM_CMD_DSN_ENABLE);
			setState(533);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncodingContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_ENCODING() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_ENCODING, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public EncodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterEncoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitEncoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitEncoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodingContext encoding() throws RecognitionException {
		EncodingContext _localctx = new EncodingContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_encoding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(535);
			match(ADM_CMD_DSN_ENCODING);
			setState(536);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_EXPLAIN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_EXPLAIN, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ExplainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainContext explain() throws RecognitionException {
		ExplainContext _localctx = new ExplainContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_explain);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(538);
			match(ADM_CMD_DSN_EXPLAIN);
			setState(539);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtendedindicatorContext extends ParserRuleContext {
		public TerminalNode EXTENDEDINDICATOR() { return getToken(DB2zPLSQLParser.EXTENDEDINDICATOR, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ExtendedindicatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extendedindicator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterExtendedindicator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitExtendedindicator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitExtendedindicator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtendedindicatorContext extendedindicator() throws RecognitionException {
		ExtendedindicatorContext _localctx = new ExtendedindicatorContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_extendedindicator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(541);
			match(EXTENDEDINDICATOR);
			setState(542);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(DB2zPLSQLParser.FILTER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterContext filter() throws RecognitionException {
		FilterContext _localctx = new FilterContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_filter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(544);
			match(FILTER);
			setState(545);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlagContext extends ParserRuleContext {
		public TerminalNode FLAG() { return getToken(DB2zPLSQLParser.FLAG, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public FlagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterFlag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitFlag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitFlag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlagContext flag() throws RecognitionException {
		FlagContext _localctx = new FlagContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_flag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(547);
			match(FLAG);
			setState(548);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_GENERIC() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_GENERIC, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public GenericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterGeneric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitGeneric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitGeneric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericContext generic() throws RecognitionException {
		GenericContext _localctx = new GenericContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_generic);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(550);
			match(ADM_CMD_DSN_GENERIC);
			setState(551);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetaccelarchiveContext extends ParserRuleContext {
		public TerminalNode GETACCELARCHIVE() { return getToken(DB2zPLSQLParser.GETACCELARCHIVE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public GetaccelarchiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getaccelarchive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterGetaccelarchive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitGetaccelarchive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitGetaccelarchive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GetaccelarchiveContext getaccelarchive() throws RecognitionException {
		GetaccelarchiveContext _localctx = new GetaccelarchiveContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_getaccelarchive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(553);
			match(GETACCELARCHIVE);
			setState(554);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImmedwriteContext extends ParserRuleContext {
		public TerminalNode IMMEDWRITE() { return getToken(DB2zPLSQLParser.IMMEDWRITE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ImmedwriteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_immedwrite; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterImmedwrite(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitImmedwrite(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitImmedwrite(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImmedwriteContext immedwrite() throws RecognitionException {
		ImmedwriteContext _localctx = new ImmedwriteContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_immedwrite);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(556);
			match(IMMEDWRITE);
			setState(557);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImsbmpContext extends ParserRuleContext {
		public TerminalNode IMSBMP() { return getToken(DB2zPLSQLParser.IMSBMP, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ImsbmpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_imsbmp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterImsbmp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitImsbmp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitImsbmp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImsbmpContext imsbmp() throws RecognitionException {
		ImsbmpContext _localctx = new ImsbmpContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_imsbmp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(559);
			match(IMSBMP);
			setState(560);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImsmppContext extends ParserRuleContext {
		public TerminalNode IMSMPP() { return getToken(DB2zPLSQLParser.IMSMPP, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ImsmppContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_imsmpp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterImsmpp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitImsmpp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitImsmpp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImsmppContext imsmpp() throws RecognitionException {
		ImsmppContext _localctx = new ImsmppContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_imsmpp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(562);
			match(IMSMPP);
			setState(563);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(DB2zPLSQLParser.ISOLATION, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public IsolationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterIsolation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitIsolation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitIsolation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationContext isolation() throws RecognitionException {
		IsolationContext _localctx = new IsolationContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_isolation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(565);
			match(ISOLATION);
			setState(566);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeepdynamicContext extends ParserRuleContext {
		public TerminalNode KEEPDYNAMIC() { return getToken(DB2zPLSQLParser.KEEPDYNAMIC, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public KeepdynamicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keepdynamic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterKeepdynamic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitKeepdynamic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitKeepdynamic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeepdynamicContext keepdynamic() throws RecognitionException {
		KeepdynamicContext _localctx = new KeepdynamicContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_keepdynamic);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(568);
			match(KEEPDYNAMIC);
			setState(569);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LibraryContext extends ParserRuleContext {
		public LibargsContext libargs() {
			return getRuleContext(LibargsContext.class,0);
		}
		public TerminalNode LIB() { return getToken(DB2zPLSQLParser.LIB, 0); }
		public TerminalNode LIBRARY() { return getToken(DB2zPLSQLParser.LIBRARY, 0); }
		public LibraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterLibrary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitLibrary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitLibrary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibraryContext library() throws RecognitionException {
		LibraryContext _localctx = new LibraryContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(571);
			_la = _input.LA(1);
			if ( !(_la==LIB || _la==LIBRARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(572);
			libargs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MemberContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_MEMBER() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_MEMBER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_member; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterMember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitMember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitMember(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MemberContext member() throws RecognitionException {
		MemberContext _localctx = new MemberContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_member);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(574);
			match(ADM_CMD_DSN_MEMBER);
			setState(575);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_NAME() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_NAME, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(577);
			match(ADM_CMD_DSN_NAME);
			setState(578);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NodeferContext extends ParserRuleContext {
		public TerminalNode NODEFER() { return getToken(DB2zPLSQLParser.NODEFER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public NodeferContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodefer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterNodefer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitNodefer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitNodefer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NodeferContext nodefer() throws RecognitionException {
		NodeferContext _localctx = new NodeferContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_nodefer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(580);
			match(NODEFER);
			setState(581);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NopklistContext extends ParserRuleContext {
		public TerminalNode NOPKLIST() { return getToken(DB2zPLSQLParser.NOPKLIST, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public NopklistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nopklist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterNopklist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitNopklist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitNopklist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NopklistContext nopklist() throws RecognitionException {
		NopklistContext _localctx = new NopklistContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_nopklist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(583);
			match(NOPKLIST);
			setState(584);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpthintContext extends ParserRuleContext {
		public TerminalNode OPTHINT() { return getToken(DB2zPLSQLParser.OPTHINT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public OpthintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opthint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterOpthint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitOpthint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitOpthint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpthintContext opthint() throws RecognitionException {
		OpthintContext _localctx = new OpthintContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_opthint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(586);
			match(OPTHINT);
			setState(587);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyoptionsContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_OPTIONS() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_OPTIONS, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public CopyoptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyoptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCopyoptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCopyoptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCopyoptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyoptionsContext copyoptions() throws RecognitionException {
		CopyoptionsContext _localctx = new CopyoptionsContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_copyoptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(589);
			match(ADM_CMD_DSN_OPTIONS);
			setState(590);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_OWNER() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_OWNER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(592);
			match(ADM_CMD_DSN_OWNER);
			setState(593);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DsnpackageContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_PACKAGE() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_PACKAGE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DsnpackageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dsnpackage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDsnpackage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDsnpackage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDsnpackage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DsnpackageContext dsnpackage() throws RecognitionException {
		DsnpackageContext _localctx = new DsnpackageContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_dsnpackage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(595);
			match(ADM_CMD_DSN_PACKAGE);
			setState(596);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PathContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_PATH() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_PATH, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public PathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PathContext path() throws RecognitionException {
		PathContext _localctx = new PathContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_path);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(598);
			match(ADM_CMD_DSN_PATH);
			setState(599);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PathdefaultContext extends ParserRuleContext {
		public TerminalNode PATHDEFAULT() { return getToken(DB2zPLSQLParser.PATHDEFAULT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public PathdefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathdefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterPathdefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitPathdefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitPathdefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PathdefaultContext pathdefault() throws RecognitionException {
		PathdefaultContext _localctx = new PathdefaultContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_pathdefault);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(601);
			match(PATHDEFAULT);
			setState(602);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PklistContext extends ParserRuleContext {
		public TerminalNode PKLIST() { return getToken(DB2zPLSQLParser.PKLIST, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public PklistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pklist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterPklist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitPklist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitPklist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PklistContext pklist() throws RecognitionException {
		PklistContext _localctx = new PklistContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_pklist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(604);
			match(PKLIST);
			setState(605);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlanContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_PLAN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_PLAN, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public PlanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plan; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterPlan(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitPlan(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitPlan(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlanContext plan() throws RecognitionException {
		PlanContext _localctx = new PlanContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_plan);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(607);
			match(ADM_CMD_DSN_PLAN);
			setState(608);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlanmgmtContext extends ParserRuleContext {
		public TerminalNode PLANMGMT() { return getToken(DB2zPLSQLParser.PLANMGMT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public PlanmgmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_planmgmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterPlanmgmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitPlanmgmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitPlanmgmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlanmgmtContext planmgmt() throws RecognitionException {
		PlanmgmtContext _localctx = new PlanmgmtContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_planmgmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(610);
			match(PLANMGMT);
			setState(611);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProgauthContext extends ParserRuleContext {
		public TerminalNode PROGAUTH() { return getToken(DB2zPLSQLParser.PROGAUTH, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ProgauthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_progauth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterProgauth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitProgauth(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitProgauth(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgauthContext progauth() throws RecognitionException {
		ProgauthContext _localctx = new ProgauthContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_progauth);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(613);
			match(PROGAUTH);
			setState(614);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifierContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_QUALIFIER() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_QUALIFIER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifierContext qualifier() throws RecognitionException {
		QualifierContext _localctx = new QualifierContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_qualifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(616);
			match(ADM_CMD_DSN_QUALIFIER);
			setState(617);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryaccelerationContext extends ParserRuleContext {
		public TerminalNode QUERYACCELERATION() { return getToken(DB2zPLSQLParser.QUERYACCELERATION, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public QueryaccelerationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryacceleration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterQueryacceleration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitQueryacceleration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitQueryacceleration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryaccelerationContext queryacceleration() throws RecognitionException {
		QueryaccelerationContext _localctx = new QueryaccelerationContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_queryacceleration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(619);
			match(QUERYACCELERATION);
			setState(620);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryidContext extends ParserRuleContext {
		public TerminalNode QUERYID() { return getToken(DB2zPLSQLParser.QUERYID, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public QueryidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterQueryid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitQueryid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitQueryid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryidContext queryid() throws RecognitionException {
		QueryidContext _localctx = new QueryidContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_queryid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(622);
			match(QUERYID);
			setState(623);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_RELEASE() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_RELEASE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ReleaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRelease(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRelease(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRelease(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseContext release() throws RecognitionException {
		ReleaseContext _localctx = new ReleaseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_release);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(625);
			match(ADM_CMD_DSN_RELEASE);
			setState(626);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReoptContext extends ParserRuleContext {
		public TerminalNode REOPT() { return getToken(DB2zPLSQLParser.REOPT, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ReoptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reopt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterReopt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitReopt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitReopt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReoptContext reopt() throws RecognitionException {
		ReoptContext _localctx = new ReoptContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_reopt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(628);
			match(REOPT);
			setState(629);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplverContext extends ParserRuleContext {
		public TerminalNode REPLVER() { return getToken(DB2zPLSQLParser.REPLVER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ReplverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replver; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterReplver(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitReplver(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitReplver(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplverContext replver() throws RecognitionException {
		ReplverContext _localctx = new ReplverContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_replver);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(631);
			match(REPLVER);
			setState(632);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoundingContext extends ParserRuleContext {
		public TerminalNode ROUNDING() { return getToken(DB2zPLSQLParser.ROUNDING, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public RoundingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rounding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRounding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRounding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRounding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoundingContext rounding() throws RecognitionException {
		RoundingContext _localctx = new RoundingContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_rounding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(634);
			match(ROUNDING);
			setState(635);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServiceContext extends ParserRuleContext {
		public TerminalNode SERVICE() { return getToken(DB2zPLSQLParser.SERVICE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ServiceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterService(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitService(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitService(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServiceContext service() throws RecognitionException {
		ServiceContext _localctx = new ServiceContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_service);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(637);
			match(SERVICE);
			setState(638);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlddnameContext extends ParserRuleContext {
		public TerminalNode SQLDDNAME() { return getToken(DB2zPLSQLParser.SQLDDNAME, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public SqlddnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlddname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterSqlddname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitSqlddname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitSqlddname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlddnameContext sqlddname() throws RecognitionException {
		SqlddnameContext _localctx = new SqlddnameContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_sqlddname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(640);
			match(SQLDDNAME);
			setState(641);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlencodingContext extends ParserRuleContext {
		public TerminalNode SQLENCODING() { return getToken(DB2zPLSQLParser.SQLENCODING, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public SqlencodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlencoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterSqlencoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitSqlencoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitSqlencoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlencodingContext sqlencoding() throws RecognitionException {
		SqlencodingContext _localctx = new SqlencodingContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_sqlencoding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(643);
			match(SQLENCODING);
			setState(644);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlerrorContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_SQLERROR() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_SQLERROR, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public SqlerrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlerror; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterSqlerror(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitSqlerror(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitSqlerror(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlerrorContext sqlerror() throws RecognitionException {
		SqlerrorContext _localctx = new SqlerrorContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_sqlerror);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(646);
			match(ADM_CMD_DSN_SQLERROR);
			setState(647);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlrulesContext extends ParserRuleContext {
		public TerminalNode SQLRULES() { return getToken(DB2zPLSQLParser.SQLRULES, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public SqlrulesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlrules; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterSqlrules(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitSqlrules(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitSqlrules(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlrulesContext sqlrules() throws RecognitionException {
		SqlrulesContext _localctx = new SqlrulesContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_sqlrules);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(649);
			match(SQLRULES);
			setState(650);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StrdelContext extends ParserRuleContext {
		public TerminalNode STRDEL() { return getToken(DB2zPLSQLParser.STRDEL, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public StrdelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strdel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterStrdel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitStrdel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitStrdel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StrdelContext strdel() throws RecognitionException {
		StrdelContext _localctx = new StrdelContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_strdel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(652);
			match(STRDEL);
			setState(653);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DsnswitchContext extends ParserRuleContext {
		public TerminalNode SWITCH() { return getToken(DB2zPLSQLParser.SWITCH, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public DsnswitchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dsnswitch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDsnswitch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDsnswitch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDsnswitch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DsnswitchContext dsnswitch() throws RecognitionException {
		DsnswitchContext _localctx = new DsnswitchContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dsnswitch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(655);
			match(SWITCH);
			setState(656);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SystimesensitiveContext extends ParserRuleContext {
		public TerminalNode SYSTIMESENSITIVE() { return getToken(DB2zPLSQLParser.SYSTIMESENSITIVE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public SystimesensitiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_systimesensitive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterSystimesensitive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitSystimesensitive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitSystimesensitive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SystimesensitiveContext systimesensitive() throws RecognitionException {
		SystimesensitiveContext _localctx = new SystimesensitiveContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_systimesensitive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(658);
			match(SYSTIMESENSITIVE);
			setState(659);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_TIME() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_TIME, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(661);
			match(ADM_CMD_DSN_TIME);
			setState(662);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValidateContext extends ParserRuleContext {
		public TerminalNode VALIDATE() { return getToken(DB2zPLSQLParser.VALIDATE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ValidateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitValidate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidateContext validate() throws RecognitionException {
		ValidateContext _localctx = new ValidateContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_validate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(664);
			match(VALIDATE);
			setState(665);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_VERSION() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_VERSION, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public VersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_version; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionContext version() throws RecognitionException {
		VersionContext _localctx = new VersionContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_version);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(667);
			match(ADM_CMD_DSN_VERSION);
			setState(668);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BindQueryContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_BIND() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_BIND, 0); }
		public TerminalNode ADM_CMD_DSN_QUERY() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_QUERY, 0); }
		public List<BindQueryOptionsContext> bindQueryOptions() {
			return getRuleContexts(BindQueryOptionsContext.class);
		}
		public BindQueryOptionsContext bindQueryOptions(int i) {
			return getRuleContext(BindQueryOptionsContext.class,i);
		}
		public List<ContinuationContext> continuation() {
			return getRuleContexts(ContinuationContext.class);
		}
		public ContinuationContext continuation(int i) {
			return getRuleContext(ContinuationContext.class,i);
		}
		public BindQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterBindQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitBindQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitBindQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BindQueryContext bindQuery() throws RecognitionException {
		BindQueryContext _localctx = new BindQueryContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_bindQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(670);
			match(ADM_CMD_DSN_BIND);
			setState(671);
			match(ADM_CMD_DSN_QUERY);
			setState(676); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(672);
				bindQueryOptions();
				setState(674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
					{
					setState(673);
					continuation();
					}
				}

				}
				}
				setState(678); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==EXPLAININPUTSCHEMA || _la==LOOKUP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BindQueryOptionsContext extends ParserRuleContext {
		public LookupContext lookup() {
			return getRuleContext(LookupContext.class,0);
		}
		public ExplaininputschemaContext explaininputschema() {
			return getRuleContext(ExplaininputschemaContext.class,0);
		}
		public BindQueryOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindQueryOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterBindQueryOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitBindQueryOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitBindQueryOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BindQueryOptionsContext bindQueryOptions() throws RecognitionException {
		BindQueryOptionsContext _localctx = new BindQueryOptionsContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_bindQueryOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(682);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOKUP:
				{
				setState(680);
				lookup();
				}
				break;
			case EXPLAININPUTSCHEMA:
				{
				setState(681);
				explaininputschema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LookupContext extends ParserRuleContext {
		public TerminalNode LOOKUP() { return getToken(DB2zPLSQLParser.LOOKUP, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public LookupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lookup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterLookup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitLookup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitLookup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LookupContext lookup() throws RecognitionException {
		LookupContext _localctx = new LookupContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_lookup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(684);
			match(LOOKUP);
			setState(685);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplaininputschemaContext extends ParserRuleContext {
		public TerminalNode EXPLAININPUTSCHEMA() { return getToken(DB2zPLSQLParser.EXPLAININPUTSCHEMA, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public ExplaininputschemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explaininputschema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterExplaininputschema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitExplaininputschema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitExplaininputschema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplaininputschemaContext explaininputschema() throws RecognitionException {
		ExplaininputschemaContext _localctx = new ExplaininputschemaContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_explaininputschema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(687);
			match(EXPLAININPUTSCHEMA);
			setState(688);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DsnContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_DSN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_DSN, 0); }
		public List<DsnOptionsContext> dsnOptions() {
			return getRuleContexts(DsnOptionsContext.class);
		}
		public DsnOptionsContext dsnOptions(int i) {
			return getRuleContext(DsnOptionsContext.class,i);
		}
		public List<ContinuationContext> continuation() {
			return getRuleContexts(ContinuationContext.class);
		}
		public ContinuationContext continuation(int i) {
			return getRuleContext(ContinuationContext.class,i);
		}
		public DsnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dsn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDsn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDsn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDsn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DsnContext dsn() throws RecognitionException {
		DsnContext _localctx = new DsnContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_dsn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(690);
			match(ADM_CMD_DSN_DSN);
			setState(695); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(691);
				dsnOptions();
				setState(693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
					{
					setState(692);
					continuation();
					}
				}

				}
				}
				setState(697); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ASUSER || _la==ADM_CMD_DSN_GROUP || ((((_la - 1114)) & ~0x3f) == 0 && ((1L << (_la - 1114)) & ((1L << (RETRY - 1114)) | (1L << (ADM_CMD_DSN_SYSTEM - 1114)) | (1L << (TEST - 1114)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DsnOptionsContext extends ParserRuleContext {
		public SystemContext system() {
			return getRuleContext(SystemContext.class,0);
		}
		public RetryContext retry() {
			return getRuleContext(RetryContext.class,0);
		}
		public TestContext test() {
			return getRuleContext(TestContext.class,0);
		}
		public GroupContext group() {
			return getRuleContext(GroupContext.class,0);
		}
		public AsuserContext asuser() {
			return getRuleContext(AsuserContext.class,0);
		}
		public DsnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dsnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDsnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDsnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDsnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DsnOptionsContext dsnOptions() throws RecognitionException {
		DsnOptionsContext _localctx = new DsnOptionsContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_dsnOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(704);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DSN_SYSTEM:
				{
				setState(699);
				system();
				}
				break;
			case RETRY:
				{
				setState(700);
				retry();
				}
				break;
			case TEST:
				{
				setState(701);
				test();
				}
				break;
			case ADM_CMD_DSN_GROUP:
				{
				setState(702);
				group();
				}
				break;
			case ASUSER:
				{
				setState(703);
				asuser();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SystemContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_SYSTEM() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_SYSTEM, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public SystemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterSystem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitSystem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitSystem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SystemContext system() throws RecognitionException {
		SystemContext _localctx = new SystemContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_system);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(706);
			match(ADM_CMD_DSN_SYSTEM);
			setState(707);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RetryContext extends ParserRuleContext {
		public TerminalNode RETRY() { return getToken(DB2zPLSQLParser.RETRY, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public RetryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_retry; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRetry(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRetry(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRetry(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RetryContext retry() throws RecognitionException {
		RetryContext _localctx = new RetryContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_retry);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(709);
			match(RETRY);
			setState(710);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TestContext extends ParserRuleContext {
		public TerminalNode TEST() { return getToken(DB2zPLSQLParser.TEST, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public TestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_test; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterTest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitTest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitTest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TestContext test() throws RecognitionException {
		TestContext _localctx = new TestContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_test);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(712);
			match(TEST);
			setState(713);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_GROUP() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_GROUP, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupContext group() throws RecognitionException {
		GroupContext _localctx = new GroupContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(715);
			match(ADM_CMD_DSN_GROUP);
			setState(716);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsuserContext extends ParserRuleContext {
		public TerminalNode ASUSER() { return getToken(DB2zPLSQLParser.ASUSER, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public AsuserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asuser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAsuser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAsuser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAsuser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsuserContext asuser() throws RecognitionException {
		AsuserContext _localctx = new AsuserContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_asuser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(718);
			match(ASUSER);
			setState(719);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_FREE() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_FREE, 0); }
		public List<FreeOptionsContext> freeOptions() {
			return getRuleContexts(FreeOptionsContext.class);
		}
		public FreeOptionsContext freeOptions(int i) {
			return getRuleContext(FreeOptionsContext.class,i);
		}
		public List<ContinuationContext> continuation() {
			return getRuleContexts(ContinuationContext.class);
		}
		public ContinuationContext continuation(int i) {
			return getRuleContext(ContinuationContext.class,i);
		}
		public FreeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_free; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterFree(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitFree(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitFree(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeContext free() throws RecognitionException {
		FreeContext _localctx = new FreeContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_free);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(721);
			match(ADM_CMD_DSN_FREE);
			setState(726); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(722);
				freeOptions();
				setState(724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
					{
					setState(723);
					continuation();
					}
				}

				}
				}
				setState(728); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1071)) & ~0x3f) == 0 && ((1L << (_la - 1071)) & ((1L << (FILTER - 1071)) | (1L << (FLAG - 1071)) | (1L << (INVALIDONLY - 1071)) | (1L << (ADM_CMD_DSN_PACKAGE - 1071)) | (1L << (ADM_CMD_DSN_PLAN - 1071)) | (1L << (PLANMGMTSCOPE - 1071)) | (1L << (ADM_CMD_DSN_QUERY - 1071)) | (1L << (QUERYID - 1071)) | (1L << (SDQSTMTID - 1071)) | (1L << (SERVICE - 1071)) | (1L << (ADM_CMD_DSN_STABILIZED - 1071)) | (1L << (STBLGRP - 1071)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FreeOptionsContext extends ParserRuleContext {
		public Stabilized_dynamic_queryContext stabilized_dynamic_query() {
			return getRuleContext(Stabilized_dynamic_queryContext.class,0);
		}
		public DsnpackageContext dsnpackage() {
			return getRuleContext(DsnpackageContext.class,0);
		}
		public PlanContext plan() {
			return getRuleContext(PlanContext.class,0);
		}
		public DsnQueryContext dsnQuery() {
			return getRuleContext(DsnQueryContext.class,0);
		}
		public ServiceContext service() {
			return getRuleContext(ServiceContext.class,0);
		}
		public FlagContext flag() {
			return getRuleContext(FlagContext.class,0);
		}
		public PlanmgmtscopeContext planmgmtscope() {
			return getRuleContext(PlanmgmtscopeContext.class,0);
		}
		public InvalidonlyContext invalidonly() {
			return getRuleContext(InvalidonlyContext.class,0);
		}
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public StblgrpContext stblgrp() {
			return getRuleContext(StblgrpContext.class,0);
		}
		public SdqstmtidContext sdqstmtid() {
			return getRuleContext(SdqstmtidContext.class,0);
		}
		public QueryidContext queryid() {
			return getRuleContext(QueryidContext.class,0);
		}
		public FreeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterFreeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitFreeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitFreeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FreeOptionsContext freeOptions() throws RecognitionException {
		FreeOptionsContext _localctx = new FreeOptionsContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_freeOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(742);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DSN_STABILIZED:
				{
				setState(730);
				stabilized_dynamic_query();
				}
				break;
			case ADM_CMD_DSN_PACKAGE:
				{
				setState(731);
				dsnpackage();
				}
				break;
			case ADM_CMD_DSN_PLAN:
				{
				setState(732);
				plan();
				}
				break;
			case ADM_CMD_DSN_QUERY:
				{
				setState(733);
				dsnQuery();
				}
				break;
			case SERVICE:
				{
				setState(734);
				service();
				}
				break;
			case FLAG:
				{
				setState(735);
				flag();
				}
				break;
			case PLANMGMTSCOPE:
				{
				setState(736);
				planmgmtscope();
				}
				break;
			case INVALIDONLY:
				{
				setState(737);
				invalidonly();
				}
				break;
			case FILTER:
				{
				setState(738);
				filter();
				}
				break;
			case STBLGRP:
				{
				setState(739);
				stblgrp();
				}
				break;
			case SDQSTMTID:
				{
				setState(740);
				sdqstmtid();
				}
				break;
			case QUERYID:
				{
				setState(741);
				queryid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Stabilized_dynamic_queryContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_STABILIZED() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_STABILIZED, 0); }
		public TerminalNode ADM_CMD_DSN_DYNAMIC() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_DYNAMIC, 0); }
		public TerminalNode ADM_CMD_DSN_QUERY() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_QUERY, 0); }
		public List<ContinuationContext> continuation() {
			return getRuleContexts(ContinuationContext.class);
		}
		public ContinuationContext continuation(int i) {
			return getRuleContext(ContinuationContext.class,i);
		}
		public Stabilized_dynamic_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stabilized_dynamic_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterStabilized_dynamic_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitStabilized_dynamic_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitStabilized_dynamic_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stabilized_dynamic_queryContext stabilized_dynamic_query() throws RecognitionException {
		Stabilized_dynamic_queryContext _localctx = new Stabilized_dynamic_queryContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_stabilized_dynamic_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(744);
			match(ADM_CMD_DSN_STABILIZED);
			setState(748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
				{
				{
				setState(745);
				continuation();
				}
				}
				setState(750);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(751);
			match(ADM_CMD_DSN_DYNAMIC);
			setState(755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
				{
				{
				setState(752);
				continuation();
				}
				}
				setState(757);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(758);
			match(ADM_CMD_DSN_QUERY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DsnQueryContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_QUERY() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_QUERY, 0); }
		public DsnQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dsnQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDsnQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDsnQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDsnQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DsnQueryContext dsnQuery() throws RecognitionException {
		DsnQueryContext _localctx = new DsnQueryContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_dsnQuery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(760);
			match(ADM_CMD_DSN_QUERY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlanmgmtscopeContext extends ParserRuleContext {
		public TerminalNode PLANMGMTSCOPE() { return getToken(DB2zPLSQLParser.PLANMGMTSCOPE, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public PlanmgmtscopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_planmgmtscope; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterPlanmgmtscope(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitPlanmgmtscope(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitPlanmgmtscope(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlanmgmtscopeContext planmgmtscope() throws RecognitionException {
		PlanmgmtscopeContext _localctx = new PlanmgmtscopeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_planmgmtscope);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(762);
			match(PLANMGMTSCOPE);
			setState(763);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InvalidonlyContext extends ParserRuleContext {
		public TerminalNode INVALIDONLY() { return getToken(DB2zPLSQLParser.INVALIDONLY, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public InvalidonlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invalidonly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterInvalidonly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitInvalidonly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitInvalidonly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InvalidonlyContext invalidonly() throws RecognitionException {
		InvalidonlyContext _localctx = new InvalidonlyContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_invalidonly);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(765);
			match(INVALIDONLY);
			setState(766);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StblgrpContext extends ParserRuleContext {
		public TerminalNode STBLGRP() { return getToken(DB2zPLSQLParser.STBLGRP, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public StblgrpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stblgrp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterStblgrp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitStblgrp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitStblgrp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StblgrpContext stblgrp() throws RecognitionException {
		StblgrpContext _localctx = new StblgrpContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_stblgrp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(768);
			match(STBLGRP);
			setState(769);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SdqstmtidContext extends ParserRuleContext {
		public TerminalNode SDQSTMTID() { return getToken(DB2zPLSQLParser.SDQSTMTID, 0); }
		public ArgContext arg() {
			return getRuleContext(ArgContext.class,0);
		}
		public SdqstmtidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sdqstmtid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterSdqstmtid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitSdqstmtid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitSdqstmtid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SdqstmtidContext sdqstmtid() throws RecognitionException {
		SdqstmtidContext _localctx = new SdqstmtidContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_sdqstmtid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(771);
			match(SDQSTMTID);
			setState(772);
			arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RebindContext extends ParserRuleContext {
		public TerminalNode REBIND() { return getToken(DB2zPLSQLParser.REBIND, 0); }
		public List<BindOptionsContext> bindOptions() {
			return getRuleContexts(BindOptionsContext.class);
		}
		public BindOptionsContext bindOptions(int i) {
			return getRuleContext(BindOptionsContext.class,i);
		}
		public List<ContinuationContext> continuation() {
			return getRuleContexts(ContinuationContext.class);
		}
		public ContinuationContext continuation(int i) {
			return getRuleContext(ContinuationContext.class,i);
		}
		public RebindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rebind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRebind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRebind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRebind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RebindContext rebind() throws RecognitionException {
		RebindContext _localctx = new RebindContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_rebind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(774);
			match(REBIND);
			setState(779); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(775);
				bindOptions();
				setState(777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
					{
					setState(776);
					continuation();
					}
				}

				}
				}
				setState(781); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1021)) & ~0x3f) == 0 && ((1L << (_la - 1021)) & ((1L << (ADM_CMD_DSN_ACCELERATOR - 1021)) | (1L << (ACCELERATIONWAITFORDATA - 1021)) | (1L << (ACQUIRE - 1021)) | (1L << (ADM_CMD_DSN_ACTION - 1021)) | (1L << (APCOMPARE - 1021)) | (1L << (APPLCOMPAT - 1021)) | (1L << (APRETAINDUP - 1021)) | (1L << (APREUSE - 1021)) | (1L << (APREUSESOURCE - 1021)) | (1L << (ARCHIVESENSITIVE - 1021)) | (1L << (BUSTIMESENSITIVE - 1021)) | (1L << (CACHESIZE - 1021)) | (1L << (CICS - 1021)) | (1L << (ADM_CMD_DSN_COLLID - 1021)) | (1L << (CONCENTRATESTMT - 1021)) | (1L << (CONCURRENTACCESSRESOLUTION - 1021)) | (1L << (ADM_CMD_DSN_COPY - 1021)) | (1L << (COPYVER - 1021)) | (1L << (CURRENTDATA - 1021)) | (1L << (CURRENTSERVER - 1021)) | (1L << (ADM_CMD_DSN_DATE - 1021)) | (1L << (DBPROTOCOL - 1021)) | (1L << (ADM_CMD_DSN_DEC - 1021)) | (1L << (DECDEL - 1021)) | (1L << (ADM_CMD_DSN_DEFER - 1021)) | (1L << (DEGREE - 1021)) | (1L << (DEPLOY - 1021)) | (1L << (DESCRIPTION - 1021)) | (1L << (DESCSTAT - 1021)) | (1L << (ADM_CMD_DSN_DISABLE - 1021)) | (1L << (DISCONNECT - 1021)) | (1L << (DLIBATCH - 1021)) | (1L << (DYNAMICRULES - 1021)) | (1L << (ADM_CMD_DSN_ENABLE - 1021)) | (1L << (ADM_CMD_DSN_ENCODING - 1021)) | (1L << (ADM_CMD_DSN_EXPLAIN - 1021)) | (1L << (EXTENDEDINDICATOR - 1021)) | (1L << (FILTER - 1021)) | (1L << (FLAG - 1021)) | (1L << (ADM_CMD_DSN_GENERIC - 1021)) | (1L << (GETACCELARCHIVE - 1021)) | (1L << (IMMEDWRITE - 1021)) | (1L << (IMSBMP - 1021)) | (1L << (IMSMPP - 1021)) | (1L << (ISOLATION - 1021)) | (1L << (KEEPDYNAMIC - 1021)))) != 0) || ((((_la - 1086)) & ~0x3f) == 0 && ((1L << (_la - 1086)) & ((1L << (LIB - 1086)) | (1L << (LIBRARY - 1086)) | (1L << (ADM_CMD_DSN_MEMBER - 1086)) | (1L << (ADM_CMD_DSN_NAME - 1086)) | (1L << (NODEFER - 1086)) | (1L << (NOPKLIST - 1086)) | (1L << (OPTHINT - 1086)) | (1L << (ADM_CMD_DSN_OPTIONS - 1086)) | (1L << (ADM_CMD_DSN_OWNER - 1086)) | (1L << (ADM_CMD_DSN_PACKAGE - 1086)) | (1L << (ADM_CMD_DSN_PATH - 1086)) | (1L << (PATHDEFAULT - 1086)) | (1L << (PKLIST - 1086)) | (1L << (ADM_CMD_DSN_PLAN - 1086)) | (1L << (PLANMGMT - 1086)) | (1L << (PROGAUTH - 1086)) | (1L << (ADM_CMD_DSN_QUALIFIER - 1086)) | (1L << (QUERYACCELERATION - 1086)) | (1L << (QUERYID - 1086)) | (1L << (ADM_CMD_DSN_RELEASE - 1086)) | (1L << (REOPT - 1086)) | (1L << (REPLVER - 1086)) | (1L << (ROUNDING - 1086)) | (1L << (SERVICE - 1086)) | (1L << (SQLDDNAME - 1086)) | (1L << (SQLENCODING - 1086)) | (1L << (ADM_CMD_DSN_SQLERROR - 1086)) | (1L << (SQLRULES - 1086)) | (1L << (STRDEL - 1086)) | (1L << (SWITCH - 1086)) | (1L << (SYSTIMESENSITIVE - 1086)) | (1L << (ADM_CMD_DSN_TIME - 1086)) | (1L << (VALIDATE - 1086)) | (1L << (ADM_CMD_DSN_VERSION - 1086)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RebindTriggerContext extends ParserRuleContext {
		public TerminalNode REBIND() { return getToken(DB2zPLSQLParser.REBIND, 0); }
		public TerminalNode ADM_CMD_DSN_TRIGGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_TRIGGER, 0); }
		public List<ContinuationContext> continuation() {
			return getRuleContexts(ContinuationContext.class);
		}
		public ContinuationContext continuation(int i) {
			return getRuleContext(ContinuationContext.class,i);
		}
		public List<BindOptionsContext> bindOptions() {
			return getRuleContexts(BindOptionsContext.class);
		}
		public BindOptionsContext bindOptions(int i) {
			return getRuleContext(BindOptionsContext.class,i);
		}
		public RebindTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rebindTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRebindTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRebindTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRebindTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RebindTriggerContext rebindTrigger() throws RecognitionException {
		RebindTriggerContext _localctx = new RebindTriggerContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_rebindTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(783);
			match(REBIND);
			setState(784);
			match(ADM_CMD_DSN_TRIGGER);
			setState(786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
				{
				setState(785);
				continuation();
				}
			}

			setState(792); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(788);
				bindOptions();
				setState(790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) {
					{
					setState(789);
					continuation();
					}
				}

				}
				}
				setState(794); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1021)) & ~0x3f) == 0 && ((1L << (_la - 1021)) & ((1L << (ADM_CMD_DSN_ACCELERATOR - 1021)) | (1L << (ACCELERATIONWAITFORDATA - 1021)) | (1L << (ACQUIRE - 1021)) | (1L << (ADM_CMD_DSN_ACTION - 1021)) | (1L << (APCOMPARE - 1021)) | (1L << (APPLCOMPAT - 1021)) | (1L << (APRETAINDUP - 1021)) | (1L << (APREUSE - 1021)) | (1L << (APREUSESOURCE - 1021)) | (1L << (ARCHIVESENSITIVE - 1021)) | (1L << (BUSTIMESENSITIVE - 1021)) | (1L << (CACHESIZE - 1021)) | (1L << (CICS - 1021)) | (1L << (ADM_CMD_DSN_COLLID - 1021)) | (1L << (CONCENTRATESTMT - 1021)) | (1L << (CONCURRENTACCESSRESOLUTION - 1021)) | (1L << (ADM_CMD_DSN_COPY - 1021)) | (1L << (COPYVER - 1021)) | (1L << (CURRENTDATA - 1021)) | (1L << (CURRENTSERVER - 1021)) | (1L << (ADM_CMD_DSN_DATE - 1021)) | (1L << (DBPROTOCOL - 1021)) | (1L << (ADM_CMD_DSN_DEC - 1021)) | (1L << (DECDEL - 1021)) | (1L << (ADM_CMD_DSN_DEFER - 1021)) | (1L << (DEGREE - 1021)) | (1L << (DEPLOY - 1021)) | (1L << (DESCRIPTION - 1021)) | (1L << (DESCSTAT - 1021)) | (1L << (ADM_CMD_DSN_DISABLE - 1021)) | (1L << (DISCONNECT - 1021)) | (1L << (DLIBATCH - 1021)) | (1L << (DYNAMICRULES - 1021)) | (1L << (ADM_CMD_DSN_ENABLE - 1021)) | (1L << (ADM_CMD_DSN_ENCODING - 1021)) | (1L << (ADM_CMD_DSN_EXPLAIN - 1021)) | (1L << (EXTENDEDINDICATOR - 1021)) | (1L << (FILTER - 1021)) | (1L << (FLAG - 1021)) | (1L << (ADM_CMD_DSN_GENERIC - 1021)) | (1L << (GETACCELARCHIVE - 1021)) | (1L << (IMMEDWRITE - 1021)) | (1L << (IMSBMP - 1021)) | (1L << (IMSMPP - 1021)) | (1L << (ISOLATION - 1021)) | (1L << (KEEPDYNAMIC - 1021)))) != 0) || ((((_la - 1086)) & ~0x3f) == 0 && ((1L << (_la - 1086)) & ((1L << (LIB - 1086)) | (1L << (LIBRARY - 1086)) | (1L << (ADM_CMD_DSN_MEMBER - 1086)) | (1L << (ADM_CMD_DSN_NAME - 1086)) | (1L << (NODEFER - 1086)) | (1L << (NOPKLIST - 1086)) | (1L << (OPTHINT - 1086)) | (1L << (ADM_CMD_DSN_OPTIONS - 1086)) | (1L << (ADM_CMD_DSN_OWNER - 1086)) | (1L << (ADM_CMD_DSN_PACKAGE - 1086)) | (1L << (ADM_CMD_DSN_PATH - 1086)) | (1L << (PATHDEFAULT - 1086)) | (1L << (PKLIST - 1086)) | (1L << (ADM_CMD_DSN_PLAN - 1086)) | (1L << (PLANMGMT - 1086)) | (1L << (PROGAUTH - 1086)) | (1L << (ADM_CMD_DSN_QUALIFIER - 1086)) | (1L << (QUERYACCELERATION - 1086)) | (1L << (QUERYID - 1086)) | (1L << (ADM_CMD_DSN_RELEASE - 1086)) | (1L << (REOPT - 1086)) | (1L << (REPLVER - 1086)) | (1L << (ROUNDING - 1086)) | (1L << (SERVICE - 1086)) | (1L << (SQLDDNAME - 1086)) | (1L << (SQLENCODING - 1086)) | (1L << (ADM_CMD_DSN_SQLERROR - 1086)) | (1L << (SQLRULES - 1086)) | (1L << (STRDEL - 1086)) | (1L << (SWITCH - 1086)) | (1L << (SYSTIMESENSITIVE - 1086)) | (1L << (ADM_CMD_DSN_TIME - 1086)) | (1L << (VALIDATE - 1086)) | (1L << (ADM_CMD_DSN_VERSION - 1086)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgContext extends ParserRuleContext {
		public List<TerminalNode> ADM_CMD_DSN_LPAREN() { return getTokens(DB2zPLSQLParser.ADM_CMD_DSN_LPAREN); }
		public TerminalNode ADM_CMD_DSN_LPAREN(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DSN_LPAREN, i);
		}
		public List<TerminalNode> ADM_CMD_DSN_RPAREN() { return getTokens(DB2zPLSQLParser.ADM_CMD_DSN_RPAREN); }
		public TerminalNode ADM_CMD_DSN_RPAREN(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DSN_RPAREN, i);
		}
		public List<TerminalNode> ARG() { return getTokens(DB2zPLSQLParser.ARG); }
		public TerminalNode ARG(int i) {
			return getToken(DB2zPLSQLParser.ARG, i);
		}
		public List<TerminalNode> QUOTED_STRING_FRAGMENT() { return getTokens(DB2zPLSQLParser.QUOTED_STRING_FRAGMENT); }
		public TerminalNode QUOTED_STRING_FRAGMENT(int i) {
			return getToken(DB2zPLSQLParser.QUOTED_STRING_FRAGMENT, i);
		}
		public List<TerminalNode> SQUOTE2() { return getTokens(DB2zPLSQLParser.SQUOTE2); }
		public TerminalNode SQUOTE2(int i) {
			return getToken(DB2zPLSQLParser.SQUOTE2, i);
		}
		public ArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgContext arg() throws RecognitionException {
		ArgContext _localctx = new ArgContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_arg);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(796);
			match(ADM_CMD_DSN_LPAREN);
			setState(816);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(814);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ADM_CMD_DSN_LPAREN:
						{
						setState(797);
						match(ADM_CMD_DSN_LPAREN);
						}
						break;
					case ARG:
						{
						setState(799); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(798);
								match(ARG);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(801); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case QUOTED_STRING_FRAGMENT:
						{
						setState(804); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(803);
								match(QUOTED_STRING_FRAGMENT);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(806); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case SQUOTE2:
						{
						setState(809); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(808);
								match(SQUOTE2);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(811); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case ADM_CMD_DSN_RPAREN:
						{
						setState(813);
						match(ADM_CMD_DSN_RPAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(818);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			setState(819);
			match(ADM_CMD_DSN_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LibargsContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_LPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_LPAREN, 0); }
		public TerminalNode ADM_CMD_DSN_RPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_RPAREN, 0); }
		public List<TerminalNode> ARG() { return getTokens(DB2zPLSQLParser.ARG); }
		public TerminalNode ARG(int i) {
			return getToken(DB2zPLSQLParser.ARG, i);
		}
		public List<TerminalNode> QUOTED_STRING_FRAGMENT() { return getTokens(DB2zPLSQLParser.QUOTED_STRING_FRAGMENT); }
		public TerminalNode QUOTED_STRING_FRAGMENT(int i) {
			return getToken(DB2zPLSQLParser.QUOTED_STRING_FRAGMENT, i);
		}
		public LibmemberContext libmember() {
			return getRuleContext(LibmemberContext.class,0);
		}
		public LibargsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_libargs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterLibargs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitLibargs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitLibargs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibargsContext libargs() throws RecognitionException {
		LibargsContext _localctx = new LibargsContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_libargs);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(821);
			match(ADM_CMD_DSN_LPAREN);
			setState(835);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ARG:
				{
				{
				setState(823); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(822);
						match(ARG);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(825); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DSN_LPAREN) {
					{
					setState(827);
					libmember();
					}
				}

				}
				}
				break;
			case QUOTED_STRING_FRAGMENT:
				{
				setState(831); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(830);
					match(QUOTED_STRING_FRAGMENT);
					}
					}
					setState(833); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==QUOTED_STRING_FRAGMENT );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ARG) {
				{
				{
				setState(837);
				match(ARG);
				}
				}
				setState(842);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(843);
			match(ADM_CMD_DSN_RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LibmemberContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_LPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_LPAREN, 0); }
		public TerminalNode ADM_CMD_DSN_RPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_RPAREN, 0); }
		public List<TerminalNode> ARG() { return getTokens(DB2zPLSQLParser.ARG); }
		public TerminalNode ARG(int i) {
			return getToken(DB2zPLSQLParser.ARG, i);
		}
		public LibmemberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_libmember; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterLibmember(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitLibmember(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitLibmember(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibmemberContext libmember() throws RecognitionException {
		LibmemberContext _localctx = new LibmemberContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_libmember);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(845);
			match(ADM_CMD_DSN_LPAREN);
			setState(847); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(846);
				match(ARG);
				}
				}
				setState(849); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ARG );
			setState(851);
			match(ADM_CMD_DSN_RPAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ContinuationContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DSN_MINUS() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_MINUS, 0); }
		public TerminalNode ADM_CMD_DSN_PLUS() { return getToken(DB2zPLSQLParser.ADM_CMD_DSN_PLUS, 0); }
		public ContinuationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continuation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterContinuation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitContinuation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitContinuation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ContinuationContext continuation() throws RecognitionException {
		ContinuationContext _localctx = new ContinuationContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_continuation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(853);
			_la = _input.LA(1);
			if ( !(_la==ADM_CMD_DSN_MINUS || _la==ADM_CMD_DSN_PLUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdminCmdDb2Context extends ParserRuleContext {
		public TerminalNode ADMIN_COMMAND_DB2() { return getToken(DB2zPLSQLParser.ADMIN_COMMAND_DB2, 0); }
		public TerminalNode ADM_CMD_DB2_LPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_LPAREN, 0); }
		public List<TerminalNode> ADM_CMD_DB2_SIMPLEQUOTE() { return getTokens(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE); }
		public TerminalNode ADM_CMD_DB2_SIMPLEQUOTE(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE, i);
		}
		public Db2CommandsContext db2Commands() {
			return getRuleContext(Db2CommandsContext.class,0);
		}
		public List<TerminalNode> ADM_CMD_DB2_COMMA() { return getTokens(DB2zPLSQLParser.ADM_CMD_DB2_COMMA); }
		public TerminalNode ADM_CMD_DB2_COMMA(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DB2_COMMA, i);
		}
		public AdmCmdDb2CommandLengthContext admCmdDb2CommandLength() {
			return getRuleContext(AdmCmdDb2CommandLengthContext.class,0);
		}
		public ProcessingTypeContext processingType() {
			return getRuleContext(ProcessingTypeContext.class,0);
		}
		public Db2MemberContext db2Member() {
			return getRuleContext(Db2MemberContext.class,0);
		}
		public CommandsExecutedContext commandsExecuted() {
			return getRuleContext(CommandsExecutedContext.class,0);
		}
		public IfiReturnCodeContext ifiReturnCode() {
			return getRuleContext(IfiReturnCodeContext.class,0);
		}
		public IfiReasonCodeContext ifiReasonCode() {
			return getRuleContext(IfiReasonCodeContext.class,0);
		}
		public ExcessBytesContext excessBytes() {
			return getRuleContext(ExcessBytesContext.class,0);
		}
		public GroupIfiReasonCodeContext groupIfiReasonCode() {
			return getRuleContext(GroupIfiReasonCodeContext.class,0);
		}
		public GroupExcessBytesContext groupExcessBytes() {
			return getRuleContext(GroupExcessBytesContext.class,0);
		}
		public AdmCmdDb2ReturnCodeContext admCmdDb2ReturnCode() {
			return getRuleContext(AdmCmdDb2ReturnCodeContext.class,0);
		}
		public ReturnMsgContext returnMsg() {
			return getRuleContext(ReturnMsgContext.class,0);
		}
		public TerminalNode ADM_CMD_DB2_RPAREN() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_RPAREN, 0); }
		public AdmCmdDb2TerminatorContext admCmdDb2Terminator() {
			return getRuleContext(AdmCmdDb2TerminatorContext.class,0);
		}
		public TerminalNode NEWLINE() { return getToken(DB2zPLSQLParser.NEWLINE, 0); }
		public AdminCmdDb2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminCmdDb2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAdminCmdDb2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAdminCmdDb2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAdminCmdDb2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdminCmdDb2Context adminCmdDb2() throws RecognitionException {
		AdminCmdDb2Context _localctx = new AdminCmdDb2Context(_ctx, getState());
		enterRule(_localctx, 220, RULE_adminCmdDb2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(855);
			match(ADMIN_COMMAND_DB2);
			setState(856);
			match(ADM_CMD_DB2_LPAREN);
			setState(857);
			match(ADM_CMD_DB2_SIMPLEQUOTE);
			setState(858);
			db2Commands();
			setState(859);
			match(ADM_CMD_DB2_SIMPLEQUOTE);
			setState(860);
			match(ADM_CMD_DB2_COMMA);
			setState(861);
			admCmdDb2CommandLength();
			setState(862);
			match(ADM_CMD_DB2_COMMA);
			setState(863);
			processingType();
			setState(864);
			match(ADM_CMD_DB2_COMMA);
			setState(865);
			db2Member();
			setState(866);
			match(ADM_CMD_DB2_COMMA);
			setState(867);
			commandsExecuted();
			setState(868);
			match(ADM_CMD_DB2_COMMA);
			setState(869);
			ifiReturnCode();
			setState(870);
			match(ADM_CMD_DB2_COMMA);
			setState(871);
			ifiReasonCode();
			setState(872);
			match(ADM_CMD_DB2_COMMA);
			setState(873);
			excessBytes();
			setState(874);
			match(ADM_CMD_DB2_COMMA);
			setState(875);
			groupIfiReasonCode();
			setState(876);
			match(ADM_CMD_DB2_COMMA);
			setState(877);
			groupExcessBytes();
			setState(878);
			match(ADM_CMD_DB2_COMMA);
			setState(879);
			admCmdDb2ReturnCode();
			setState(880);
			match(ADM_CMD_DB2_COMMA);
			setState(881);
			returnMsg();
			setState(882);
			match(ADM_CMD_DB2_RPAREN);
			setState(883);
			admCmdDb2Terminator();
			setState(885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NEWLINE) {
				{
				setState(884);
				match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdmCmdDb2TerminatorContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_TERMINATOR() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_TERMINATOR, 0); }
		public AdmCmdDb2TerminatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_admCmdDb2Terminator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAdmCmdDb2Terminator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAdmCmdDb2Terminator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAdmCmdDb2Terminator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdmCmdDb2TerminatorContext admCmdDb2Terminator() throws RecognitionException {
		AdmCmdDb2TerminatorContext _localctx = new AdmCmdDb2TerminatorContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_admCmdDb2Terminator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(887);
			match(ADM_CMD_DB2_TERMINATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdmCmdDb2CommandLengthContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public AdmCmdDb2CommandLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_admCmdDb2CommandLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAdmCmdDb2CommandLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAdmCmdDb2CommandLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAdmCmdDb2CommandLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdmCmdDb2CommandLengthContext admCmdDb2CommandLength() throws RecognitionException {
		AdmCmdDb2CommandLengthContext _localctx = new AdmCmdDb2CommandLengthContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_admCmdDb2CommandLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(889);
			match(ADM_CMD_DB2_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcessingTypeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_EMPTYARG() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_EMPTYARG, 0); }
		public TerminalNode ADM_CMD_DB2_NULL() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_NULL, 0); }
		public ProcessingTypesContext processingTypes() {
			return getRuleContext(ProcessingTypesContext.class,0);
		}
		public ProcessingTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_processingType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterProcessingType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitProcessingType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitProcessingType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcessingTypeContext processingType() throws RecognitionException {
		ProcessingTypeContext _localctx = new ProcessingTypeContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_processingType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DB2_EMPTYARG:
				{
				setState(891);
				match(ADM_CMD_DB2_EMPTYARG);
				}
				break;
			case ADM_CMD_DB2_NULL:
				{
				setState(892);
				match(ADM_CMD_DB2_NULL);
				}
				break;
			case ADM_CMD_DB2_SIMPLEQUOTE:
				{
				setState(893);
				processingTypes();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcessingTypesContext extends ParserRuleContext {
		public List<TerminalNode> ADM_CMD_DB2_SIMPLEQUOTE() { return getTokens(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE); }
		public TerminalNode ADM_CMD_DB2_SIMPLEQUOTE(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE, i);
		}
		public TerminalNode BP() { return getToken(DB2zPLSQLParser.BP, 0); }
		public TerminalNode ADM_CMD_DB2_DB() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_DB, 0); }
		public TerminalNode TS() { return getToken(DB2zPLSQLParser.TS, 0); }
		public TerminalNode IX() { return getToken(DB2zPLSQLParser.IX, 0); }
		public TerminalNode THD() { return getToken(DB2zPLSQLParser.THD, 0); }
		public TerminalNode UT() { return getToken(DB2zPLSQLParser.UT, 0); }
		public TerminalNode GRP() { return getToken(DB2zPLSQLParser.GRP, 0); }
		public TerminalNode DDF() { return getToken(DB2zPLSQLParser.DDF, 0); }
		public TerminalNode SYC() { return getToken(DB2zPLSQLParser.SYC, 0); }
		public ProcessingTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_processingTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterProcessingTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitProcessingTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitProcessingTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcessingTypesContext processingTypes() throws RecognitionException {
		ProcessingTypesContext _localctx = new ProcessingTypesContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_processingTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(896);
			match(ADM_CMD_DB2_SIMPLEQUOTE);
			setState(897);
			_la = _input.LA(1);
			if ( !(((((_la - 1175)) & ~0x3f) == 0 && ((1L << (_la - 1175)) & ((1L << (BP - 1175)) | (1L << (ADM_CMD_DB2_DB - 1175)) | (1L << (TS - 1175)) | (1L << (IX - 1175)) | (1L << (THD - 1175)) | (1L << (UT - 1175)) | (1L << (GRP - 1175)) | (1L << (DDF - 1175)) | (1L << (SYC - 1175)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(898);
			match(ADM_CMD_DB2_SIMPLEQUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db2MemberContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_EMPTYARG() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_EMPTYARG, 0); }
		public TerminalNode ADM_CMD_DB2_NULL() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_NULL, 0); }
		public TerminalNode DB2MEMBER() { return getToken(DB2zPLSQLParser.DB2MEMBER, 0); }
		public Db2MemberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db2Member; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDb2Member(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDb2Member(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDb2Member(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db2MemberContext db2Member() throws RecognitionException {
		Db2MemberContext _localctx = new Db2MemberContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_db2Member);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(900);
			_la = _input.LA(1);
			if ( !(((((_la - 1164)) & ~0x3f) == 0 && ((1L << (_la - 1164)) & ((1L << (DB2MEMBER - 1164)) | (1L << (ADM_CMD_DB2_NULL - 1164)) | (1L << (ADM_CMD_DB2_EMPTYARG - 1164)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommandsExecutedContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public CommandsExecutedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commandsExecuted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCommandsExecuted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCommandsExecuted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCommandsExecuted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommandsExecutedContext commandsExecuted() throws RecognitionException {
		CommandsExecutedContext _localctx = new CommandsExecutedContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_commandsExecuted);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(902);
			match(ADM_CMD_DB2_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfiReturnCodeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public IfiReturnCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifiReturnCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterIfiReturnCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitIfiReturnCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitIfiReturnCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfiReturnCodeContext ifiReturnCode() throws RecognitionException {
		IfiReturnCodeContext _localctx = new IfiReturnCodeContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_ifiReturnCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(904);
			match(ADM_CMD_DB2_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfiReasonCodeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public IfiReasonCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifiReasonCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterIfiReasonCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitIfiReasonCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitIfiReasonCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfiReasonCodeContext ifiReasonCode() throws RecognitionException {
		IfiReasonCodeContext _localctx = new IfiReasonCodeContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_ifiReasonCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(906);
			match(ADM_CMD_DB2_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExcessBytesContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public ExcessBytesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_excessBytes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterExcessBytes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitExcessBytes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitExcessBytes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExcessBytesContext excessBytes() throws RecognitionException {
		ExcessBytesContext _localctx = new ExcessBytesContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_excessBytes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(908);
			match(ADM_CMD_DB2_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupIfiReasonCodeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public GroupIfiReasonCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupIfiReasonCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterGroupIfiReasonCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitGroupIfiReasonCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitGroupIfiReasonCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupIfiReasonCodeContext groupIfiReasonCode() throws RecognitionException {
		GroupIfiReasonCodeContext _localctx = new GroupIfiReasonCodeContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_groupIfiReasonCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(910);
			match(ADM_CMD_DB2_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupExcessBytesContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public GroupExcessBytesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupExcessBytes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterGroupExcessBytes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitGroupExcessBytes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitGroupExcessBytes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupExcessBytesContext groupExcessBytes() throws RecognitionException {
		GroupExcessBytesContext _localctx = new GroupExcessBytesContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_groupExcessBytes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(912);
			match(ADM_CMD_DB2_INTEGER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnMsgContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_EMPTYARG() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_EMPTYARG, 0); }
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public List<TerminalNode> ADM_CMD_DB2_SIMPLEQUOTE() { return getTokens(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE); }
		public TerminalNode ADM_CMD_DB2_SIMPLEQUOTE(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE, i);
		}
		public ReturnMsgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnMsg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterReturnMsg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitReturnMsg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitReturnMsg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnMsgContext returnMsg() throws RecognitionException {
		ReturnMsgContext _localctx = new ReturnMsgContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_returnMsg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DB2_EMPTYARG:
				{
				setState(914);
				match(ADM_CMD_DB2_EMPTYARG);
				}
				break;
			case ADM_CMD_DB2_INTEGER:
			case ADM_CMD_DB2_SIMPLEQUOTE:
				{
				setState(916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DB2_SIMPLEQUOTE) {
					{
					setState(915);
					match(ADM_CMD_DB2_SIMPLEQUOTE);
					}
				}

				setState(918);
				match(ADM_CMD_DB2_INTEGER);
				setState(920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DB2_SIMPLEQUOTE) {
					{
					setState(919);
					match(ADM_CMD_DB2_SIMPLEQUOTE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdmCmdDb2ReturnCodeContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_INTEGER() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_INTEGER, 0); }
		public TerminalNode ADM_CMD_DB2_EMPTYARG() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_EMPTYARG, 0); }
		public List<TerminalNode> ADM_CMD_DB2_SIMPLEQUOTE() { return getTokens(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE); }
		public TerminalNode ADM_CMD_DB2_SIMPLEQUOTE(int i) {
			return getToken(DB2zPLSQLParser.ADM_CMD_DB2_SIMPLEQUOTE, i);
		}
		public AdmCmdDb2ReturnCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_admCmdDb2ReturnCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterAdmCmdDb2ReturnCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitAdmCmdDb2ReturnCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitAdmCmdDb2ReturnCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdmCmdDb2ReturnCodeContext admCmdDb2ReturnCode() throws RecognitionException {
		AdmCmdDb2ReturnCodeContext _localctx = new AdmCmdDb2ReturnCodeContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_admCmdDb2ReturnCode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(932);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DB2_INTEGER:
			case ADM_CMD_DB2_SIMPLEQUOTE:
				{
				setState(925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DB2_SIMPLEQUOTE) {
					{
					setState(924);
					match(ADM_CMD_DB2_SIMPLEQUOTE);
					}
				}

				setState(927);
				match(ADM_CMD_DB2_INTEGER);
				setState(929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADM_CMD_DB2_SIMPLEQUOTE) {
					{
					setState(928);
					match(ADM_CMD_DB2_SIMPLEQUOTE);
					}
				}

				}
				break;
			case ADM_CMD_DB2_EMPTYARG:
				{
				setState(931);
				match(ADM_CMD_DB2_EMPTYARG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db2CommandsContext extends ParserRuleContext {
		public DisplayContext display() {
			return getRuleContext(DisplayContext.class,0);
		}
		public TerminateContext terminate() {
			return getRuleContext(TerminateContext.class,0);
		}
		public Db2CommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db2Commands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDb2Commands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDb2Commands(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDb2Commands(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db2CommandsContext db2Commands() throws RecognitionException {
		Db2CommandsContext _localctx = new Db2CommandsContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_db2Commands);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(936);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADM_CMD_DB2_DISPLAY:
				{
				setState(934);
				display();
				}
				break;
			case TERMINATE:
				{
				setState(935);
				terminate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DisplayContext extends ParserRuleContext {
		public TerminalNode ADM_CMD_DB2_DISPLAY() { return getToken(DB2zPLSQLParser.ADM_CMD_DB2_DISPLAY, 0); }
		public DisplayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_display; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDisplay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDisplay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDisplay(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DisplayContext display() throws RecognitionException {
		DisplayContext _localctx = new DisplayContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_display);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(938);
			match(ADM_CMD_DB2_DISPLAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminateContext extends ParserRuleContext {
		public TerminalNode TERMINATE() { return getToken(DB2zPLSQLParser.TERMINATE, 0); }
		public TerminateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_terminate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterTerminate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitTerminate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitTerminate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TerminateContext terminate() throws RecognitionException {
		TerminateContext _localctx = new TerminateContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_terminate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(940);
			match(TERMINATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DsnutilCallContext extends ParserRuleContext {
		public TerminalNode DSNUTILU() { return getToken(DB2zPLSQLParser.DSNUTILU, 0); }
		public TerminalNode UTIL_LPAREN() { return getToken(DB2zPLSQLParser.UTIL_LPAREN, 0); }
		public UtilityIdContext utilityId() {
			return getRuleContext(UtilityIdContext.class,0);
		}
		public List<TerminalNode> UTIL_COMMA() { return getTokens(DB2zPLSQLParser.UTIL_COMMA); }
		public TerminalNode UTIL_COMMA(int i) {
			return getToken(DB2zPLSQLParser.UTIL_COMMA, i);
		}
		public RestartContext restart() {
			return getRuleContext(RestartContext.class,0);
		}
		public UtStmtsContext utStmts() {
			return getRuleContext(UtStmtsContext.class,0);
		}
		public ReturnCodeContext returnCode() {
			return getRuleContext(ReturnCodeContext.class,0);
		}
		public TerminalNode UTIL_RPAREN() { return getToken(DB2zPLSQLParser.UTIL_RPAREN, 0); }
		public UtilTerminatorContext utilTerminator() {
			return getRuleContext(UtilTerminatorContext.class,0);
		}
		public TerminalNode NEWLINE() { return getToken(DB2zPLSQLParser.NEWLINE, 0); }
		public DsnutilCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dsnutilCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterDsnutilCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitDsnutilCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitDsnutilCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DsnutilCallContext dsnutilCall() throws RecognitionException {
		DsnutilCallContext _localctx = new DsnutilCallContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_dsnutilCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(942);
			match(DSNUTILU);
			setState(943);
			match(UTIL_LPAREN);
			setState(944);
			utilityId();
			setState(945);
			match(UTIL_COMMA);
			setState(946);
			restart();
			setState(947);
			match(UTIL_COMMA);
			setState(948);
			utStmts();
			setState(949);
			match(UTIL_COMMA);
			setState(950);
			returnCode();
			setState(951);
			match(UTIL_RPAREN);
			setState(952);
			utilTerminator();
			setState(954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NEWLINE) {
				{
				setState(953);
				match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilTerminatorContext extends ParserRuleContext {
		public TerminalNode UTIL_TERMINATOR() { return getToken(DB2zPLSQLParser.UTIL_TERMINATOR, 0); }
		public UtilTerminatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilTerminator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterUtilTerminator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitUtilTerminator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitUtilTerminator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilTerminatorContext utilTerminator() throws RecognitionException {
		UtilTerminatorContext _localctx = new UtilTerminatorContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_utilTerminator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(956);
			match(UTIL_TERMINATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityIdContext extends ParserRuleContext {
		public TerminalNode UTILITYID() { return getToken(DB2zPLSQLParser.UTILITYID, 0); }
		public UtilityIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterUtilityId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitUtilityId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitUtilityId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityIdContext utilityId() throws RecognitionException {
		UtilityIdContext _localctx = new UtilityIdContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_utilityId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(958);
			match(UTILITYID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartContext extends ParserRuleContext {
		public TerminalNode UTIL_RESTART() { return getToken(DB2zPLSQLParser.UTIL_RESTART, 0); }
		public RestartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRestart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRestart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRestart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartContext restart() throws RecognitionException {
		RestartContext _localctx = new RestartContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_restart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(960);
			match(UTIL_RESTART);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtStmtsContext extends ParserRuleContext {
		public List<TerminalNode> UTIL_SIMPLEQUOTE() { return getTokens(DB2zPLSQLParser.UTIL_SIMPLEQUOTE); }
		public TerminalNode UTIL_SIMPLEQUOTE(int i) {
			return getToken(DB2zPLSQLParser.UTIL_SIMPLEQUOTE, i);
		}
		public List<UtilitiesContext> utilities() {
			return getRuleContexts(UtilitiesContext.class);
		}
		public UtilitiesContext utilities(int i) {
			return getRuleContext(UtilitiesContext.class,i);
		}
		public List<ListdefContext> listdef() {
			return getRuleContexts(ListdefContext.class);
		}
		public ListdefContext listdef(int i) {
			return getRuleContext(ListdefContext.class,i);
		}
		public List<TemplateContext> template() {
			return getRuleContexts(TemplateContext.class);
		}
		public TemplateContext template(int i) {
			return getRuleContext(TemplateContext.class,i);
		}
		public UtStmtsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utStmts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterUtStmts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitUtStmts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitUtStmts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtStmtsContext utStmts() throws RecognitionException {
		UtStmtsContext _localctx = new UtStmtsContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_utStmts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(962);
			match(UTIL_SIMPLEQUOTE);
			setState(973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LISTDEF:
				{
				setState(964); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(963);
					listdef();
					}
					}
					setState(966); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==LISTDEF );
				}
				break;
			case TEMPLATE:
				{
				setState(969); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(968);
					template();
					}
					}
					setState(971); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==TEMPLATE );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(976); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(975);
				utilities();
				}
				}
				setState(978); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1210)) & ~0x3f) == 0 && ((1L << (_la - 1210)) & ((1L << (MODIFY - 1210)) | (1L << (QUIESCE - 1210)) | (1L << (REBUILD - 1210)) | (1L << (RUNSTATS - 1210)) | (1L << (LOAD_DATA - 1210)) | (1L << (EXEC - 1210)) | (1L << (UTIL_REORG - 1210)))) != 0) || _la==UTIL_COPY );
			setState(980);
			match(UTIL_SIMPLEQUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilitiesContext extends ParserRuleContext {
		public ReorgContext reorg() {
			return getRuleContext(ReorgContext.class,0);
		}
		public ImageCopyContext imageCopy() {
			return getRuleContext(ImageCopyContext.class,0);
		}
		public ModifyRecoveryContext modifyRecovery() {
			return getRuleContext(ModifyRecoveryContext.class,0);
		}
		public LoadContext load() {
			return getRuleContext(LoadContext.class,0);
		}
		public ExecContext exec() {
			return getRuleContext(ExecContext.class,0);
		}
		public RunStatsContext runStats() {
			return getRuleContext(RunStatsContext.class,0);
		}
		public QuiesceContext quiesce() {
			return getRuleContext(QuiesceContext.class,0);
		}
		public RebuildIndexContext rebuildIndex() {
			return getRuleContext(RebuildIndexContext.class,0);
		}
		public UtilitiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilities; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterUtilities(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitUtilities(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitUtilities(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilitiesContext utilities() throws RecognitionException {
		UtilitiesContext _localctx = new UtilitiesContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_utilities);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(990);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UTIL_REORG:
				{
				setState(982);
				reorg();
				}
				break;
			case UTIL_COPY:
				{
				setState(983);
				imageCopy();
				}
				break;
			case MODIFY:
				{
				setState(984);
				modifyRecovery();
				}
				break;
			case LOAD_DATA:
				{
				setState(985);
				load();
				}
				break;
			case EXEC:
				{
				setState(986);
				exec();
				}
				break;
			case RUNSTATS:
				{
				setState(987);
				runStats();
				}
				break;
			case QUIESCE:
				{
				setState(988);
				quiesce();
				}
				break;
			case REBUILD:
				{
				setState(989);
				rebuildIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReorgContext extends ParserRuleContext {
		public TerminalNode UTIL_REORG() { return getToken(DB2zPLSQLParser.UTIL_REORG, 0); }
		public TerminalNode UTIL_TABLESPACE() { return getToken(DB2zPLSQLParser.UTIL_TABLESPACE, 0); }
		public TerminalNode UTIL_LOG() { return getToken(DB2zPLSQLParser.UTIL_LOG, 0); }
		public TerminalNode NOSYSREC() { return getToken(DB2zPLSQLParser.NOSYSREC, 0); }
		public TerminalNode SORTDEVT() { return getToken(DB2zPLSQLParser.SORTDEVT, 0); }
		public TerminalNode SORTNUM() { return getToken(DB2zPLSQLParser.SORTNUM, 0); }
		public TerminalNode SHRLEVEL() { return getToken(DB2zPLSQLParser.SHRLEVEL, 0); }
		public TerminalNode LIST() { return getToken(DB2zPLSQLParser.LIST, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public TerminalNode COPYDDN() { return getToken(DB2zPLSQLParser.COPYDDN, 0); }
		public TerminalNode UNLDDN() { return getToken(DB2zPLSQLParser.UNLDDN, 0); }
		public StatisticsContext statistics() {
			return getRuleContext(StatisticsContext.class,0);
		}
		public TerminalNode SORTKEYS() { return getToken(DB2zPLSQLParser.SORTKEYS, 0); }
		public ReorgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reorg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterReorg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitReorg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitReorg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReorgContext reorg() throws RecognitionException {
		ReorgContext _localctx = new ReorgContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_reorg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(992);
			match(UTIL_REORG);
			setState(993);
			match(UTIL_TABLESPACE);
			setState(994);
			_la = _input.LA(1);
			if ( !(_la==OBJECTNAME || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(995);
			match(UTIL_LOG);
			setState(996);
			match(NOSYSREC);
			setState(998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPYDDN) {
				{
				setState(997);
				match(COPYDDN);
				}
			}

			setState(1001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNLDDN) {
				{
				setState(1000);
				match(UNLDDN);
				}
			}

			setState(1003);
			match(SORTDEVT);
			setState(1004);
			match(SORTNUM);
			setState(1006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATISTICS) {
				{
				setState(1005);
				statistics();
				}
			}

			setState(1008);
			match(SHRLEVEL);
			setState(1010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORTKEYS) {
				{
				setState(1009);
				match(SORTKEYS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImageCopyContext extends ParserRuleContext {
		public TerminalNode UTIL_COPY() { return getToken(DB2zPLSQLParser.UTIL_COPY, 0); }
		public TerminalNode COPYDDN() { return getToken(DB2zPLSQLParser.COPYDDN, 0); }
		public TerminalNode SHRLEVEL() { return getToken(DB2zPLSQLParser.SHRLEVEL, 0); }
		public TerminalNode LIST() { return getToken(DB2zPLSQLParser.LIST, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public TerminalNode UTIL_PARALLEL() { return getToken(DB2zPLSQLParser.UTIL_PARALLEL, 0); }
		public ModifyRecoveryContext modifyRecovery() {
			return getRuleContext(ModifyRecoveryContext.class,0);
		}
		public ImageCopyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_imageCopy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterImageCopy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitImageCopy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitImageCopy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImageCopyContext imageCopy() throws RecognitionException {
		ImageCopyContext _localctx = new ImageCopyContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_imageCopy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1012);
			match(UTIL_COPY);
			setState(1013);
			_la = _input.LA(1);
			if ( !(_la==OBJECTNAME || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1014);
			match(COPYDDN);
			setState(1016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UTIL_PARALLEL) {
				{
				setState(1015);
				match(UTIL_PARALLEL);
				}
			}

			setState(1018);
			match(SHRLEVEL);
			setState(1020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(1019);
				modifyRecovery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyRecoveryContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(DB2zPLSQLParser.MODIFY, 0); }
		public TerminalNode RECOVERY() { return getToken(DB2zPLSQLParser.RECOVERY, 0); }
		public TerminalNode DSNUM() { return getToken(DB2zPLSQLParser.DSNUM, 0); }
		public TerminalNode MODRCV_DELETE() { return getToken(DB2zPLSQLParser.MODRCV_DELETE, 0); }
		public TerminalNode LIST() { return getToken(DB2zPLSQLParser.LIST, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public ModifyRecoveryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyRecovery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterModifyRecovery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitModifyRecovery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitModifyRecovery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyRecoveryContext modifyRecovery() throws RecognitionException {
		ModifyRecoveryContext _localctx = new ModifyRecoveryContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_modifyRecovery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1022);
			match(MODIFY);
			setState(1023);
			match(RECOVERY);
			setState(1024);
			_la = _input.LA(1);
			if ( !(_la==OBJECTNAME || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1025);
			match(DSNUM);
			setState(1026);
			match(MODRCV_DELETE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadContext extends ParserRuleContext {
		public TerminalNode LOAD_DATA() { return getToken(DB2zPLSQLParser.LOAD_DATA, 0); }
		public TerminalNode INCURSOR() { return getToken(DB2zPLSQLParser.INCURSOR, 0); }
		public TerminalNode UTIL_LOG() { return getToken(DB2zPLSQLParser.UTIL_LOG, 0); }
		public TerminalNode SORTKEYS() { return getToken(DB2zPLSQLParser.SORTKEYS, 0); }
		public TerminalNode ENFORCE() { return getToken(DB2zPLSQLParser.ENFORCE, 0); }
		public TerminalNode WORKDDN() { return getToken(DB2zPLSQLParser.WORKDDN, 0); }
		public TerminalNode SORTDEVT() { return getToken(DB2zPLSQLParser.SORTDEVT, 0); }
		public TerminalNode SORTNUM() { return getToken(DB2zPLSQLParser.SORTNUM, 0); }
		public TerminalNode LOAD_INTO() { return getToken(DB2zPLSQLParser.LOAD_INTO, 0); }
		public TerminalNode UTIL_TABLE() { return getToken(DB2zPLSQLParser.UTIL_TABLE, 0); }
		public TerminalNode TABLENAME() { return getToken(DB2zPLSQLParser.TABLENAME, 0); }
		public TerminalNode RESUME() { return getToken(DB2zPLSQLParser.RESUME, 0); }
		public TerminalNode UTIL_REPLACE() { return getToken(DB2zPLSQLParser.UTIL_REPLACE, 0); }
		public TerminalNode COPYDDN() { return getToken(DB2zPLSQLParser.COPYDDN, 0); }
		public TerminalNode NOCOPYPEND() { return getToken(DB2zPLSQLParser.NOCOPYPEND, 0); }
		public TerminalNode NOCHECKPEND() { return getToken(DB2zPLSQLParser.NOCHECKPEND, 0); }
		public List<StatisticsContext> statistics() {
			return getRuleContexts(StatisticsContext.class);
		}
		public StatisticsContext statistics(int i) {
			return getRuleContext(StatisticsContext.class,i);
		}
		public LoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterLoad(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitLoad(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitLoad(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadContext load() throws RecognitionException {
		LoadContext _localctx = new LoadContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_load);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1028);
			match(LOAD_DATA);
			setState(1029);
			match(INCURSOR);
			setState(1030);
			_la = _input.LA(1);
			if ( !(_la==RESUME || _la==UTIL_REPLACE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPYDDN) {
				{
				setState(1031);
				match(COPYDDN);
				}
			}

			setState(1035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOCOPYPEND) {
				{
				setState(1034);
				match(NOCOPYPEND);
				}
			}

			setState(1038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOCHECKPEND) {
				{
				setState(1037);
				match(NOCHECKPEND);
				}
			}

			setState(1040);
			match(UTIL_LOG);
			setState(1041);
			match(SORTKEYS);
			setState(1042);
			match(ENFORCE);
			setState(1044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATISTICS) {
				{
				setState(1043);
				statistics();
				}
			}

			setState(1046);
			match(WORKDDN);
			setState(1047);
			match(SORTDEVT);
			setState(1048);
			match(SORTNUM);
			setState(1049);
			match(LOAD_INTO);
			setState(1050);
			match(UTIL_TABLE);
			setState(1051);
			match(TABLENAME);
			setState(1053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATISTICS) {
				{
				setState(1052);
				statistics();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecContext extends ParserRuleContext {
		public TerminalNode EXEC() { return getToken(DB2zPLSQLParser.EXEC, 0); }
		public ExecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterExec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitExec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitExec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecContext exec() throws RecognitionException {
		ExecContext _localctx = new ExecContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_exec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1055);
			match(EXEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RunStatsContext extends ParserRuleContext {
		public TerminalNode RUNSTATS() { return getToken(DB2zPLSQLParser.RUNSTATS, 0); }
		public TerminalNode UTIL_TABLESPACE() { return getToken(DB2zPLSQLParser.UTIL_TABLESPACE, 0); }
		public TerminalNode INVALIDATECACHE() { return getToken(DB2zPLSQLParser.INVALIDATECACHE, 0); }
		public TerminalNode REPORT() { return getToken(DB2zPLSQLParser.REPORT, 0); }
		public TerminalNode STATS_UPDATE() { return getToken(DB2zPLSQLParser.STATS_UPDATE, 0); }
		public TerminalNode LIST() { return getToken(DB2zPLSQLParser.LIST, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public RunStatsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runStats; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRunStats(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRunStats(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRunStats(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RunStatsContext runStats() throws RecognitionException {
		RunStatsContext _localctx = new RunStatsContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_runStats);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1057);
			match(RUNSTATS);
			setState(1058);
			match(UTIL_TABLESPACE);
			setState(1059);
			_la = _input.LA(1);
			if ( !(_la==OBJECTNAME || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1060);
			match(INVALIDATECACHE);
			setState(1061);
			match(REPORT);
			setState(1062);
			match(STATS_UPDATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RebuildIndexContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(DB2zPLSQLParser.REBUILD, 0); }
		public StatIndexSpecContext statIndexSpec() {
			return getRuleContext(StatIndexSpecContext.class,0);
		}
		public TerminalNode SORTDEVT() { return getToken(DB2zPLSQLParser.SORTDEVT, 0); }
		public TerminalNode SORTNUM() { return getToken(DB2zPLSQLParser.SORTNUM, 0); }
		public TerminalNode SHRLEVEL() { return getToken(DB2zPLSQLParser.SHRLEVEL, 0); }
		public StatisticsContext statistics() {
			return getRuleContext(StatisticsContext.class,0);
		}
		public TerminalNode STATS_UPDATE() { return getToken(DB2zPLSQLParser.STATS_UPDATE, 0); }
		public TerminalNode UTIL_PARALLEL() { return getToken(DB2zPLSQLParser.UTIL_PARALLEL, 0); }
		public RebuildIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rebuildIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterRebuildIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitRebuildIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitRebuildIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RebuildIndexContext rebuildIndex() throws RecognitionException {
		RebuildIndexContext _localctx = new RebuildIndexContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_rebuildIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1064);
			match(REBUILD);
			setState(1065);
			statIndexSpec();
			setState(1067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SHRLEVEL) {
				{
				setState(1066);
				match(SHRLEVEL);
				}
			}

			setState(1069);
			match(SORTDEVT);
			setState(1070);
			match(SORTNUM);
			setState(1072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATISTICS) {
				{
				setState(1071);
				statistics();
				}
			}

			setState(1075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATS_UPDATE) {
				{
				setState(1074);
				match(STATS_UPDATE);
				}
			}

			setState(1078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UTIL_PARALLEL) {
				{
				setState(1077);
				match(UTIL_PARALLEL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuiesceContext extends ParserRuleContext {
		public TerminalNode QUIESCE() { return getToken(DB2zPLSQLParser.QUIESCE, 0); }
		public TerminalNode LIST() { return getToken(DB2zPLSQLParser.LIST, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public QuiesceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quiesce; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterQuiesce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitQuiesce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitQuiesce(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuiesceContext quiesce() throws RecognitionException {
		QuiesceContext _localctx = new QuiesceContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_quiesce);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1080);
			match(QUIESCE);
			setState(1081);
			_la = _input.LA(1);
			if ( !(_la==OBJECTNAME || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatisticsContext extends ParserRuleContext {
		public TerminalNode STATISTICS() { return getToken(DB2zPLSQLParser.STATISTICS, 0); }
		public StatTableSpecContext statTableSpec() {
			return getRuleContext(StatTableSpecContext.class,0);
		}
		public StatIndexSpecContext statIndexSpec() {
			return getRuleContext(StatIndexSpecContext.class,0);
		}
		public CorrStatSpecContext corrStatSpec() {
			return getRuleContext(CorrStatSpecContext.class,0);
		}
		public StatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatisticsContext statistics() throws RecognitionException {
		StatisticsContext _localctx = new StatisticsContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1083);
			match(STATISTICS);
			setState(1085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UTIL_TABLE) {
				{
				setState(1084);
				statTableSpec();
				}
			}

			setState(1088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UTIL_INDEX || _la==INDEXSPACE) {
				{
				setState(1087);
				statIndexSpec();
				}
			}

			setState(1091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEYCARD || _la==FREQVAL) {
				{
				setState(1090);
				corrStatSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatTableSpecContext extends ParserRuleContext {
		public TerminalNode UTIL_TABLE() { return getToken(DB2zPLSQLParser.UTIL_TABLE, 0); }
		public TerminalNode ALL_ITEMS() { return getToken(DB2zPLSQLParser.ALL_ITEMS, 0); }
		public StatTableSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statTableSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterStatTableSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitStatTableSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitStatTableSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatTableSpecContext statTableSpec() throws RecognitionException {
		StatTableSpecContext _localctx = new StatTableSpecContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_statTableSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1093);
			match(UTIL_TABLE);
			setState(1094);
			match(ALL_ITEMS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatIndexSpecContext extends ParserRuleContext {
		public TerminalNode UTIL_INDEX() { return getToken(DB2zPLSQLParser.UTIL_INDEX, 0); }
		public TerminalNode ALL_ITEMS() { return getToken(DB2zPLSQLParser.ALL_ITEMS, 0); }
		public TerminalNode LIST() { return getToken(DB2zPLSQLParser.LIST, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public TerminalNode INDEXSPACE() { return getToken(DB2zPLSQLParser.INDEXSPACE, 0); }
		public StatIndexSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statIndexSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterStatIndexSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitStatIndexSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitStatIndexSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatIndexSpecContext statIndexSpec() throws RecognitionException {
		StatIndexSpecContext _localctx = new StatIndexSpecContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_statIndexSpec);
		int _la;
		try {
			setState(1100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UTIL_INDEX:
				enterOuterAlt(_localctx, 1);
				{
				setState(1096);
				match(UTIL_INDEX);
				setState(1097);
				_la = _input.LA(1);
				if ( !(((((_la - 1225)) & ~0x3f) == 0 && ((1L << (_la - 1225)) & ((1L << (OBJECTNAME - 1225)) | (1L << (ALL_ITEMS - 1225)) | (1L << (LIST - 1225)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case INDEXSPACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1098);
				match(INDEXSPACE);
				setState(1099);
				_la = _input.LA(1);
				if ( !(((((_la - 1225)) & ~0x3f) == 0 && ((1L << (_la - 1225)) & ((1L << (OBJECTNAME - 1225)) | (1L << (ALL_ITEMS - 1225)) | (1L << (LIST - 1225)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrStatSpecContext extends ParserRuleContext {
		public TerminalNode FREQVAL() { return getToken(DB2zPLSQLParser.FREQVAL, 0); }
		public TerminalNode NUMCOLS() { return getToken(DB2zPLSQLParser.NUMCOLS, 0); }
		public TerminalNode STATS_COUNT() { return getToken(DB2zPLSQLParser.STATS_COUNT, 0); }
		public TerminalNode KEYCARD() { return getToken(DB2zPLSQLParser.KEYCARD, 0); }
		public CorrStatSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corrStatSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterCorrStatSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitCorrStatSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitCorrStatSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CorrStatSpecContext corrStatSpec() throws RecognitionException {
		CorrStatSpecContext _localctx = new CorrStatSpecContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_corrStatSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEYCARD) {
				{
				setState(1102);
				match(KEYCARD);
				}
			}

			setState(1105);
			match(FREQVAL);
			setState(1106);
			match(NUMCOLS);
			setState(1107);
			match(STATS_COUNT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListdefContext extends ParserRuleContext {
		public TerminalNode LISTDEF() { return getToken(DB2zPLSQLParser.LISTDEF, 0); }
		public List<IncludeTablespaceContext> includeTablespace() {
			return getRuleContexts(IncludeTablespaceContext.class);
		}
		public IncludeTablespaceContext includeTablespace(int i) {
			return getRuleContext(IncludeTablespaceContext.class,i);
		}
		public List<IncludeIndexContext> includeIndex() {
			return getRuleContexts(IncludeIndexContext.class);
		}
		public IncludeIndexContext includeIndex(int i) {
			return getRuleContext(IncludeIndexContext.class,i);
		}
		public List<IncludeIndexspaceContext> includeIndexspace() {
			return getRuleContexts(IncludeIndexspaceContext.class);
		}
		public IncludeIndexspaceContext includeIndexspace(int i) {
			return getRuleContext(IncludeIndexspaceContext.class,i);
		}
		public ListdefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listdef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterListdef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitListdef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitListdef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListdefContext listdef() throws RecognitionException {
		ListdefContext _localctx = new ListdefContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_listdef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1109);
			match(LISTDEF);
			setState(1113); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(1113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(1110);
					includeTablespace();
					}
					break;
				case 2:
					{
					setState(1111);
					includeIndex();
					}
					break;
				case 3:
					{
					setState(1112);
					includeIndexspace();
					}
					break;
				}
				}
				setState(1115); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==UTIL_INCLUDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeTablespaceContext extends ParserRuleContext {
		public TerminalNode UTIL_INCLUDE() { return getToken(DB2zPLSQLParser.UTIL_INCLUDE, 0); }
		public TerminalNode UTIL_TABLESPACE() { return getToken(DB2zPLSQLParser.UTIL_TABLESPACE, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public IncludeTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterIncludeTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitIncludeTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitIncludeTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeTablespaceContext includeTablespace() throws RecognitionException {
		IncludeTablespaceContext _localctx = new IncludeTablespaceContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_includeTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1117);
			match(UTIL_INCLUDE);
			setState(1118);
			match(UTIL_TABLESPACE);
			setState(1119);
			match(OBJECTNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeIndexspaceContext extends ParserRuleContext {
		public TerminalNode UTIL_INCLUDE() { return getToken(DB2zPLSQLParser.UTIL_INCLUDE, 0); }
		public TerminalNode INDEXSPACE() { return getToken(DB2zPLSQLParser.INDEXSPACE, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public IncludeIndexspaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeIndexspace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterIncludeIndexspace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitIncludeIndexspace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitIncludeIndexspace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeIndexspaceContext includeIndexspace() throws RecognitionException {
		IncludeIndexspaceContext _localctx = new IncludeIndexspaceContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_includeIndexspace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1121);
			match(UTIL_INCLUDE);
			setState(1122);
			match(INDEXSPACE);
			setState(1123);
			match(OBJECTNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeIndexContext extends ParserRuleContext {
		public TerminalNode UTIL_INCLUDE() { return getToken(DB2zPLSQLParser.UTIL_INCLUDE, 0); }
		public TerminalNode UTIL_INDEX() { return getToken(DB2zPLSQLParser.UTIL_INDEX, 0); }
		public TerminalNode OBJECTNAME() { return getToken(DB2zPLSQLParser.OBJECTNAME, 0); }
		public IncludeIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includeIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterIncludeIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitIncludeIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitIncludeIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeIndexContext includeIndex() throws RecognitionException {
		IncludeIndexContext _localctx = new IncludeIndexContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_includeIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1125);
			match(UTIL_INCLUDE);
			setState(1126);
			match(UTIL_INDEX);
			setState(1127);
			match(OBJECTNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TemplateContext extends ParserRuleContext {
		public TerminalNode TEMPLATE() { return getToken(DB2zPLSQLParser.TEMPLATE, 0); }
		public TerminalNode UTIL_DSN() { return getToken(DB2zPLSQLParser.UTIL_DSN, 0); }
		public TerminalNode UTIL_LPAREN() { return getToken(DB2zPLSQLParser.UTIL_LPAREN, 0); }
		public TerminalNode DATASETNAME() { return getToken(DB2zPLSQLParser.DATASETNAME, 0); }
		public TerminalNode UTIL_RPAREN() { return getToken(DB2zPLSQLParser.UTIL_RPAREN, 0); }
		public TerminalNode RETPD() { return getToken(DB2zPLSQLParser.RETPD, 0); }
		public TerminalNode UNIT() { return getToken(DB2zPLSQLParser.UNIT, 0); }
		public TerminalNode VOLCNT() { return getToken(DB2zPLSQLParser.VOLCNT, 0); }
		public TerminalNode TMPL_STORCLAS() { return getToken(DB2zPLSQLParser.TMPL_STORCLAS, 0); }
		public TerminalNode TEMPLATE_SPACE() { return getToken(DB2zPLSQLParser.TEMPLATE_SPACE, 0); }
		public TerminalNode DISP() { return getToken(DB2zPLSQLParser.DISP, 0); }
		public TerminalNode STACK() { return getToken(DB2zPLSQLParser.STACK, 0); }
		public ListdefContext listdef() {
			return getRuleContext(ListdefContext.class,0);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_template; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterTemplate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitTemplate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitTemplate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TemplateContext template() throws RecognitionException {
		TemplateContext _localctx = new TemplateContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_template);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1129);
			match(TEMPLATE);
			setState(1130);
			match(UTIL_DSN);
			setState(1131);
			match(UTIL_LPAREN);
			setState(1132);
			match(DATASETNAME);
			setState(1133);
			match(UTIL_RPAREN);
			setState(1135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIT) {
				{
				setState(1134);
				match(UNIT);
				}
			}

			setState(1138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VOLCNT) {
				{
				setState(1137);
				match(VOLCNT);
				}
			}

			setState(1141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TMPL_STORCLAS) {
				{
				setState(1140);
				match(TMPL_STORCLAS);
				}
			}

			setState(1143);
			match(RETPD);
			setState(1145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPLATE_SPACE) {
				{
				setState(1144);
				match(TEMPLATE_SPACE);
				}
			}

			setState(1148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISP) {
				{
				setState(1147);
				match(DISP);
				}
			}

			setState(1151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STACK) {
				{
				setState(1150);
				match(STACK);
				}
			}

			setState(1154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LISTDEF) {
				{
				setState(1153);
				listdef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnCodeContext extends ParserRuleContext {
		public TerminalNode UTIL_RETURNCODE() { return getToken(DB2zPLSQLParser.UTIL_RETURNCODE, 0); }
		public ReturnCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).enterReturnCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DB2zPLSQLParserListener ) ((DB2zPLSQLParserListener)listener).exitReturnCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DB2zPLSQLParserVisitor ) return ((DB2zPLSQLParserVisitor<? extends T>)visitor).visitReturnCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnCodeContext returnCode() throws RecognitionException {
		ReturnCodeContext _localctx = new ReturnCodeContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_returnCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1156);
			match(UTIL_RETURNCODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0504\u0489\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\3\2\3\2\3\2\7\2\u0134\n\2\f\2\16\2\u0137\13\2"+
		"\3\2\5\2\u013a\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0144\n\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\5\3\u014c\n\3\3\4\3\4\3\5\5\5\u0151\n\5\3\5\3\5\5\5"+
		"\u0155\n\5\3\5\5\5\u0158\n\5\3\6\3\6\3\6\5\6\u015d\n\6\6\6\u015f\n\6\r"+
		"\6\16\6\u0160\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01b2\n\7\3\b\3"+
		"\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r"+
		"\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22"+
		"\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\27"+
		"\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33"+
		"\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3 "+
		"\3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'"+
		"\3(\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3-\3.\3.\3.\3/\3/"+
		"\3/\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3\63\3\64\3"+
		"\64\3\64\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\38\38\38\39\39\3"+
		"9\3:\3:\3:\3;\3;\3;\3<\3<\3<\3=\3=\3=\3>\3>\3>\3?\3?\3?\3@\3@\3@\3A\3"+
		"A\3A\3B\3B\3B\3C\3C\3C\3D\3D\3D\3E\3E\3E\3F\3F\3F\3G\3G\3G\3H\3H\3H\3"+
		"I\3I\3I\3J\3J\3J\3K\3K\3K\3L\3L\3L\3M\3M\3M\3N\3N\3N\3O\3O\3O\3P\3P\3"+
		"P\3Q\3Q\3Q\3R\3R\3R\3S\3S\3S\3T\3T\3T\3U\3U\3U\3V\3V\3V\3W\3W\3W\3W\5"+
		"W\u02a5\nW\6W\u02a7\nW\rW\16W\u02a8\3X\3X\5X\u02ad\nX\3Y\3Y\3Y\3Z\3Z\3"+
		"Z\3[\3[\3[\5[\u02b8\n[\6[\u02ba\n[\r[\16[\u02bb\3\\\3\\\3\\\3\\\3\\\5"+
		"\\\u02c3\n\\\3]\3]\3]\3^\3^\3^\3_\3_\3_\3`\3`\3`\3a\3a\3a\3b\3b\3b\5b"+
		"\u02d7\nb\6b\u02d9\nb\rb\16b\u02da\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3"+
		"c\5c\u02e9\nc\3d\3d\7d\u02ed\nd\fd\16d\u02f0\13d\3d\3d\7d\u02f4\nd\fd"+
		"\16d\u02f7\13d\3d\3d\3e\3e\3f\3f\3f\3g\3g\3g\3h\3h\3h\3i\3i\3i\3j\3j\3"+
		"j\5j\u030c\nj\6j\u030e\nj\rj\16j\u030f\3k\3k\3k\5k\u0315\nk\3k\3k\5k\u0319"+
		"\nk\6k\u031b\nk\rk\16k\u031c\3l\3l\3l\6l\u0322\nl\rl\16l\u0323\3l\6l\u0327"+
		"\nl\rl\16l\u0328\3l\6l\u032c\nl\rl\16l\u032d\3l\7l\u0331\nl\fl\16l\u0334"+
		"\13l\3l\3l\3m\3m\6m\u033a\nm\rm\16m\u033b\3m\5m\u033f\nm\3m\6m\u0342\n"+
		"m\rm\16m\u0343\5m\u0346\nm\3m\7m\u0349\nm\fm\16m\u034c\13m\3m\3m\3n\3"+
		"n\6n\u0352\nn\rn\16n\u0353\3n\3n\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3"+
		"p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0378\n"+
		"p\3q\3q\3r\3r\3s\3s\3s\5s\u0381\ns\3t\3t\3t\3t\3u\3u\3v\3v\3w\3w\3x\3"+
		"x\3y\3y\3z\3z\3{\3{\3|\3|\5|\u0397\n|\3|\3|\5|\u039b\n|\5|\u039d\n|\3"+
		"}\5}\u03a0\n}\3}\3}\5}\u03a4\n}\3}\5}\u03a7\n}\3~\3~\5~\u03ab\n~\3\177"+
		"\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u03bd\n\u0081"+
		"\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085\6\u0085"+
		"\u03c7\n\u0085\r\u0085\16\u0085\u03c8\3\u0085\6\u0085\u03cc\n\u0085\r"+
		"\u0085\16\u0085\u03cd\5\u0085\u03d0\n\u0085\3\u0085\6\u0085\u03d3\n\u0085"+
		"\r\u0085\16\u0085\u03d4\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u03e1\n\u0086\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u03e9\n\u0087\3\u0087\5\u0087"+
		"\u03ec\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u03f1\n\u0087\3\u0087\3"+
		"\u0087\5\u0087\u03f5\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u03fb"+
		"\n\u0088\3\u0088\3\u0088\5\u0088\u03ff\n\u0088\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u040b"+
		"\n\u008a\3\u008a\5\u008a\u040e\n\u008a\3\u008a\5\u008a\u0411\n\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0417\n\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0420\n\u008a\3\u008b\3"+
		"\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d"+
		"\3\u008d\3\u008d\5\u008d\u042e\n\u008d\3\u008d\3\u008d\3\u008d\5\u008d"+
		"\u0433\n\u008d\3\u008d\5\u008d\u0436\n\u008d\3\u008d\5\u008d\u0439\n\u008d"+
		"\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\5\u008f\u0440\n\u008f\3\u008f"+
		"\5\u008f\u0443\n\u008f\3\u008f\5\u008f\u0446\n\u008f\3\u0090\3\u0090\3"+
		"\u0090\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u044f\n\u0091\3\u0092\5"+
		"\u0092\u0452\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3"+
		"\u0093\3\u0093\6\u0093\u045c\n\u0093\r\u0093\16\u0093\u045d\3\u0094\3"+
		"\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0472\n\u0097\3\u0097\5\u0097\u0475\n\u0097\3\u0097\5\u0097\u0478\n\u0097"+
		"\3\u0097\3\u0097\5\u0097\u047c\n\u0097\3\u0097\5\u0097\u047f\n\u0097\3"+
		"\u0097\5\u0097\u0482\n\u0097\3\u0097\5\u0097\u0485\n\u0097\3\u0098\3\u0098"+
		"\3\u0098\2\2\u0099\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60"+
		"\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086"+
		"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e"+
		"\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6"+
		"\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce"+
		"\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6"+
		"\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe"+
		"\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116"+
		"\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e"+
		"\2\t\3\2\u0440\u0441\3\2\u03f3\u03f4\3\2\u0499\u04a1\5\2\u048e\u048e\u0496"+
		"\u0496\u0498\u0498\4\2\u04cb\u04cb\u04fc\u04fc\3\2\u04e3\u04e4\5\2\u04cb"+
		"\u04cb\u04dd\u04dd\u04fc\u04fc\2\u04ac\2\u0139\3\2\2\2\4\u013b\3\2\2\2"+
		"\6\u014d\3\2\2\2\b\u0157\3\2\2\2\n\u0159\3\2\2\2\f\u01b1\3\2\2\2\16\u01b3"+
		"\3\2\2\2\20\u01b6\3\2\2\2\22\u01b9\3\2\2\2\24\u01bc\3\2\2\2\26\u01bf\3"+
		"\2\2\2\30\u01c2\3\2\2\2\32\u01c5\3\2\2\2\34\u01c8\3\2\2\2\36\u01cb\3\2"+
		"\2\2 \u01ce\3\2\2\2\"\u01d1\3\2\2\2$\u01d4\3\2\2\2&\u01d7\3\2\2\2(\u01da"+
		"\3\2\2\2*\u01dd\3\2\2\2,\u01e0\3\2\2\2.\u01e3\3\2\2\2\60\u01e6\3\2\2\2"+
		"\62\u01e9\3\2\2\2\64\u01ec\3\2\2\2\66\u01ef\3\2\2\28\u01f2\3\2\2\2:\u01f5"+
		"\3\2\2\2<\u01f8\3\2\2\2>\u01fb\3\2\2\2@\u01fe\3\2\2\2B\u0201\3\2\2\2D"+
		"\u0204\3\2\2\2F\u0207\3\2\2\2H\u020a\3\2\2\2J\u020d\3\2\2\2L\u0210\3\2"+
		"\2\2N\u0213\3\2\2\2P\u0216\3\2\2\2R\u0219\3\2\2\2T\u021c\3\2\2\2V\u021f"+
		"\3\2\2\2X\u0222\3\2\2\2Z\u0225\3\2\2\2\\\u0228\3\2\2\2^\u022b\3\2\2\2"+
		"`\u022e\3\2\2\2b\u0231\3\2\2\2d\u0234\3\2\2\2f\u0237\3\2\2\2h\u023a\3"+
		"\2\2\2j\u023d\3\2\2\2l\u0240\3\2\2\2n\u0243\3\2\2\2p\u0246\3\2\2\2r\u0249"+
		"\3\2\2\2t\u024c\3\2\2\2v\u024f\3\2\2\2x\u0252\3\2\2\2z\u0255\3\2\2\2|"+
		"\u0258\3\2\2\2~\u025b\3\2\2\2\u0080\u025e\3\2\2\2\u0082\u0261\3\2\2\2"+
		"\u0084\u0264\3\2\2\2\u0086\u0267\3\2\2\2\u0088\u026a\3\2\2\2\u008a\u026d"+
		"\3\2\2\2\u008c\u0270\3\2\2\2\u008e\u0273\3\2\2\2\u0090\u0276\3\2\2\2\u0092"+
		"\u0279\3\2\2\2\u0094\u027c\3\2\2\2\u0096\u027f\3\2\2\2\u0098\u0282\3\2"+
		"\2\2\u009a\u0285\3\2\2\2\u009c\u0288\3\2\2\2\u009e\u028b\3\2\2\2\u00a0"+
		"\u028e\3\2\2\2\u00a2\u0291\3\2\2\2\u00a4\u0294\3\2\2\2\u00a6\u0297\3\2"+
		"\2\2\u00a8\u029a\3\2\2\2\u00aa\u029d\3\2\2\2\u00ac\u02a0\3\2\2\2\u00ae"+
		"\u02ac\3\2\2\2\u00b0\u02ae\3\2\2\2\u00b2\u02b1\3\2\2\2\u00b4\u02b4\3\2"+
		"\2\2\u00b6\u02c2\3\2\2\2\u00b8\u02c4\3\2\2\2\u00ba\u02c7\3\2\2\2\u00bc"+
		"\u02ca\3\2\2\2\u00be\u02cd\3\2\2\2\u00c0\u02d0\3\2\2\2\u00c2\u02d3\3\2"+
		"\2\2\u00c4\u02e8\3\2\2\2\u00c6\u02ea\3\2\2\2\u00c8\u02fa\3\2\2\2\u00ca"+
		"\u02fc\3\2\2\2\u00cc\u02ff\3\2\2\2\u00ce\u0302\3\2\2\2\u00d0\u0305\3\2"+
		"\2\2\u00d2\u0308\3\2\2\2\u00d4\u0311\3\2\2\2\u00d6\u031e\3\2\2\2\u00d8"+
		"\u0337\3\2\2\2\u00da\u034f\3\2\2\2\u00dc\u0357\3\2\2\2\u00de\u0359\3\2"+
		"\2\2\u00e0\u0379\3\2\2\2\u00e2\u037b\3\2\2\2\u00e4\u0380\3\2\2\2\u00e6"+
		"\u0382\3\2\2\2\u00e8\u0386\3\2\2\2\u00ea\u0388\3\2\2\2\u00ec\u038a\3\2"+
		"\2\2\u00ee\u038c\3\2\2\2\u00f0\u038e\3\2\2\2\u00f2\u0390\3\2\2\2\u00f4"+
		"\u0392\3\2\2\2\u00f6\u039c\3\2\2\2\u00f8\u03a6\3\2\2\2\u00fa\u03aa\3\2"+
		"\2\2\u00fc\u03ac\3\2\2\2\u00fe\u03ae\3\2\2\2\u0100\u03b0\3\2\2\2\u0102"+
		"\u03be\3\2\2\2\u0104\u03c0\3\2\2\2\u0106\u03c2\3\2\2\2\u0108\u03c4\3\2"+
		"\2\2\u010a\u03e0\3\2\2\2\u010c\u03e2\3\2\2\2\u010e\u03f6\3\2\2\2\u0110"+
		"\u0400\3\2\2\2\u0112\u0406\3\2\2\2\u0114\u0421\3\2\2\2\u0116\u0423\3\2"+
		"\2\2\u0118\u042a\3\2\2\2\u011a\u043a\3\2\2\2\u011c\u043d\3\2\2\2\u011e"+
		"\u0447\3\2\2\2\u0120\u044e\3\2\2\2\u0122\u0451\3\2\2\2\u0124\u0457\3\2"+
		"\2\2\u0126\u045f\3\2\2\2\u0128\u0463\3\2\2\2\u012a\u0467\3\2\2\2\u012c"+
		"\u046b\3\2\2\2\u012e\u0486\3\2\2\2\u0130\u0134\5\4\3\2\u0131\u0134\5\u00de"+
		"p\2\u0132\u0134\5\u0100\u0081\2\u0133\u0130\3\2\2\2\u0133\u0131\3\2\2"+
		"\2\u0133\u0132\3\2\2\2\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136"+
		"\3\2\2\2\u0136\u013a\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u013a\7\2\2\3\u0139"+
		"\u0135\3\2\2\2\u0139\u0138\3\2\2\2\u013a\3\3\2\2\2\u013b\u013c\7\3\2\2"+
		"\u013c\u013d\7\u03f1\2\2\u013d\u0143\7\u03f7\2\2\u013e\u0144\5\n\6\2\u013f"+
		"\u0144\5\u00d2j\2\u0140\u0144\5\u00d4k\2\u0141\u0144\5\u00acW\2\u0142"+
		"\u0144\5\u00c2b\2\u0143\u013e\3\2\2\2\u0143\u013f\3\2\2\2\u0143\u0140"+
		"\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145"+
		"\u0146\7\u03f7\2\2\u0146\u0147\7\u03fc\2\2\u0147\u0148\5\b\5\2\u0148\u0149"+
		"\7\u03f2\2\2\u0149\u014b\5\6\4\2\u014a\u014c\7\36\2\2\u014b\u014a\3\2"+
		"\2\2\u014b\u014c\3\2\2\2\u014c\5\3\2\2\2\u014d\u014e\7\u03ec\2\2\u014e"+
		"\7\3\2\2\2\u014f\u0151\7\u03f7\2\2\u0150\u014f\3\2\2\2\u0150\u0151\3\2"+
		"\2\2\u0151\u0152\3\2\2\2\u0152\u0154\7\u03ef\2\2\u0153\u0155\7\u03f7\2"+
		"\2\u0154\u0153\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0158"+
		"\7\u03fa\2\2\u0157\u0150\3\2\2\2\u0157\u0156\3\2\2\2\u0158\t\3\2\2\2\u0159"+
		"\u015e\7\u040c\2\2\u015a\u015c\5\f\7\2\u015b\u015d\5\u00dco\2\u015c\u015b"+
		"\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015f\3\2\2\2\u015e\u015a\3\2\2\2\u015f"+
		"\u0160\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\13\3\2\2"+
		"\2\u0162\u01b2\5\16\b\2\u0163\u01b2\5\20\t\2\u0164\u01b2\5\22\n\2\u0165"+
		"\u01b2\5\24\13\2\u0166\u01b2\5\26\f\2\u0167\u01b2\5\30\r\2\u0168\u01b2"+
		"\5\32\16\2\u0169\u01b2\5\34\17\2\u016a\u01b2\5\36\20\2\u016b\u01b2\5 "+
		"\21\2\u016c\u01b2\5\"\22\2\u016d\u01b2\5$\23\2\u016e\u01b2\5&\24\2\u016f"+
		"\u01b2\5(\25\2\u0170\u01b2\5*\26\2\u0171\u01b2\5,\27\2\u0172\u01b2\5."+
		"\30\2\u0173\u01b2\5\60\31\2\u0174\u01b2\5\62\32\2\u0175\u01b2\5\64\33"+
		"\2\u0176\u01b2\5\66\34\2\u0177\u01b2\58\35\2\u0178\u01b2\5:\36\2\u0179"+
		"\u01b2\5<\37\2\u017a\u01b2\5> \2\u017b\u01b2\5@!\2\u017c\u01b2\5B\"\2"+
		"\u017d\u01b2\5D#\2\u017e\u01b2\5F$\2\u017f\u01b2\5H%\2\u0180\u01b2\5J"+
		"&\2\u0181\u01b2\5L\'\2\u0182\u01b2\5N(\2\u0183\u01b2\5P)\2\u0184\u01b2"+
		"\5R*\2\u0185\u01b2\5T+\2\u0186\u01b2\5V,\2\u0187\u01b2\5X-\2\u0188\u01b2"+
		"\5Z.\2\u0189\u01b2\5\\/\2\u018a\u01b2\5^\60\2\u018b\u01b2\5`\61\2\u018c"+
		"\u01b2\5b\62\2\u018d\u01b2\5d\63\2\u018e\u01b2\5f\64\2\u018f\u01b2\5h"+
		"\65\2\u0190\u01b2\5j\66\2\u0191\u01b2\5l\67\2\u0192\u01b2\5n8\2\u0193"+
		"\u01b2\5p9\2\u0194\u01b2\5r:\2\u0195\u01b2\5t;\2\u0196\u01b2\5v<\2\u0197"+
		"\u01b2\5x=\2\u0198\u01b2\5z>\2\u0199\u01b2\5|?\2\u019a\u01b2\5~@\2\u019b"+
		"\u01b2\5\u0080A\2\u019c\u01b2\5\u0082B\2\u019d\u01b2\5\u0084C\2\u019e"+
		"\u01b2\5\u0086D\2\u019f\u01b2\5\u0088E\2\u01a0\u01b2\5\u008aF\2\u01a1"+
		"\u01b2\5\u008cG\2\u01a2\u01b2\5\u008eH\2\u01a3\u01b2\5\u0090I\2\u01a4"+
		"\u01b2\5\u0092J\2\u01a5\u01b2\5\u0094K\2\u01a6\u01b2\5\u0096L\2\u01a7"+
		"\u01b2\5\u0098M\2\u01a8\u01b2\5\u009aN\2\u01a9\u01b2\5\u009cO\2\u01aa"+
		"\u01b2\5\u009eP\2\u01ab\u01b2\5\u00a0Q\2\u01ac\u01b2\5\u00a2R\2\u01ad"+
		"\u01b2\5\u00a4S\2\u01ae\u01b2\5\u00a6T\2\u01af\u01b2\5\u00a8U\2\u01b0"+
		"\u01b2\5\u00aaV\2\u01b1\u0162\3\2\2\2\u01b1\u0163\3\2\2\2\u01b1\u0164"+
		"\3\2\2\2\u01b1\u0165\3\2\2\2\u01b1\u0166\3\2\2\2\u01b1\u0167\3\2\2\2\u01b1"+
		"\u0168\3\2\2\2\u01b1\u0169\3\2\2\2\u01b1\u016a\3\2\2\2\u01b1\u016b\3\2"+
		"\2\2\u01b1\u016c\3\2\2\2\u01b1\u016d\3\2\2\2\u01b1\u016e\3\2\2\2\u01b1"+
		"\u016f\3\2\2\2\u01b1\u0170\3\2\2\2\u01b1\u0171\3\2\2\2\u01b1\u0172\3\2"+
		"\2\2\u01b1\u0173\3\2\2\2\u01b1\u0174\3\2\2\2\u01b1\u0175\3\2\2\2\u01b1"+
		"\u0176\3\2\2\2\u01b1\u0177\3\2\2\2\u01b1\u0178\3\2\2\2\u01b1\u0179\3\2"+
		"\2\2\u01b1\u017a\3\2\2\2\u01b1\u017b\3\2\2\2\u01b1\u017c\3\2\2\2\u01b1"+
		"\u017d\3\2\2\2\u01b1\u017e\3\2\2\2\u01b1\u017f\3\2\2\2\u01b1\u0180\3\2"+
		"\2\2\u01b1\u0181\3\2\2\2\u01b1\u0182\3\2\2\2\u01b1\u0183\3\2\2\2\u01b1"+
		"\u0184\3\2\2\2\u01b1\u0185\3\2\2\2\u01b1\u0186\3\2\2\2\u01b1\u0187\3\2"+
		"\2\2\u01b1\u0188\3\2\2\2\u01b1\u0189\3\2\2\2\u01b1\u018a\3\2\2\2\u01b1"+
		"\u018b\3\2\2\2\u01b1\u018c\3\2\2\2\u01b1\u018d\3\2\2\2\u01b1\u018e\3\2"+
		"\2\2\u01b1\u018f\3\2\2\2\u01b1\u0190\3\2\2\2\u01b1\u0191\3\2\2\2\u01b1"+
		"\u0192\3\2\2\2\u01b1\u0193\3\2\2\2\u01b1\u0194\3\2\2\2\u01b1\u0195\3\2"+
		"\2\2\u01b1\u0196\3\2\2\2\u01b1\u0197\3\2\2\2\u01b1\u0198\3\2\2\2\u01b1"+
		"\u0199\3\2\2\2\u01b1\u019a\3\2\2\2\u01b1\u019b\3\2\2\2\u01b1\u019c\3\2"+
		"\2\2\u01b1\u019d\3\2\2\2\u01b1\u019e\3\2\2\2\u01b1\u019f\3\2\2\2\u01b1"+
		"\u01a0\3\2\2\2\u01b1\u01a1\3\2\2\2\u01b1\u01a2\3\2\2\2\u01b1\u01a3\3\2"+
		"\2\2\u01b1\u01a4\3\2\2\2\u01b1\u01a5\3\2\2\2\u01b1\u01a6\3\2\2\2\u01b1"+
		"\u01a7\3\2\2\2\u01b1\u01a8\3\2\2\2\u01b1\u01a9\3\2\2\2\u01b1\u01aa\3\2"+
		"\2\2\u01b1\u01ab\3\2\2\2\u01b1\u01ac\3\2\2\2\u01b1\u01ad\3\2\2\2\u01b1"+
		"\u01ae\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b0\3\2\2\2\u01b2\r\3\2\2\2"+
		"\u01b3\u01b4\7\u03ff\2\2\u01b4\u01b5\5\u00d6l\2\u01b5\17\3\2\2\2\u01b6"+
		"\u01b7\7\u0400\2\2\u01b7\u01b8\5\u00d6l\2\u01b8\21\3\2\2\2\u01b9\u01ba"+
		"\7\u0401\2\2\u01ba\u01bb\5\u00d6l\2\u01bb\23\3\2\2\2\u01bc\u01bd\7\u0402"+
		"\2\2\u01bd\u01be\5\u00d6l\2\u01be\25\3\2\2\2\u01bf\u01c0\7\u0404\2\2\u01c0"+
		"\u01c1\5\u00d6l\2\u01c1\27\3\2\2\2\u01c2\u01c3\7\u0406\2\2\u01c3\u01c4"+
		"\5\u00d6l\2\u01c4\31\3\2\2\2\u01c5\u01c6\7\u0407\2\2\u01c6\u01c7\5\u00d6"+
		"l\2\u01c7\33\3\2\2\2\u01c8\u01c9\7\u0408\2\2\u01c9\u01ca\5\u00d6l\2\u01ca"+
		"\35\3\2\2\2\u01cb\u01cc\7\u0409\2\2\u01cc\u01cd\5\u00d6l\2\u01cd\37\3"+
		"\2\2\2\u01ce\u01cf\7\u040a\2\2\u01cf\u01d0\5\u00d6l\2\u01d0!\3\2\2\2\u01d1"+
		"\u01d2\7\u040d\2\2\u01d2\u01d3\5\u00d6l\2\u01d3#\3\2\2\2\u01d4\u01d5\7"+
		"\u040e\2\2\u01d5\u01d6\5\u00d6l\2\u01d6%\3\2\2\2\u01d7\u01d8\7\u040f\2"+
		"\2\u01d8\u01d9\5\u00d6l\2\u01d9\'\3\2\2\2\u01da\u01db\7\u0410\2\2\u01db"+
		"\u01dc\5\u00d6l\2\u01dc)\3\2\2\2\u01dd\u01de\7\u0412\2\2\u01de\u01df\5"+
		"\u00d6l\2\u01df+\3\2\2\2\u01e0\u01e1\7\u0413\2\2\u01e1\u01e2\5\u00d6l"+
		"\2\u01e2-\3\2\2\2\u01e3\u01e4\7\u0414\2\2\u01e4\u01e5\5\u00d6l\2\u01e5"+
		"/\3\2\2\2\u01e6\u01e7\7\u0415\2\2\u01e7\u01e8\5\u00d6l\2\u01e8\61\3\2"+
		"\2\2\u01e9\u01ea\7\u0416\2\2\u01ea\u01eb\5\u00d6l\2\u01eb\63\3\2\2\2\u01ec"+
		"\u01ed\7\u0417\2\2\u01ed\u01ee\5\u00d6l\2\u01ee\65\3\2\2\2\u01ef\u01f0"+
		"\7\u041b\2\2\u01f0\u01f1\5\u00d6l\2\u01f1\67\3\2\2\2\u01f2\u01f3\7\u0418"+
		"\2\2\u01f3\u01f4\5\u00d6l\2\u01f49\3\2\2\2\u01f5\u01f6\7\u041e\2\2\u01f6"+
		"\u01f7\5\u00d6l\2\u01f7;\3\2\2\2\u01f8\u01f9\7\u041f\2\2\u01f9\u01fa\5"+
		"\u00d6l\2\u01fa=\3\2\2\2\u01fb\u01fc\7\u0420\2\2\u01fc\u01fd\5\u00d6l"+
		"\2\u01fd?\3\2\2\2\u01fe\u01ff\7\u0421\2\2\u01ff\u0200\5\u00d6l\2\u0200"+
		"A\3\2\2\2\u0201\u0202\7\u0422\2\2\u0202\u0203\5\u00d6l\2\u0203C\3\2\2"+
		"\2\u0204\u0205\7\u0423\2\2\u0205\u0206\5\u00d6l\2\u0206E\3\2\2\2\u0207"+
		"\u0208\7\u0424\2\2\u0208\u0209\5\u00d6l\2\u0209G\3\2\2\2\u020a\u020b\7"+
		"\u0425\2\2\u020b\u020c\5\u00d6l\2\u020cI\3\2\2\2\u020d\u020e\7\u0426\2"+
		"\2\u020e\u020f\5\u00d6l\2\u020fK\3\2\2\2\u0210\u0211\7\u0427\2\2\u0211"+
		"\u0212\5\u00d6l\2\u0212M\3\2\2\2\u0213\u0214\7\u042b\2\2\u0214\u0215\5"+
		"\u00d6l\2\u0215O\3\2\2\2\u0216\u0217\7\u042c\2\2\u0217\u0218\5\u00d6l"+
		"\2\u0218Q\3\2\2\2\u0219\u021a\7\u042d\2\2\u021a\u021b\5\u00d6l\2\u021b"+
		"S\3\2\2\2\u021c\u021d\7\u042f\2\2\u021d\u021e\5\u00d6l\2\u021eU\3\2\2"+
		"\2\u021f\u0220\7\u0430\2\2\u0220\u0221\5\u00d6l\2\u0221W\3\2\2\2\u0222"+
		"\u0223\7\u0431\2\2\u0223\u0224\5\u00d6l\2\u0224Y\3\2\2\2\u0225\u0226\7"+
		"\u0432\2\2\u0226\u0227\5\u00d6l\2\u0227[\3\2\2\2\u0228\u0229\7\u0434\2"+
		"\2\u0229\u022a\5\u00d6l\2\u022a]\3\2\2\2\u022b\u022c\7\u0435\2\2\u022c"+
		"\u022d\5\u00d6l\2\u022d_\3\2\2\2\u022e\u022f\7\u0437\2\2\u022f\u0230\5"+
		"\u00d6l\2\u0230a\3\2\2\2\u0231\u0232\7\u0438\2\2\u0232\u0233\5\u00d6l"+
		"\2\u0233c\3\2\2\2\u0234\u0235\7\u0439\2\2\u0235\u0236\5\u00d6l\2\u0236"+
		"e\3\2\2\2\u0237\u0238\7\u043c\2\2\u0238\u0239\5\u00d6l\2\u0239g\3\2\2"+
		"\2\u023a\u023b\7\u043d\2\2\u023b\u023c\5\u00d6l\2\u023ci\3\2\2\2\u023d"+
		"\u023e\t\2\2\2\u023e\u023f\5\u00d8m\2\u023fk\3\2\2\2\u0240\u0241\7\u0443"+
		"\2\2\u0241\u0242\5\u00d6l\2\u0242m\3\2\2\2\u0243\u0244\7\u0444\2\2\u0244"+
		"\u0245\5\u00d6l\2\u0245o\3\2\2\2\u0246\u0247\7\u0446\2\2\u0247\u0248\5"+
		"\u00d6l\2\u0248q\3\2\2\2\u0249\u024a\7\u0447\2\2\u024a\u024b\5\u00d6l"+
		"\2\u024bs\3\2\2\2\u024c\u024d\7\u0448\2\2\u024d\u024e\5\u00d6l\2\u024e"+
		"u\3\2\2\2\u024f\u0250\7\u0449\2\2\u0250\u0251\5\u00d6l\2\u0251w\3\2\2"+
		"\2\u0252\u0253\7\u044a\2\2\u0253\u0254\5\u00d6l\2\u0254y\3\2\2\2\u0255"+
		"\u0256\7\u044b\2\2\u0256\u0257\5\u00d6l\2\u0257{\3\2\2\2\u0258\u0259\7"+
		"\u044c\2\2\u0259\u025a\5\u00d6l\2\u025a}\3\2\2\2\u025b\u025c\7\u044d\2"+
		"\2\u025c\u025d\5\u00d6l\2\u025d\177\3\2\2\2\u025e\u025f\7\u044e\2\2\u025f"+
		"\u0260\5\u00d6l\2\u0260\u0081\3\2\2\2\u0261\u0262\7\u044f\2\2\u0262\u0263"+
		"\5\u00d6l\2\u0263\u0083\3\2\2\2\u0264\u0265\7\u0450\2\2\u0265\u0266\5"+
		"\u00d6l\2\u0266\u0085\3\2\2\2\u0267\u0268\7\u0452\2\2\u0268\u0269\5\u00d6"+
		"l\2\u0269\u0087\3\2\2\2\u026a\u026b\7\u0453\2\2\u026b\u026c\5\u00d6l\2"+
		"\u026c\u0089\3\2\2\2\u026d\u026e\7\u0455\2\2\u026e\u026f\5\u00d6l\2\u026f"+
		"\u008b\3\2\2\2\u0270\u0271\7\u0456\2\2\u0271\u0272\5\u00d6l\2\u0272\u008d"+
		"\3\2\2\2\u0273\u0274\7\u0459\2\2\u0274\u0275\5\u00d6l\2\u0275\u008f\3"+
		"\2\2\2\u0276\u0277\7\u045a\2\2\u0277\u0278\5\u00d6l\2\u0278\u0091\3\2"+
		"\2\2\u0279\u027a\7\u045b\2\2\u027a\u027b\5\u00d6l\2\u027b\u0093\3\2\2"+
		"\2\u027c\u027d\7\u045d\2\2\u027d\u027e\5\u00d6l\2\u027e\u0095\3\2\2\2"+
		"\u027f\u0280\7\u0460\2\2\u0280\u0281\5\u00d6l\2\u0281\u0097\3\2\2\2\u0282"+
		"\u0283\7\u0461\2\2\u0283\u0284\5\u00d6l\2\u0284\u0099\3\2\2\2\u0285\u0286"+
		"\7\u0462\2\2\u0286\u0287\5\u00d6l\2\u0287\u009b\3\2\2\2\u0288\u0289\7"+
		"\u0463\2\2\u0289\u028a\5\u00d6l\2\u028a\u009d\3\2\2\2\u028b\u028c\7\u0464"+
		"\2\2\u028c\u028d\5\u00d6l\2\u028d\u009f\3\2\2\2\u028e\u028f\7\u0467\2"+
		"\2\u028f\u0290\5\u00d6l\2\u0290\u00a1\3\2\2\2\u0291\u0292\7\u0469\2\2"+
		"\u0292\u0293\5\u00d6l\2\u0293\u00a3\3\2\2\2\u0294\u0295\7\u046b\2\2\u0295"+
		"\u0296\5\u00d6l\2\u0296\u00a5\3\2\2\2\u0297\u0298\7\u046e\2\2\u0298\u0299"+
		"\5\u00d6l\2\u0299\u00a7\3\2\2\2\u029a\u029b\7\u0470\2\2\u029b\u029c\5"+
		"\u00d6l\2\u029c\u00a9\3\2\2\2\u029d\u029e\7\u0471\2\2\u029e\u029f\5\u00d6"+
		"l\2\u029f\u00ab\3\2\2\2\u02a0\u02a1\7\u040c\2\2\u02a1\u02a6\7\u0454\2"+
		"\2\u02a2\u02a4\5\u00aeX\2\u02a3\u02a5\5\u00dco\2\u02a4\u02a3\3\2\2\2\u02a4"+
		"\u02a5\3\2\2\2\u02a5\u02a7\3\2\2\2\u02a6\u02a2\3\2\2\2\u02a7\u02a8\3\2"+
		"\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u00ad\3\2\2\2\u02aa"+
		"\u02ad\5\u00b0Y\2\u02ab\u02ad\5\u00b2Z\2\u02ac\u02aa\3\2\2\2\u02ac\u02ab"+
		"\3\2\2\2\u02ad\u00af\3\2\2\2\u02ae\u02af\7\u0442\2\2\u02af\u02b0\5\u00d6"+
		"l\2\u02b0\u00b1\3\2\2\2\u02b1\u02b2\7\u042e\2\2\u02b2\u02b3\5\u00d6l\2"+
		"\u02b3\u00b3\3\2\2\2\u02b4\u02b9\7\u0428\2\2\u02b5\u02b7\5\u00b6\\\2\u02b6"+
		"\u02b8\5\u00dco\2\u02b7\u02b6\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02ba"+
		"\3\2\2\2\u02b9\u02b5\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb"+
		"\u02bc\3\2\2\2\u02bc\u00b5\3\2\2\2\u02bd\u02c3\5\u00b8]\2\u02be\u02c3"+
		"\5\u00ba^\2\u02bf\u02c3\5\u00bc_\2\u02c0\u02c3\5\u00be`\2\u02c1\u02c3"+
		"\5\u00c0a\2\u02c2\u02bd\3\2\2\2\u02c2\u02be\3\2\2\2\u02c2\u02bf\3\2\2"+
		"\2\u02c2\u02c0\3\2\2\2\u02c2\u02c1\3\2\2\2\u02c3\u00b7\3\2\2\2\u02c4\u02c5"+
		"\7\u046a\2\2\u02c5\u02c6\5\u00d6l\2\u02c6\u00b9\3\2\2\2\u02c7\u02c8\7"+
		"\u045c\2\2\u02c8\u02c9\5\u00d6l\2\u02c9\u00bb\3\2\2\2\u02ca\u02cb\7\u046d"+
		"\2\2\u02cb\u02cc\5\u00d6l\2\u02cc\u00bd\3\2\2\2\u02cd\u02ce\7\u0436\2"+
		"\2\u02ce\u02cf\5\u00d6l\2\u02cf\u00bf\3\2\2\2\u02d0\u02d1\7\u040b\2\2"+
		"\u02d1\u02d2\5\u00d6l\2\u02d2\u00c1\3\2\2\2\u02d3\u02d8\7\u0433\2\2\u02d4"+
		"\u02d6\5\u00c4c\2\u02d5\u02d7\5\u00dco\2\u02d6\u02d5\3\2\2\2\u02d6\u02d7"+
		"\3\2\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02d4\3\2\2\2\u02d9\u02da\3\2\2\2\u02da"+
		"\u02d8\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u00c3\3\2\2\2\u02dc\u02e9\5\u00c6"+
		"d\2\u02dd\u02e9\5z>\2\u02de\u02e9\5\u0082B\2\u02df\u02e9\5\u00c8e\2\u02e0"+
		"\u02e9\5\u0096L\2\u02e1\u02e9\5Z.\2\u02e2\u02e9\5\u00caf\2\u02e3\u02e9"+
		"\5\u00ccg\2\u02e4\u02e9\5X-\2\u02e5\u02e9\5\u00ceh\2\u02e6\u02e9\5\u00d0"+
		"i\2\u02e7\u02e9\5\u008cG\2\u02e8\u02dc\3\2\2\2\u02e8\u02dd\3\2\2\2\u02e8"+
		"\u02de\3\2\2\2\u02e8\u02df\3\2\2\2\u02e8\u02e0\3\2\2\2\u02e8\u02e1\3\2"+
		"\2\2\u02e8\u02e2\3\2\2\2\u02e8\u02e3\3\2\2\2\u02e8\u02e4\3\2\2\2\u02e8"+
		"\u02e5\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e7\3\2\2\2\u02e9\u00c5\3\2"+
		"\2\2\u02ea\u02ee\7\u0465\2\2\u02eb\u02ed\5\u00dco\2\u02ec\u02eb\3\2\2"+
		"\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f1"+
		"\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f1\u02f5\7\u042a\2\2\u02f2\u02f4\5\u00dc"+
		"o\2\u02f3\u02f2\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5"+
		"\u02f6\3\2\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f8\u02f9\7\u0454"+
		"\2\2\u02f9\u00c7\3\2\2\2\u02fa\u02fb\7\u0454\2\2\u02fb\u00c9\3\2\2\2\u02fc"+
		"\u02fd\7\u0451\2\2\u02fd\u02fe\5\u00d6l\2\u02fe\u00cb\3\2\2\2\u02ff\u0300"+
		"\7\u043b\2\2\u0300\u0301\5\u00d6l\2\u0301\u00cd\3\2\2\2\u0302\u0303\7"+
		"\u0466\2\2\u0303\u0304\5\u00d6l\2\u0304\u00cf\3\2\2\2\u0305\u0306\7\u045f"+
		"\2\2\u0306\u0307\5\u00d6l\2\u0307\u00d1\3\2\2\2\u0308\u030d\7\u0458\2"+
		"\2\u0309\u030b\5\f\7\2\u030a\u030c\5\u00dco\2\u030b\u030a\3\2\2\2\u030b"+
		"\u030c\3\2\2\2\u030c\u030e\3\2\2\2\u030d\u0309\3\2\2\2\u030e\u030f\3\2"+
		"\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u00d3\3\2\2\2\u0311"+
		"\u0312\7\u0458\2\2\u0312\u0314\7\u046f\2\2\u0313\u0315\5\u00dco\2\u0314"+
		"\u0313\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u031a\3\2\2\2\u0316\u0318\5\f"+
		"\7\2\u0317\u0319\5\u00dco\2\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319"+
		"\u031b\3\2\2\2\u031a\u0316\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031a\3\2"+
		"\2\2\u031c\u031d\3\2\2\2\u031d\u00d5\3\2\2\2\u031e\u0332\7\u03f1\2\2\u031f"+
		"\u0331\7\u03f1\2\2\u0320\u0322\7\u0476\2\2\u0321\u0320\3\2\2\2\u0322\u0323"+
		"\3\2\2\2\u0323\u0321\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0331\3\2\2\2\u0325"+
		"\u0327\7\u047b\2\2\u0326\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u0326"+
		"\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u0331\3\2\2\2\u032a\u032c\7\u03fe\2"+
		"\2\u032b\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032b\3\2\2\2\u032d\u032e"+
		"\3\2\2\2\u032e\u0331\3\2\2\2\u032f\u0331\7\u03f2\2\2\u0330\u031f\3\2\2"+
		"\2\u0330\u0321\3\2\2\2\u0330\u0326\3\2\2\2\u0330\u032b\3\2\2\2\u0330\u032f"+
		"\3\2\2\2\u0331\u0334\3\2\2\2\u0332\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333"+
		"\u0335\3\2\2\2\u0334\u0332\3\2\2\2\u0335\u0336\7\u03f2\2\2\u0336\u00d7"+
		"\3\2\2\2\u0337\u0345\7\u03f1\2\2\u0338\u033a\7\u0476\2\2\u0339\u0338\3"+
		"\2\2\2\u033a\u033b\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c\3\2\2\2\u033c"+
		"\u033e\3\2\2\2\u033d\u033f\5\u00dan\2\u033e\u033d\3\2\2\2\u033e\u033f"+
		"\3\2\2\2\u033f\u0346\3\2\2\2\u0340\u0342\7\u047b\2\2\u0341\u0340\3\2\2"+
		"\2\u0342\u0343\3\2\2\2\u0343\u0341\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0346"+
		"\3\2\2\2\u0345\u0339\3\2\2\2\u0345\u0341\3\2\2\2\u0346\u034a\3\2\2\2\u0347"+
		"\u0349\7\u0476\2\2\u0348\u0347\3\2\2\2\u0349\u034c\3\2\2\2\u034a\u0348"+
		"\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034d\3\2\2\2\u034c\u034a\3\2\2\2\u034d"+
		"\u034e\7\u03f2\2\2\u034e\u00d9\3\2\2\2\u034f\u0351\7\u03f1\2\2\u0350\u0352"+
		"\7\u0476\2\2\u0351\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0351\3\2\2"+
		"\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356\7\u03f2\2\2\u0356"+
		"\u00db\3\2\2\2\u0357\u0358\t\3\2\2\u0358\u00dd\3\2\2\2\u0359\u035a\7\4"+
		"\2\2\u035a\u035b\7\u0491\2\2\u035b\u035c\7\u0494\2\2\u035c\u035d\5\u00fa"+
		"~\2\u035d\u035e\7\u0494\2\2\u035e\u035f\7\u048a\2\2\u035f\u0360\5\u00e2"+
		"r\2\u0360\u0361\7\u048a\2\2\u0361\u0362\5\u00e4s\2\u0362\u0363\7\u048a"+
		"\2\2\u0363\u0364\5\u00e8u\2\u0364\u0365\7\u048a\2\2\u0365\u0366\5\u00ea"+
		"v\2\u0366\u0367\7\u048a\2\2\u0367\u0368\5\u00ecw\2\u0368\u0369\7\u048a"+
		"\2\2\u0369\u036a\5\u00eex\2\u036a\u036b\7\u048a\2\2\u036b\u036c\5\u00f0"+
		"y\2\u036c\u036d\7\u048a\2\2\u036d\u036e\5\u00f2z\2\u036e\u036f\7\u048a"+
		"\2\2\u036f\u0370\5\u00f4{\2\u0370\u0371\7\u048a\2\2\u0371\u0372\5\u00f8"+
		"}\2\u0372\u0373\7\u048a\2\2\u0373\u0374\5\u00f6|\2\u0374\u0375\7\u0492"+
		"\2\2\u0375\u0377\5\u00e0q\2\u0376\u0378\7\36\2\2\u0377\u0376\3\2\2\2\u0377"+
		"\u0378\3\2\2\2\u0378\u00df\3\2\2\2\u0379\u037a\7\u0486\2\2\u037a\u00e1"+
		"\3\2\2\2\u037b\u037c\7\u048f\2\2\u037c\u00e3\3\2\2\2\u037d\u0381\7\u0498"+
		"\2\2\u037e\u0381\7\u0496\2\2\u037f\u0381\5\u00e6t\2\u0380\u037d\3\2\2"+
		"\2\u0380\u037e\3\2\2\2\u0380\u037f\3\2\2\2\u0381\u00e5\3\2\2\2\u0382\u0383"+
		"\7\u0494\2\2\u0383\u0384\t\4\2\2\u0384\u0385\7\u0494\2\2\u0385\u00e7\3"+
		"\2\2\2\u0386\u0387\t\5\2\2\u0387\u00e9\3\2\2\2\u0388\u0389\7\u048f\2\2"+
		"\u0389\u00eb\3\2\2\2\u038a\u038b\7\u048f\2\2\u038b\u00ed\3\2\2\2\u038c"+
		"\u038d\7\u048f\2\2\u038d\u00ef\3\2\2\2\u038e\u038f\7\u048f\2\2\u038f\u00f1"+
		"\3\2\2\2\u0390\u0391\7\u048f\2\2\u0391\u00f3\3\2\2\2\u0392\u0393\7\u048f"+
		"\2\2\u0393\u00f5\3\2\2\2\u0394\u039d\7\u0498\2\2\u0395\u0397\7\u0494\2"+
		"\2\u0396\u0395\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a"+
		"\7\u048f\2\2\u0399\u039b\7\u0494\2\2\u039a\u0399\3\2\2\2\u039a\u039b\3"+
		"\2\2\2\u039b\u039d\3\2\2\2\u039c\u0394\3\2\2\2\u039c\u0396\3\2\2\2\u039d"+
		"\u00f7\3\2\2\2\u039e\u03a0\7\u0494\2\2\u039f\u039e\3\2\2\2\u039f\u03a0"+
		"\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a3\7\u048f\2\2\u03a2\u03a4\7\u0494"+
		"\2\2\u03a3\u03a2\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5"+
		"\u03a7\7\u0498\2\2\u03a6\u039f\3\2\2\2\u03a6\u03a5\3\2\2\2\u03a7\u00f9"+
		"\3\2\2\2\u03a8\u03ab\5\u00fc\177\2\u03a9\u03ab\5\u00fe\u0080\2\u03aa\u03a8"+
		"\3\2\2\2\u03aa\u03a9\3\2\2\2\u03ab\u00fb\3\2\2\2\u03ac\u03ad\7\u048b\2"+
		"\2\u03ad\u00fd\3\2\2\2\u03ae\u03af\7\u048c\2\2\u03af\u00ff\3\2\2\2\u03b0"+
		"\u03b1\7\5\2\2\u03b1\u03b2\7\u04aa\2\2\u03b2\u03b3\5\u0104\u0083\2\u03b3"+
		"\u03b4\7\u04a5\2\2\u03b4\u03b5\5\u0106\u0084\2\u03b5\u03b6\7\u04a5\2\2"+
		"\u03b6\u03b7\5\u0108\u0085\2\u03b7\u03b8\7\u04a5\2\2\u03b8\u03b9\5\u012e"+
		"\u0098\2\u03b9\u03ba\7\u04ab\2\2\u03ba\u03bc\5\u0102\u0082\2\u03bb\u03bd"+
		"\7\36\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u0101\3\2\2\2"+
		"\u03be\u03bf\7\u04a2\2\2\u03bf\u0103\3\2\2\2\u03c0\u03c1\7\u04b2\2\2\u03c1"+
		"\u0105\3\2\2\2\u03c2\u03c3\7\u04b1\2\2\u03c3\u0107\3\2\2\2\u03c4\u03cf"+
		"\7\u04b0\2\2\u03c5\u03c7\5\u0124\u0093\2\u03c6\u03c5\3\2\2\2\u03c7\u03c8"+
		"\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03d0\3\2\2\2\u03ca"+
		"\u03cc\5\u012c\u0097\2\u03cb\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03cb"+
		"\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03d0\3\2\2\2\u03cf\u03c6\3\2\2\2\u03cf"+
		"\u03cb\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1\u03d3\5\u010a\u0086\2\u03d2\u03d1"+
		"\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5"+
		"\u03d6\3\2\2\2\u03d6\u03d7\7\u04b0\2\2\u03d7\u0109\3\2\2\2\u03d8\u03e1"+
		"\5\u010c\u0087\2\u03d9\u03e1\5\u010e\u0088\2\u03da\u03e1\5\u0110\u0089"+
		"\2\u03db\u03e1\5\u0112\u008a\2\u03dc\u03e1\5\u0114\u008b\2\u03dd\u03e1"+
		"\5\u0116\u008c\2\u03de\u03e1\5\u011a\u008e\2\u03df\u03e1\5\u0118\u008d"+
		"\2\u03e0\u03d8\3\2\2\2\u03e0\u03d9\3\2\2\2\u03e0\u03da\3\2\2\2\u03e0\u03db"+
		"\3\2\2\2\u03e0\u03dc\3\2\2\2\u03e0\u03dd\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0"+
		"\u03df\3\2\2\2\u03e1\u010b\3\2\2\2\u03e2\u03e3\7\u04f1\2\2\u03e3\u03e4"+
		"\7\u04dc\2\2\u03e4\u03e5\t\6\2\2\u03e5\u03e6\7\u04fd\2\2\u03e6\u03e8\7"+
		"\u04fe\2\2\u03e7\u03e9\7\u04ff\2\2\u03e8\u03e7\3\2\2\2\u03e8\u03e9\3\2"+
		"\2\2\u03e9\u03eb\3\2\2\2\u03ea\u03ec\7\u0500\2\2\u03eb\u03ea\3\2\2\2\u03eb"+
		"\u03ec\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ee\7\u0503\2\2\u03ee\u03f0"+
		"\7\u0504\2\2\u03ef\u03f1\5\u011c\u008f\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1"+
		"\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\7\u04f3\2\2\u03f3\u03f5\7\u04f6"+
		"\2\2\u03f4\u03f3\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u010d\3\2\2\2\u03f6"+
		"\u03f7\7\u0501\2\2\u03f7\u03f8\t\6\2\2\u03f8\u03fa\7\u04ff\2\2\u03f9\u03fb"+
		"\7\u0502\2\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\3\2\2"+
		"\2\u03fc\u03fe\7\u04f3\2\2\u03fd\u03ff\5\u0110\u0089\2\u03fe\u03fd\3\2"+
		"\2\2\u03fe\u03ff\3\2\2\2\u03ff\u010f\3\2\2\2\u0400\u0401\7\u04bc\2\2\u0401"+
		"\u0402\7\u04be\2\2\u0402\u0403\t\6\2\2\u0403\u0404\7\u04bb\2\2\u0404\u0405"+
		"\7\u04ba\2\2\u0405\u0111\3\2\2\2\u0406\u0407\7\u04e1\2\2\u0407\u0408\7"+
		"\u04e2\2\2\u0408\u040a\t\7\2\2\u0409\u040b\7\u04ff\2\2\u040a\u0409\3\2"+
		"\2\2\u040a\u040b\3\2\2\2\u040b\u040d\3\2\2\2\u040c\u040e\7\u04e5\2\2\u040d"+
		"\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u0411\7\u04e6"+
		"\2\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\3\2\2\2\u0412"+
		"\u0413\7\u04fd\2\2\u0413\u0414\7\u04f6\2\2\u0414\u0416\7\u04e7\2\2\u0415"+
		"\u0417\5\u011c\u008f\2\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418"+
		"\3\2\2\2\u0418\u0419\7\u04e9\2\2\u0419\u041a\7\u0503\2\2\u041a\u041b\7"+
		"\u0504\2\2\u041b\u041c\7\u04eb\2\2\u041c\u041d\7\u04ec\2\2\u041d\u041f"+
		"\7\u04ed\2\2\u041e\u0420\5\u011c\u008f\2\u041f\u041e\3\2\2\2\u041f\u0420"+
		"\3\2\2\2\u0420\u0113\3\2\2\2\u0421\u0422\7\u04ea\2\2\u0422\u0115\3\2\2"+
		"\2\u0423\u0424\7\u04c6\2\2\u0424\u0425\7\u04dc\2\2\u0425\u0426\t\6\2\2"+
		"\u0426\u0427\7\u04c7\2\2\u0427\u0428\7\u04c8\2\2\u0428\u0429\7\u04ca\2"+
		"\2\u0429\u0117\3\2\2\2\u042a\u042b\7\u04c5\2\2\u042b\u042d\5\u0120\u0091"+
		"\2\u042c\u042e\7\u04f3\2\2\u042d\u042c\3\2\2\2\u042d\u042e\3\2\2\2\u042e"+
		"\u042f\3\2\2\2\u042f\u0430\7\u0503\2\2\u0430\u0432\7\u0504\2\2\u0431\u0433"+
		"\5\u011c\u008f\2\u0432\u0431\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0435\3"+
		"\2\2\2\u0434\u0436\7\u04ca\2\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2"+
		"\u0436\u0438\3\2\2\2\u0437\u0439\7\u0502\2\2\u0438\u0437\3\2\2\2\u0438"+
		"\u0439\3\2\2\2\u0439\u0119\3\2\2\2\u043a\u043b\7\u04bd\2\2\u043b\u043c"+
		"\t\6\2\2\u043c\u011b\3\2\2\2\u043d\u043f\7\u04f2\2\2\u043e\u0440\5\u011e"+
		"\u0090\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0442\3\2\2\2\u0441"+
		"\u0443\5\u0120\u0091\2\u0442\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0445"+
		"\3\2\2\2\u0444\u0446\5\u0122\u0092\2\u0445\u0444\3\2\2\2\u0445\u0446\3"+
		"\2\2\2\u0446\u011d\3\2\2\2\u0447\u0448\7\u04ec\2\2\u0448\u0449\7\u04dd"+
		"\2\2\u0449\u011f\3\2\2\2\u044a\u044b\7\u04de\2\2\u044b\u044f\t\b\2\2\u044c"+
		"\u044d\7\u04df\2\2\u044d\u044f\t\b\2\2\u044e\u044a\3\2\2\2\u044e\u044c"+
		"\3\2\2\2\u044f\u0121\3\2\2\2\u0450\u0452\7\u04e0\2\2\u0451\u0450\3\2\2"+
		"\2\u0451\u0452\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454\7\u04ee\2\2\u0454"+
		"\u0455\7\u04ef\2\2\u0455\u0456\7\u04f0\2\2\u0456\u0123\3\2\2\2\u0457\u045b"+
		"\7\u04b7\2\2\u0458\u045c\5\u0126\u0094\2\u0459\u045c\5\u012a\u0096\2\u045a"+
		"\u045c\5\u0128\u0095\2\u045b\u0458\3\2\2\2\u045b\u0459\3\2\2\2\u045b\u045a"+
		"\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045e\3\2\2\2\u045e"+
		"\u0125\3\2\2\2\u045f\u0460\7\u04db\2\2\u0460\u0461\7\u04dc\2\2\u0461\u0462"+
		"\7\u04cb\2\2\u0462\u0127\3\2\2\2\u0463\u0464\7\u04db\2\2\u0464\u0465\7"+
		"\u04df\2\2\u0465\u0466\7\u04cb\2\2\u0466\u0129\3\2\2\2\u0467\u0468\7\u04db"+
		"\2\2\u0468\u0469\7\u04de\2\2\u0469\u046a\7\u04cb\2\2\u046a\u012b\3\2\2"+
		"\2\u046b\u046c\7\u04b8\2\2\u046c\u046d\7\u04f7\2\2\u046d\u046e\7\u04aa"+
		"\2\2\u046e\u046f\7\u04c4\2\2\u046f\u0471\7\u04ab\2\2\u0470\u0472\7\u04f8"+
		"\2\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0474\3\2\2\2\u0473"+
		"\u0475\7\u04f9\2\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0477"+
		"\3\2\2\2\u0476\u0478\7\u04cc\2\2\u0477\u0476\3\2\2\2\u0477\u0478\3\2\2"+
		"\2\u0478\u0479\3\2\2\2\u0479\u047b\7\u04fa\2\2\u047a\u047c\7\u04d0\2\2"+
		"\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047e\3\2\2\2\u047d\u047f"+
		"\7\u04d2\2\2\u047e\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0481\3\2\2"+
		"\2\u0480\u0482\7\u04fb\2\2\u0481\u0480\3\2\2\2\u0481\u0482\3\2\2\2\u0482"+
		"\u0484\3\2\2\2\u0483\u0485\5\u0124\u0093\2\u0484\u0483\3\2\2\2\u0484\u0485"+
		"\3\2\2\2\u0485\u012d\3\2\2\2\u0486\u0487\7\u04a7\2\2\u0487\u012f\3\2\2"+
		"\2T\u0133\u0135\u0139\u0143\u014b\u0150\u0154\u0157\u015c\u0160\u01b1"+
		"\u02a4\u02a8\u02ac\u02b7\u02bb\u02c2\u02d6\u02da\u02e8\u02ee\u02f5\u030b"+
		"\u030f\u0314\u0318\u031c\u0323\u0328\u032d\u0330\u0332\u033b\u033e\u0343"+
		"\u0345\u034a\u0353\u0377\u0380\u0396\u039a\u039c\u039f\u03a3\u03a6\u03aa"+
		"\u03bc\u03c8\u03cd\u03cf\u03d4\u03e0\u03e8\u03eb\u03f0\u03f4\u03fa\u03fe"+
		"\u040a\u040d\u0410\u0416\u041f\u042d\u0432\u0435\u0438\u043f\u0442\u0445"+
		"\u044e\u0451\u045b\u045d\u0471\u0474\u0477\u047b\u047e\u0481\u0484";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}